<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ganyuo</title>
  
  
  <link href="http://ganyuo.github.io/atom.xml" rel="self"/>
  
  <link href="http://ganyuo.github.io/"/>
  <updated>2025-03-07T01:58:02.802Z</updated>
  <id>http://ganyuo.github.io/</id>
  
  <author>
    <name>ganyuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt 学习笔记</title>
    <link href="http://ganyuo.github.io/learn_note/qt_learn/"/>
    <id>http://ganyuo.github.io/learn_note/qt_learn/</id>
    <published>2023-03-10T16:00:00.000Z</published>
    <updated>2025-03-07T01:58:02.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说两句"><a class="markdownIt-Anchor" href="#先说两句"></a> 先说两句</h1><p>  最近偷懒了很久没有学习，对于自己的懒惰实在是看不下了，所以决定随便学点什么。但是最近没什么学习的方向，想起之前学过一点点Qt，但是没有学完，所有打算先把Qt学完，说不定以后能用上，随便记录一下学习笔记。我自己是一个自制力比较差的人，但是有点强迫症，如果了笔记没写完，会非常不舒服，所有以后以后把学的东西都记一下笔记，能一定程度上约束一下自己。突然想起之前写的shell脚本笔记还有<code>sed</code>命令还没学完，emmm…下次再补。</p><h1 id="qt简介"><a class="markdownIt-Anchor" href="#qt简介"></a> Qt简介</h1><p>  Qt是一个跨平台的C++开发库，主要用来开发图形用户界面程序。Qt还存在Python、Ruby、Perl等脚本语言的绑定，也就是说可以使用脚本语言开发基于 Qt 的程序。开源社区就是这样，好东西就会被派生扩展，到处使用，越来越壮大。</p><p>  Qt支持的操作系统有很多，例如通用操作系统Windows、Linux、Unix，智能手机系统Android、iOS、WinPhone，嵌入式系统QNX、VxWorks等等。</p><p>  上面是从<a href="http://c.biancheng.net/view/1792.html" target="_blank" rel="noopener">C语言中文网</a>上抄的Qt简介，附上<a href="https://www.qt.io" target="_blank" rel="noopener">Qt的官网</a>，感兴趣的小伙伴可以去看看。</p><p>  Qt包含很多C++的类，但是头文件代码里的注释基本没有，2333…，所以只能去看Qt官网上的文档：<a href="https://doc.qt.io/qt-5/classes.html" target="_blank" rel="noopener">https://doc.qt.io/qt-5/classes.html</a>，里面有所有类的说明。因为类太多了，所以后面关于类的成员函数就不解析了，小伙伴们有不清楚的地方可以去官网上查。</p><h1 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h1><p>  我自己是在linuxmint系统下用VScode搭建的，具体参考这篇<a href="/learn_note/linux_qt_config/">博客</a>，其他系统下搭建环境的小伙伴也可以参考一下。</p><h1 id="pro文件配置"><a class="markdownIt-Anchor" href="#pro文件配置"></a> pro文件配置</h1><p>  pro文件只要用于配置Qt项目的编译，具体配置方式<s>抄</s>参考了一下大佬的这篇<a href="https://zhuanlan.zhihu.com/p/110782759" target="_blank" rel="noopener">文章</a></p><h2 id="常用配置项"><a class="markdownIt-Anchor" href="#常用配置项"></a> 常用配置项</h2><ol><li><p>注释 : 注释是从一行的<code>#</code>开始，到这一行的结束。</p></li><li><p><code>QT += </code> : 这个是添加QT项目需要的模块的，若项目中要排除某个模块，也可用<code>QT -= </code>配置项。</p></li><li><p><code>TEMPLATE = </code> : 这个配置项确定<code>qmake</code>为这个应用程序生成哪种<code>makefile</code> 。有下面五种形式可供选择：</p><ul><li><code>app</code> : 建立一个应用程序的makefile，这个是默认值，若模块项未指定，将默认使用此项；</li><li><code>lib</code> : 建立一个库的makefile；</li><li><code>vcapp</code> : 建立一个应用程序的VisualStudio项目文件；</li><li><code>vclib</code> : 建立一个库的VisualStudio项目文件；</li><li><code>subdirs</code> : 这是一个特殊的模板，可以创建一个可进入特定目录并为一个项目文件生成makefile，此makfile可以调用make；</li></ul></li><li><p><code>TARGET = </code>: 这个配置项用来指定最后生成的目标应用程序的名称。</p></li><li><p><code>CONFIG += </code> : 用来告诉qmake关于应用程序的配置信息，使用+=表示在现有的配置上添加，这样会更安全。比如，<code>CONFIG += qt warn_on release</code> 其具体的意义为：</p><ul><li><code>qt</code> : 告诉qmake此程序是使用qt来连编的。即qmake在连接、为编译添加所需包含路径时会考虑qt的库；</li><li><code>warn_on</code> : 告诉qmake要将编译器设置为输出警告信息形式；</li><li><code>release</code> : 告诉qmake应用程序必须被连编为一个可发布的应用程序。开发过程中，也可以使用<code>debug</code>；</li></ul></li><li><p><code>UIC_DIR += </code> : 用来指定<code>uic</code>命令，将<code>.ui</code>文件转化为<code>ui_*.h</code>文件存放的目录。</p></li><li><p><code>RCC_DIR += </code> : 用来指定<code>rcc</code>命令，将<code>.qrc</code>文件转换成<code>qrc_*.h</code>文件存放的目录。</p></li><li><p><code>MOC_DIR += </code> : 用来指定<code>moc</code>命令，将含有<code>Q_OBJECT</code>的头文件转换成标准<code>.h</code>文件存放的目录。</p></li><li><p><code>OBJECTS_DIR += </code> : 用来指定目标文件<code>obj</code>的存放目录。</p></li><li><p><code>DEPENDPATH += </code> : 用来指定工程的依赖路径。</p></li><li><p><code>INCLUDEPATH += </code> : 用来指定工程所需要的头文件。</p></li><li><p><code>CODECFORSRC += </code> : 用来指定源文件的编码格式。</p></li><li><p><code>FORMS += </code> : 用来指定工程中的<code>ui</code>文件。</p></li><li><p><code>HEADERS += </code> : 用来指定工程中所包含的头文件。</p></li><li><p><code>SOURCES += </code> : 用来指定工程中包含的源文件。</p></li><li><p><code>RESOURCES += </code> : 用来指定工程中所包含的资源文件。</p></li><li><p><code>LIBS += </code> : 用来指定引入的<code>lib</code>文件的路径，一般会在前面加下参数<code>-L</code>，根据不同的版本可以分为两种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Release: LIBS +&#x3D; -L folder_Path # release版本引入的lib文件</span><br><span class="line">Debug: LIBS +&#x3D; -L folder_Path   # debug版本引入的lib文件</span><br></pre></td></tr></table></figure></li><li><p><code>DEFINES += </code> : 用来定义编译选项。</p></li><li><p><code>DESTDIR += </code> : 用来指定目标的生成路径。</p></li><li><p>跨平台处理信息也要写在pro文件中。 其示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">win32</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unix</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="pro文件样例"><a class="markdownIt-Anchor" href="#pro文件样例"></a> pro文件样例</h2><p>下面是大佬给的一个pro文件样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 添加QT依赖的库</span><br><span class="line">QT +&#x3D; gui</span><br><span class="line">QT +&#x3D; core xml network multimedia serialport</span><br><span class="line">greaterThan(QT_MAJOR_VERSION, 4): QT +&#x3D; widgets</span><br><span class="line"></span><br><span class="line"># 添加c11配置支持</span><br><span class="line">CONFIG +&#x3D; c++11</span><br><span class="line"># 输出文件的名称</span><br><span class="line">TARGET &#x3D; YouAppName</span><br><span class="line"># 配置控制台输出</span><br><span class="line">CONFIG +&#x3D; console</span><br><span class="line"># 输出类型application</span><br><span class="line">TEMPLATE &#x3D; app</span><br><span class="line"></span><br><span class="line"># 源文件</span><br><span class="line">SOURCES +&#x3D; main.cpp \</span><br><span class="line">    appconfig.cpp \</span><br><span class="line">    opendoorthread.cpp \</span><br><span class="line">    TestProject&#x2F;testform.cpp \</span><br><span class="line">    TestProject&#x2F;common.pb.cpp \</span><br><span class="line">    TestProject&#x2F;goods_req.pb.cpp \</span><br><span class="line">    TestProject&#x2F;goods_resp.pb.cpp</span><br><span class="line"></span><br><span class="line"># 头文件</span><br><span class="line">HEADERS +&#x3D; \</span><br><span class="line">    appconfig.h \</span><br><span class="line">    opendoorthread.h \</span><br><span class="line">    TestProject&#x2F;testform.h \</span><br><span class="line">    TestProject&#x2F;common.pb.h \</span><br><span class="line">    TestProject&#x2F;goods_req.pb.h \</span><br><span class="line">    TestProject&#x2F;goods_resp.pb.h</span><br><span class="line"></span><br><span class="line"># 配置debug和release</span><br><span class="line">CONFIG +&#x3D;debug_and_release</span><br><span class="line">CONFIG(debug,debug|release)&#123;</span><br><span class="line">DESTDIR +&#x3D; $$PWD&#x2F;debug</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lThorModel</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lThorUtil</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lThorBLL</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lThorHardwareUtil</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lprotobufd</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lprotobuf-lited</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lopencv_core2410d</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lopencv_highgui2410d</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lopencv_imgproc2410d</span><br><span class="line">LIBS +&#x3D; -L$$PWD&#x2F;debug&#x2F; -lQtActionDetectd</span><br><span class="line">&#125;else&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 需要的头文件</span><br><span class="line">INCLUDEPATH +&#x3D; $$PWD&#x2F;AllDLL&#x2F;include</span><br><span class="line">INCLUDEPATH +&#x3D; $$PWD&#x2F;debug&#x2F;3rdparty&#x2F;opencv-2.4.10&#x2F;include \</span><br><span class="line">            $$PWD&#x2F;debug&#x2F;3rdparty&#x2F;opencv-2.4.10&#x2F;include&#x2F;opencv \</span><br><span class="line">            $$PWD&#x2F;debug&#x2F;3rdparty&#x2F;opencv-2.4.10&#x2F;include&#x2F;opencv2</span><br><span class="line"># ui</span><br><span class="line">FORMS +&#x3D; \</span><br><span class="line">    TestProject&#x2F;testform.ui</span><br></pre></td></tr></table></figure><h1 id="gui"><a class="markdownIt-Anchor" href="#gui"></a> GUI</h1><p>  Qt的很多GUI控件都是继承自QWidget，所以使用Qt的GUI一般都需要加上<code>widgets</code>和<code>gui</code>这两个库，pro项目文件样例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加widgets和gui库</span><br><span class="line">QT +&#x3D; widgets gui</span><br><span class="line"></span><br><span class="line"># 把main.cpp加到项目的代码列表里</span><br><span class="line">SOURCES +&#x3D; \</span><br><span class="line">    main.cpp</span><br></pre></td></tr></table></figure><h2 id="qwidget"><a class="markdownIt-Anchor" href="#qwidget"></a> QWidget</h2><p>  QWidget是Qt的窗口类，下面是一段样例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt; /* 应用程序抽象类 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;  /* 窗口类 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>; <span class="comment">/* 创建一个Qt应用 */</span></span><br><span class="line"></span><br><span class="line">    QWidget widget; <span class="comment">/* 构造一个窗口 */</span></span><br><span class="line">    widget.setWindowTitle(<span class="string">"Hello World"</span>); <span class="comment">/* 设置窗口标题 */</span></span><br><span class="line">    widget.show(); <span class="comment">/* 显示窗口 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec(); <span class="comment">/* exec():进入消息循环 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面的代码中，创建了一个标题是<code>Hello World</code>的窗口。执行<code>app.exec();</code>后，会进入一个处理消息的死循环，<code>app</code>会捕获系统消息，并传递给<code>widget</code>窗口。这就是鼠标点击后能拖动窗口的原因，<code>app</code>将鼠标的点击、移动等消息传递给了<code>widget</code>，<code>widget</code>作出了对应的响应，窗口移动了位置。</p><h2 id="控件"><a class="markdownIt-Anchor" href="#控件"></a> 控件</h2><p>  Qt里有很多控件，大部分都是继承自<code>Qwidget</code>，所以控件也可以看作是一个窗口，这里列举一些常用的控件(抄大佬的这篇<a href="https://zhuanlan.zhihu.com/p/612560027" target="_blank" rel="noopener">博客</a>)：</p><table><thead><tr><th>控件</th><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>标签</td><td>QLabel</td><td>显示一个文本或图像。</td></tr><tr><td>按钮</td><td>QPushButton</td><td>用户可以点击的一个按钮，用来触发某个操作。</td></tr><tr><td>输入框</td><td>QLineEdit</td><td>用户可以在其中输入文本的一个输入框。</td></tr><tr><td>复选框</td><td>QCheckBox</td><td>用户可以勾选或取消的一个复选框。</td></tr><tr><td>单选按钮</td><td>QRadioButton</td><td>用户可以选择其中一个选项的一组单选按钮。</td></tr><tr><td>数字微调框</td><td>QSpinBox</td><td>用于选择一个数值的微调框。</td></tr><tr><td>滑动条</td><td>QSlider</td><td>用户可以通过滑动来选择数值的一个滑动条。</td></tr><tr><td>列表框</td><td>QListWidget</td><td>用于显示一组列表项的一个列表框。</td></tr><tr><td>组合框</td><td>QComboBox</td><td>类似于下拉菜单的一个组合框，用户可以选择其中一个选项。</td></tr><tr><td>多行文本框</td><td>QTextEdit</td><td>用户可以在其中编辑多行文本的一个文本编辑框。</td></tr><tr><td>日期和时间编辑框</td><td>QDateTimeEdit</td><td>用于选择日期和时间的一个日期和时间编辑框。</td></tr></tbody></table><p>  由于控件种类太多了，这里只介绍一下按钮<code>QPushButton</code>和输入框<code>QLineEdit</code>这两种控件，其他控件的很多性质和接口都比较相似，小伙伴们可以自己尝试，<s>我就偷懒不写了</s>。</p><h3 id="按钮-qpushbutton"><a class="markdownIt-Anchor" href="#按钮-qpushbutton"></a> 按钮-QPushButton</h3><p>  下面是一个在窗口中添加一个按钮的样例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt; /* 应用程序抽象类 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;  /* 窗口类 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt; /* 按钮类 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QWidget widget; <span class="comment">/* 构造一个窗口 */</span></span><br><span class="line">    widget.show(); <span class="comment">/* 显示窗口 */</span></span><br><span class="line"></span><br><span class="line">    QPushButton button; <span class="comment">/* 创建一个按钮对象 */</span></span><br><span class="line">    button.setText(<span class="string">"Button"</span>); <span class="comment">/* 设置按钮显示的文本 */</span></span><br><span class="line">    button.setParent(&amp;widget); <span class="comment">/* 设置按钮的父窗口 */</span></span><br><span class="line">    button.show(); <span class="comment">/* 显示按钮 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec(); <span class="comment">/* exec():进入消息循环 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面的代码会创建一个窗口，窗口中包含一个按钮。在Qt中，<code>QPushButton</code>是<code>QWidget</code>的子类，所以按钮也可以看作是一个窗口。</p><p>  Qt里的窗口可以存在父子关系，上面的代码中，<code>button.setParent(&amp;widget);</code>的作用是将<code>button</code>按钮的父窗口设置成<code>widget</code>，设置后<code>button</code>按钮才会显示在<code>widget</code>窗口里面；如果不设置，<code>button</code>按钮会显示成一个独立的窗口，与<code>widget</code>窗口同级。</p><p>  一个窗口在执行<code>show()</code>成员函数时，会将已经添加的子窗口也一起显示，如果是子窗口是在父窗口执行<code>show()</code>之后添加的，则子窗口不会显示，子窗口也需要执行<code>show()</code>才能显示出来。比如，去掉上面代码中的<code>button.show()</code>之后，虽然之后将<code>button</code>按钮添加到了父窗口<code>widget</code>里，但是<code>widget</code>窗口里的<code>button</code>按钮不显示。如果在<code>widget</code>窗口执行<code>show()</code>之前，将<code>button</code>按钮添加到了父窗口<code>widget</code>里，也就是在<code>widget.show()</code>之前执行<code>button.setParent(&amp;widget)</code>，则即使<code>button</code>按钮不执行<code>show()</code>，也会在父窗口<code>widget</code>执行<code>show()</code>的时候一起显示出来。</p><h3 id="输入框-qlineedit"><a class="markdownIt-Anchor" href="#输入框-qlineedit"></a> 输入框-QLineEdit</h3><p>  下面是一个输入框的样例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt; /* 应用程序抽象类 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;      /* 窗口类 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;    /* 输入框 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCompleter&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QWidget widget; <span class="comment">/* 构造一个窗口 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加两个输入框 */</span></span><br><span class="line">    QLineEdit name_input, password_input;</span><br><span class="line">    <span class="function">QVBoxLayout <span class="title">layout</span><span class="params">(&amp;widget)</span></span>;</span><br><span class="line">    layout.addWidget(&amp;name_input);</span><br><span class="line">    layout.addWidget(&amp;password_input);</span><br><span class="line"></span><br><span class="line">    <span class="function">QCompleter <span class="title">completer</span><span class="params">(QStringList() &lt;&lt; <span class="string">"abc"</span> &lt;&lt; <span class="string">"aaa"</span> &lt;&lt; <span class="string">"123"</span>)</span></span>;</span><br><span class="line">    completer.setFilterMode(Qt::MatchContains);</span><br><span class="line">    name_input.setCompleter(&amp;completer); <span class="comment">/* 设置输入匹配提示 */</span></span><br><span class="line">    name_input.setPlaceholderText(<span class="string">"请用户名"</span>); <span class="comment">/* 设置输入提示 */</span></span><br><span class="line"></span><br><span class="line">    password_input.setEchoMode(QLineEdit::Password); <span class="comment">/* 设置回显模式为密码模式 */</span></span><br><span class="line">    password_input.setPlaceholderText(<span class="string">"请输入密码"</span>); <span class="comment">/* 设置输入提示 */</span></span><br><span class="line"></span><br><span class="line">    widget.show(); <span class="comment">/* 显示窗口 */</span></span><br><span class="line">    <span class="keyword">return</span> app.exec(); <span class="comment">/* exec():进入消息循环 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面的代码向窗口中添加了两个输入框，一个用来输入用户名，一个用来输入密码。用户名输入框设置了一个<code>completer</code>，可以将输入的字符串与<code>completer</code>的字符串列表进行匹配，显示匹配成功的字符串。密码输入框设置了设置回显模式为密码模式，可以将输入的字符显示为<code>●</code>。</p><h2 id="坐标体系"><a class="markdownIt-Anchor" href="#坐标体系"></a> 坐标体系</h2><p>  Qt里的<code>Qwidget</code>可以使用<code>setGeometry()</code>来设置控件的位置坐标，位置坐标是相对与父窗口的左上角计算的，下面是一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QWidget widget;</span><br><span class="line">QPushButton button;</span><br><span class="line">button.setText(<span class="string">"Button"</span>);</span><br><span class="line">button.setParent(&amp;widget);</span><br><span class="line"><span class="comment">/* 设置button相对父窗口的坐标ax,ay，以及button的宽度aw和高度ah */</span></span><br><span class="line">button.setGeometry(<span class="number">30</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>  上面的例子中，<code>setGeometry()</code>有4个参数，前两个参数是<code>button</code>相对父窗口的坐标ax，ay，后面两个是<code>button</code>的宽度和高度aw，ah。</p><h2 id="layout"><a class="markdownIt-Anchor" href="#layout"></a> layout</h2><p>  当一个窗口里控件很多时，使用<code>setGeometry()</code>来设置很麻烦，而且无法随着窗口的大小变化而调整。使用layout(布局)就可以很方便的解决这个问题，他们负责一组控件的几何管理。上面<a href="#%E8%BE%93%E5%85%A5%E6%A1%86-QLineEdit">输入框-QLineEdit</a>里的样例代码，使用的<code>QVBoxLayout</code>就是一种layout，可以将控件在垂直方向上排列，使得<code>name_input</code>输入框在<code>password_input</code>输入框上面，如果不使用layout，则两个输入框会重叠在一起。(以下内容大部分抄的大佬的这篇<a href="https://blog.csdn.net/leacock1991/article/details/118947828" target="_blank" rel="noopener">博客</a>)</p><h3 id="简述"><a class="markdownIt-Anchor" href="#简述"></a> 简述</h3><p>  Qt布局系统提供了一种简单而强大的方法，可以在控件内自动排列子控件，以确保它们充分利用可用空间。Qt包含一组布局管理类，用于描述控件在应用程序用户界面中的布局方式。当控件的可用空间发生变化时，这些layout会自动定位和调整控件的大小，确保它们的排列一致并且用户界面作为一个整体仍然可用。</p><p>  所有<code>QWidget</code>子类都可以使用layout来管理它们的子类。<code>QWidget::setLayout()</code>函数可以为一个控件设置layout。 当以这种方式在窗口上设置layout时，它负责以下任务：</p><ul><li>布置子控件。</li><li>最高层窗口可感知的默认大小。</li><li>最高层窗口可感知的最小大小。</li><li>调整大小的处理。</li><li>当内容改变的时候自动更新：<ul><li>字体大小、文本或者子控件的其它内容。</li><li>隐藏或者显示子控件。</li><li>移除一些子控件。</li></ul></li></ul><h3 id="常用layout"><a class="markdownIt-Anchor" href="#常用layout"></a> 常用layout</h3><p>  为控件提供良好布局的最简单方法是使用Qt内置的布局管理器：<code>QHBoxLayout</code>、<code>QVBoxLayout</code>、<code>QGridLayout</code>和<code>QFormLayout</code>。这些类从<code>QLayout</code>继承，而<code>QLayout</code>又从<code>QObject</code>（而不是<code>QWidget</code>）派生。他们负责一组控件的几何管理。要创建更复杂的布局，可以将布局管理器相互嵌套。</p><ul><li><p><code>QHBoxLayout</code>：从左到右在水平行中布置控件。</p><p><img src="/images/learn_note/qt_learn/fig_1.png" alt="" /></p></li><li><p><code>QVBoxLayout</code>：在垂直列中从上到下布置控件。</p><p><img src="/images/learn_note/qt_learn/fig_2.png" alt="" /></p></li><li><p><code>QGridLayout</code>：在二维网格中布置控件，控件可以占用多个单元格。</p><p><img src="/images/learn_note/qt_learn/fig_3.png" alt="" /></p></li><li><p><code>QFormLayout</code>：把控件按照标签-输入框的形式排列在两列。</p><p><img src="/images/learn_note/qt_learn/fig_4.png" alt="" /></p></li></ul><h3 id="为layout添加控件"><a class="markdownIt-Anchor" href="#为layout添加控件"></a> 为layout添加控件</h3><p>  将控件添加到一个layout时，布局过程如下：</p><ol><li>所有控件最初将根据它们的<code>QWidget::sizePolicy()</code>和<code>QWidget::sizeHint()</code>分配一定数量的空间。</li><li>如果任何控件设置了拉伸系数，并且其值大于零，那么它们将按其拉伸因子的比例分配空间（如下<a href="#%E4%BC%B8%E5%B1%95%E5%9B%A0%E7%B4%A0">伸展因素</a>所述）。</li><li>如果任何控件的拉伸系数设置为零，它们只会在没有其他控件需要空间的情况下获得更多空间。其中，空间首先分配给具有扩展大小策略的控件。</li><li>任何控件被分配的空间的大小如果小于它们的最小大小（如果未指定最小尺寸，则为最小尺寸提示），它们就会被按它们所需要的最小大小分配空间。（如果控件的伸展因素是它们的决定因素，它们不必有最小大小或者最小大小的提示。）</li><li>任何控件被分配的空间的大小如果大于它们的最大大小，它们就会被按它们所需要的最大大小分配空间。（如果控件的伸展因素是它们的决定因素，它们不必有最大大小。）</li></ol><h3 id="伸展因素"><a class="markdownIt-Anchor" href="#伸展因素"></a> 伸展因素</h3><p>  控件通常是在没有伸展因素设置的情况下被生成的。当它们被布置到一个layout中时，控件会被根据它们的<code>QWidget::sizePolicy()</code>或者它们的最小大小的提示中大的那一个分配给整个空间的一部分。伸展因素是用来根据控件互相的比例来改变它们所被分配的空间。</p><p>  如果使用一个<code>QHBoxLayout</code>来布置没有伸展参数设置的三个控件，则我们就会得到像下面这样的布局：</p><p><img src="/images/learn_note/qt_learn/fig_5.png" alt="" /></p><p>  如果我们给每个控件设置一个伸展因素，它们就会被按比例布置（但是不能小于最小大小的提示），以下是按1:3:2设置的：</p><p><img src="/images/learn_note/qt_learn/fig_6.png" alt="" /></p><h3 id="简单的demo"><a class="markdownIt-Anchor" href="#简单的demo"></a> 简单的demo</h3><p>  布局中常用的方法有<code>addWidget()</code>和<code>addLayout()</code>，<code>addWidget()</code>方法用于向layout中加入需要布局的控件，<code>addLayout()</code>方法用于向layout中加入子布局。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addWidget</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    QWidget *widget, <span class="comment">// 需要插入的控件对象</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> fromRow,     <span class="comment">// 插入的行</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> fromColumn,  <span class="comment">// 插入的列</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> rowSpan,     <span class="comment">// 占用的行</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> columnSpan,  <span class="comment">// 占用的列数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    Qt::Alignment alignment = Qt::Alignment <span class="comment">// 各个控件的对齐方式</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLayout</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    QLayout *layout, <span class="comment">// 需要插入的子布局对象</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> row,         <span class="comment">// 插入的起始行</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> column,      <span class="comment">// 插入的起始列</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> rowSpan,     <span class="comment">// 占用的行数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> columnSpan,  <span class="comment">// 占用的列数</span></span></span></span><br><span class="line"><span class="function"><span class="params">    Qt::Alignment alignment = Qt::Alignment <span class="comment">// 指定的对齐方式</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>  下面是一个样例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt; /* 垂直布局 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHBoxLayout&gt; /* 水平布局 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt; /* 格子布局 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QWidget widget;</span><br><span class="line"></span><br><span class="line">    QGridLayout layout;            <span class="comment">// 创建格子布局</span></span><br><span class="line">    layout.setRowStretch(<span class="number">0</span>, <span class="number">1</span>);    <span class="comment">// 设置第0行的拉伸系数</span></span><br><span class="line">    layout.setColumnStretch(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 设置第0列的拉伸系数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 向layout中添加控件 */</span></span><br><span class="line">    layout.addWidget(<span class="keyword">new</span> QLabel(<span class="string">"用户名："</span>), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    layout.addWidget(<span class="keyword">new</span> QLineEdit(), <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    layout.addWidget(<span class="keyword">new</span> QLabel(<span class="string">"密码："</span>), <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    layout.addWidget(<span class="keyword">new</span> QLineEdit(), <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 向layout中添加子布局 */</span></span><br><span class="line">    QHBoxLayout hbox;</span><br><span class="line">    hbox.addStretch(<span class="number">1</span>);  <span class="comment">// 添加伸缩量</span></span><br><span class="line">    hbox.addWidget(<span class="keyword">new</span> QPushButton(<span class="string">"登录"</span>));</span><br><span class="line">    layout.addLayout(&amp;hbox, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    layout.setRowStretch(<span class="number">4</span>, <span class="number">1</span>);    <span class="comment">// 设置最后一行的拉伸系数</span></span><br><span class="line">    layout.setColumnStretch(<span class="number">3</span>, <span class="number">1</span>); <span class="comment">// 设置最后一列的拉伸系数</span></span><br><span class="line"></span><br><span class="line">    widget.setLayout(&amp;layout); <span class="comment">// 给窗口设置layout</span></span><br><span class="line">    widget.show();</span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主窗口"><a class="markdownIt-Anchor" href="#主窗口"></a> 主窗口</h2><p>  抄了大佬的这篇<a href="https://www.cnblogs.com/happinesspills/p/16542209.html" target="_blank" rel="noopener">博客</a>。</p><p>  主窗口<code>QMainWindow</code>是一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏(tool bars)、多个浮动窗口(dock widgets)、一个状态栏(status bar)及一个中心区域(central widget)，主窗口是许多应用程序的基础，如文本编辑器，图片编辑器等。</p><p>下面是一个使用<code>QMainWindow</code>的样例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QAction&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QToolBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStatusBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDockWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QMainWindow main_win;</span><br><span class="line">    main_win.resize(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 菜单栏 */</span></span><br><span class="line">    QMenuBar *meun_bar = main_win.menuBar(); <span class="comment">/* 获取主窗口的菜单栏 */</span></span><br><span class="line">    QMenu *file_menu = meun_bar-&gt;addMenu(<span class="string">"&amp;file"</span>); <span class="comment">/* 在菜单栏里添加一个file菜单 */</span></span><br><span class="line">    QMenu *edit_menu = meun_bar-&gt;addMenu(<span class="string">"&amp;edit"</span>); <span class="comment">/* 再添加一个edit菜单 */</span></span><br><span class="line">    QAction *open_action = file_menu-&gt;addAction(<span class="string">"&amp;open"</span>); <span class="comment">/* 向file菜单里添加Action */</span></span><br><span class="line">    QAction *save_action = file_menu-&gt;addAction(<span class="string">"&amp;save"</span>);</span><br><span class="line">    file_menu-&gt;addSeparator();  <span class="comment">/* 向file菜单里添加分割线 */</span></span><br><span class="line">    QAction *exit_action = file_menu-&gt;addAction(<span class="string">"&amp;exit"</span>);</span><br><span class="line">    <span class="comment">/* 将exit Action的触发信号，连接到主窗口的关闭槽函数，实现点击exit后关闭主窗口 */</span></span><br><span class="line">    QObject::connect(exit_action, SIGNAL(triggered(<span class="keyword">bool</span>)), &amp;main_win, SLOT(close()));</span><br><span class="line">    exit_action-&gt;setToolTip(<span class="string">"close window"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 工具栏 */</span></span><br><span class="line">    QToolBar *tool_bar = main_win.addToolBar(<span class="string">"tool_bar"</span>); <span class="comment">/* 向主窗口添加工具栏 */</span></span><br><span class="line">    tool_bar-&gt;addAction(open_action); <span class="comment">/* 向工具栏中添加Action */</span></span><br><span class="line">    tool_bar-&gt;addAction(save_action);</span><br><span class="line">    tool_bar-&gt;addAction(exit_action);</span><br><span class="line">    tool_bar-&gt;setAllowedAreas(Qt::AllToolBarAreas); <span class="comment">/* 设置可停靠区域 */</span></span><br><span class="line">    tool_bar-&gt;setFloatable(<span class="literal">true</span>); <span class="comment">/* 设置是否可以浮动 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 状态栏 */</span></span><br><span class="line">    QStatusBar *status_bar = main_win.statusBar();  <span class="comment">/* 获取主窗口的状态栏 */</span></span><br><span class="line">    QLabel *status_label = <span class="keyword">new</span> QLabel(<span class="string">"main window running..."</span>);</span><br><span class="line">    status_bar-&gt;addWidget(status_label);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 浮动窗口 */</span></span><br><span class="line">    <span class="function">QDockWidget <span class="title">dock_widget</span><span class="params">(<span class="string">"浮动窗口"</span>, &amp;main_win)</span></span>; <span class="comment">/* 创建浮动窗口 */</span></span><br><span class="line">    dock_widget.setMinimumWidth(<span class="number">100</span>); <span class="comment">/* 设置最小宽度 */</span></span><br><span class="line">    <span class="comment">/* 将浮动窗口放在主窗口的左边 */</span></span><br><span class="line">    main_win.addDockWidget(Qt::LeftDockWidgetArea, &amp;dock_widget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 中心区域，别的控件占用了之后，剩下的区域都是CentralWidget */</span></span><br><span class="line">    QWidget central_widget;</span><br><span class="line">QGridLayout central_layout;</span><br><span class="line">central_layout.setRowStretch(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">central_layout.setColumnStretch(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">central_layout.addWidget(<span class="keyword">new</span> QLabel(<span class="string">"用户名："</span>), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">central_layout.addWidget(<span class="keyword">new</span> QLineEdit(), <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">central_layout.addWidget(<span class="keyword">new</span> QLabel(<span class="string">"密码："</span>), <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">central_layout.addWidget(<span class="keyword">new</span> QLineEdit(), <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">central_layout.setRowStretch(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">central_layout.setColumnStretch(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">central_widget.setLayout(&amp;central_layout);</span><br><span class="line">    main_win.setCentralWidget(&amp;central_widget); <span class="comment">/* 设置主窗口的中心区域 */</span></span><br><span class="line"></span><br><span class="line">    main_win.show();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 系统托盘图标 */</span></span><br><span class="line">    QSystemTrayIcon tray_icon;</span><br><span class="line">    tray_icon.setIcon(QIcon(<span class="string">"image/滑稽.png"</span>)); <span class="comment">/* 设置图标图片 */</span></span><br><span class="line">    tray_icon.setContextMenu(file_menu);  <span class="comment">/* 设置菜单 */</span></span><br><span class="line">    tray_icon.show();</span><br><span class="line"></span><br><span class="line">    app.exec();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图：</p><p><img src="/images/learn_note/qt_learn/fig_8.png" alt="" /></p><h3 id="菜单栏"><a class="markdownIt-Anchor" href="#菜单栏"></a> 菜单栏</h3><p>  一个主窗口最多只有一个菜单栏。通过<code>QMainWindow</code>类的<code>menuBar()</code>函数可以获取主窗口菜单栏指针，如果当前窗口没有菜单栏，该函数会自动创建一个。</p><p>  Qt 并没有专门的菜单项类，只是使用一个<code>QAction</code>类，抽象出公共的动作。当我们把<code>QAction</code>对象添加到菜单，就显示成一个菜单项，添加到工具栏，就显示成一个工具按钮。用户可以通过点击菜单项、点击工具栏按钮、点击快捷键来激活这个动作。</p><h3 id="工具栏"><a class="markdownIt-Anchor" href="#工具栏"></a> 工具栏</h3><p>  主窗口可以有多个工具栏，通常采用一个菜单对应一个工具栏的的方式，也可根据需要进行工具栏的划分。</p><p>  调用<code>QMainWindowd</code>对象的成员函数<code>addToolBar()</code>会创建一个新的工具栏，并且返回该工具栏的指针。通过<code>QToolBar</code>类的<code>addAction()</code>函数可以添加插入属于工具栏的项，工具栏上添加项也是用<code>QAction</code>。</p><p>  工具栏是一个可移动的窗口，它的可停靠区域由<code>QToolBar</code>的<code>allowAreas</code>决定，包括以下可用值：</p><ul><li><code>Qt::LeftToolBarArea</code>：停靠在左侧</li><li><code>Qt::RightToolBarArea</code>：停靠在右侧</li><li><code>Qt::TopToolBarArea</code>：停靠在顶部</li><li><code>Qt::BottomToolBarArea</code>：停靠在底部</li><li><code>Qt::AllToolBarAreas</code>：以上四个位置都可停靠</li></ul><p>使用<code>setAllowedAreas()</code>函数指定停靠区域，使用<code>setFloatable()</code>函数可以设置工具栏是否可以浮动。</p><h3 id="状态栏"><a class="markdownIt-Anchor" href="#状态栏"></a> 状态栏</h3><p>  一个<code>QMainWindow</code>的程序最多只有一个状态栏。<code>QMainWindow</code>中可以有多个的部件都使用add…名字的函数，而只有一个的部件，就直接使用获取部件的函数，如menuBar。同理状态栏也提供了一个获取状态栏的函数<code>statusBar()</code>，没有就自动创建一个并返回状态栏的指针，状态栏可以使用<code>addWidget()</code>接口来添加内容。</p><h3 id="浮动窗口"><a class="markdownIt-Anchor" href="#浮动窗口"></a> 浮动窗口</h3><p>  即<code>QDockWidget</code>，也称为铆接部件，可以有多个。主窗口可以使用<code>addDockWidget()</code>成员函数添加浮动窗口。</p><h3 id="中心区域"><a class="markdownIt-Anchor" href="#中心区域"></a> 中心区域</h3><p>  除了以上几个部件占用的区域外，剩下的区域都是中心区域，中心区域只有一个，使用<code>setCentralWidget()</code>函数设置中心区域。</p><h3 id="系统托盘图标"><a class="markdownIt-Anchor" href="#系统托盘图标"></a> 系统托盘图标</h3><p>  系统托盘图标并不是<code>QMainWindow</code>里的内容，Qt 中使用<code>QSystemTrayIcon</code>类来创建系统托盘图标，可以使用<code>QSystemTrayIcon</code>的<code>setIcon()</code>成员函数设置图标，使用<code>setContextMenu()</code>设置鼠标右键菜单。</p><h2 id="对话框"><a class="markdownIt-Anchor" href="#对话框"></a> 对话框</h2><p>  抄了大佬的这篇<a href="https://blog.csdn.net/m0_56069910/article/details/141726782" target="_blank" rel="noopener">博客</a>。</p><p>  对话框是GUI程序中不可或缺的组成部分。⼀些不适合在主窗⼝实现的功能组件可以设置在对话框中。对话框通常是⼀个顶层窗口，出现在程序最上层，⽤于实现短期任务或者简洁的用户交互。对话框主要可以分为模态对话框和⾮模态对话框。</p><p>  Qt中的对话框类为<code>QDialog</code>，是<code>QWidget</code>的子类，<code>QWidget</code>的各种属性方法，在<code>QDialog</code>也同样适用。</p><h3 id="模态对话框"><a class="markdownIt-Anchor" href="#模态对话框"></a> 模态对话框</h3><p>  模态对话框的特点是：显示后无法与父窗口进行交互，是⼀种阻塞式的对话框。在 Qt 中使用<code>QDialog::exec()</code>函数调用。模态对话框适用于必须依赖用户选择的场合，⽐如消息显示，文件选择，打印设置等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QDialog model_dialog;</span><br><span class="line">model_dialog.setWindowTitle(<span class="string">"模态对话框"</span>);</span><br><span class="line">model_dialog.exec(); <span class="comment">/* 阻塞显示对话框 */</span></span><br></pre></td></tr></table></figure><h3 id="非模态对话框"><a class="markdownIt-Anchor" href="#非模态对话框"></a> 非模态对话框</h3><p>  非模态对话框的特点是：显示后独立存在，可以同时与父窗口进行交互，是⼀种非阻塞式对话框，使用<code>QDialog::show()</code>函数调用。⾮模态对话框⼀般在堆上创建，这是因为如果创建在栈上时，当函数运行结束后，弹出的⾮模态对话框会被释放。⾮模态对话框适用于特殊功能设置的场合，⽐如查找操作，属性设置等。</p><p>  Qt 可以通过设置<code>Qt:WA_DeleteOnClose</code>属性，实现在对话框在关闭的时候被<code>delete</code>掉，避免内存泄漏。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QDialog *modaless_dialog = <span class="keyword">new</span> QDialog();</span><br><span class="line">modaless_dialog-&gt;setWindowTitle(<span class="string">"非模态对话框"</span>);</span><br><span class="line"><span class="comment">/* 关闭窗口的时候触发delete操作，防止内存泄漏 */</span></span><br><span class="line">modaless_dialog-&gt;setAttribute(Qt::WA_DeleteOnClose);</span><br><span class="line">modaless_dialog-&gt;show(); <span class="comment">/* 非阻塞显示对话框 */</span></span><br></pre></td></tr></table></figure><h3 id="qt常用的对话框"><a class="markdownIt-Anchor" href="#qt常用的对话框"></a> Qt常用的对话框</h3><p>  Qt 提供了多种可复复用的对话框类型，即Qt标准对话框。Qt标准对话框全部继承于<code>QDialog</code>类。常用标准对话框如下：</p><ul><li><code>QMessageBox</code>：消息对话框</li><li><code>QFileDialog</code>：文件对话框</li><li><code>QColorDialog</code>：颜色对话框</li><li><code>QFontDialog</code>：字体对话框</li><li><code>QInputDialog</code>：输入对话框</li></ul><h4 id="消息对话框"><a class="markdownIt-Anchor" href="#消息对话框"></a> 消息对话框</h4><p>  消息对话框主要用于为用户提示重要消息，强制用户进行选择操作。<code>QMessageBox</code>提供了多种静态方法来快速显示不同类型的消息框：</p><ul><li>information：显示一个信息消息框  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::information(<span class="literal">nullptr</span>, <span class="string">"信息消息框"</span>, <span class="string">"假装这是一条信息消息"</span>);</span><br></pre></td></tr></table></figure></li><li>warning：显示一个警告消息框  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::warning(<span class="literal">nullptr</span>, <span class="string">"警告消息框"</span>, <span class="string">"假装这是一条警告消息"</span>);</span><br></pre></td></tr></table></figure></li><li>critical：显示一个严重错误消息框  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::critical(<span class="literal">nullptr</span>, <span class="string">"错误消息框"</span>, <span class="string">"假装这是一条错误消息"</span>);</span><br></pre></td></tr></table></figure></li><li>question：显示一个问题消息框，允许用户做出选择  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ret = QMessageBox::question(<span class="literal">nullptr</span>, <span class="string">"问题消息框"</span>, <span class="string">"假装这是一个问题"</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == QMessageBox::Yes) &#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"return yes"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"return no"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件对话框"><a class="markdownIt-Anchor" href="#文件对话框"></a> 文件对话框</h4><p>  文件对话框<code>QFiledialog</code>是一个模态对话框，主要用于让用户可以浏览文件系统、并选择文件或目录。</p><ul><li>打开一个文件，返回文件的绝对路径  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QString file_path = QFileDialog::getOpenFileName();</span><br></pre></td></tr></table></figure></li><li>打开多个文件，返回文件的绝对路径列表  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QStringList file_path_list = QFileDialog::getOpenFileNames();</span><br></pre></td></tr></table></figure></li><li>打开目录，返回目录的绝对路径  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QString dir_path = QFileDialog::getExistingDirectory();</span><br></pre></td></tr></table></figure></li><li>保存文件，返回文件的绝对路径  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QString file_path = QFileDialog::getSaveFileName();</span><br></pre></td></tr></table></figure></li></ul><h4 id="颜色对话框"><a class="markdownIt-Anchor" href="#颜色对话框"></a> 颜色对话框</h4><p>  颜色对话框<code>QColorDialog</code>是一个模态对话框，用于让用户选择颜色。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QColor color = QColorDialog::getColor();</span><br></pre></td></tr></table></figure><h4 id="字体对话框"><a class="markdownIt-Anchor" href="#字体对话框"></a> 字体对话框</h4><p>  字体对话框<code>QFontDialog</code>也是一个模态对话框，用于让用户选择字体的样式、大小、粗细等属性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">QFont font = QFontDialog::getFont(&amp;flag);</span><br></pre></td></tr></table></figure><h4 id="输入对话框"><a class="markdownIt-Anchor" href="#输入对话框"></a> 输入对话框</h4><p>  输入对话框<code>QInputDialog</code>也是一个模态对话框，主要用于让用户输入文本、数字或选择列表中的一个选项。</p><ul><li>浮点数输入对话框  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> ret = QInputDialog::getDouble(<span class="literal">nullptr</span>, <span class="string">"输入对话框"</span>, <span class="string">"输入浮点数"</span>);</span><br></pre></td></tr></table></figure></li><li>整数输入对话框  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ret = QInputDialog::getInt(<span class="literal">nullptr</span>, <span class="string">"输入对话框"</span>, <span class="string">"输入整数"</span>);</span><br></pre></td></tr></table></figure></li><li>选项列表输入对话框  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QString ret = QInputDialog::getItem(<span class="literal">nullptr</span>, <span class="string">"输入对话框"</span>, <span class="string">"选择选项"</span>, </span><br><span class="line">                                    &#123;<span class="string">"选项_1"</span>, <span class="string">"选项_2"</span>, <span class="string">"选项_3"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="画板"><a class="markdownIt-Anchor" href="#画板"></a> 画板</h2><p>  抄了大佬的这篇<a href="https://zhuanlan.zhihu.com/p/638570663" target="_blank" rel="noopener">博客</a>。</p><p>  <code>QPainter</code>是 Qt 中用于进行绘图操作的类。它提供了各种绘制函数，可以在不同的绘图设备上进行绘制，如窗口、图像、打印机等。</p><p>以下是<code>QPainter</code>类的一些常用属性和方法：</p><ul><li><code>begin(QPaintDevice *device)</code>: 在给定的绘图设备上开始绘制操作。</li><li><code>end()</code>: 结束绘制操作。</li><li><code>drawText(const QRectF &amp;rectangle, const QString &amp;text)</code>: 绘制指定矩形区域内的文本。</li><li><code>drawImage(const QRectF &amp;target, const QImage &amp;image, const QRectF &amp;source)</code>: 在目标矩形区域内绘制源图像的一部分。</li><li><code>setPen(const QPen &amp;pen)</code>: 设置绘制的画笔样式。</li><li><code>setBrush(const QBrush &amp;brush)</code>: 设置绘制的画刷样式。</li><li><code>setFont(const QFont &amp;font)</code>: 设置绘制的字体样式。</li><li><code>translate(const QPointF &amp;offset)</code>: 将绘图坐标原点平移指定的偏移量。</li><li><code>scale(qreal sx, qreal sy)</code>: 沿着x轴和y轴方向对绘图进行缩放。</li><li><code>rotate(qreal angle)</code>: 以原点为中心，按照给定的角度旋转绘图。</li><li><code>save()</code>: 保存当前的绘图状态，包括画笔、画刷、字体等设置。</li><li><code>restore()</code>: 恢复上一次保存的绘图状态。</li></ul><p>  这些方法和属性只是<code>QPainter</code>类的一部分，还有其他许多功能可以用于绘制不同的图形和效果。可以根据需要在<code>QPainter</code>文档中进一步了解更多细节。</p><p>  下面是一个简单的示例，演示了如何使用<code>QPainter</code>在窗口上进行绘制：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPixmap&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_painter</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    my_painter() &#123;&#125;;</span><br><span class="line">    ~my_painter() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *e)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_painter::paintEvent</span><span class="params">(QPaintEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 消锯齿 */</span></span><br><span class="line">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class="line">    <span class="comment">/* 设置画笔，线条为红色，线宽为2，使用虚线 */</span></span><br><span class="line">    painter.setPen(QPen(Qt::red , <span class="number">2</span>, Qt::DashLine));</span><br><span class="line">    <span class="comment">/* 设置画刷，当画矩形等封闭图形时，用黄色填充 */</span></span><br><span class="line">    painter.setBrush(Qt::yellow);</span><br><span class="line">    <span class="comment">/* 设置字体，楷体，大小为40，700加粗，斜体 */</span></span><br><span class="line">    painter.setFont(QFont(<span class="string">"楷体"</span>, <span class="number">40</span>, <span class="number">700</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 画直线 */</span></span><br><span class="line">    painter.drawLine(<span class="number">20</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">40</span>);</span><br><span class="line">    <span class="comment">/* 画圆 */</span></span><br><span class="line">    painter.drawEllipse(QPoint(<span class="number">100</span>, <span class="number">120</span>), <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="comment">/* 写字 */</span></span><br><span class="line">    painter.drawText(QPoint(<span class="number">20</span>, <span class="number">240</span>), <span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 向左移动400 */</span></span><br><span class="line">    painter.translate(<span class="number">400</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/* 画图片 */</span></span><br><span class="line">    painter.drawPixmap(QPoint(<span class="number">0</span>, <span class="number">20</span>), QPixmap(<span class="string">"./image/滑稽.png"</span>));</span><br><span class="line">    <span class="comment">// /* 画矩形 */</span></span><br><span class="line">    painter.drawRect(QRect(<span class="number">0</span>, <span class="number">120</span>, <span class="number">100</span>, <span class="number">50</span>));</span><br><span class="line">    <span class="comment">// /* 画圆角矩形 */</span></span><br><span class="line">    painter.drawRoundedRect(QRect(<span class="number">0</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>), <span class="number">15</span>, <span class="number">15</span>, Qt::AbsoluteSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">my_painter widget;</span><br><span class="line">widget.show();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  在上述示例中，我们创建了一个自定义的<code>QWidget</code>派生类<code>my_painter</code>，并重写了<code>paintEvent()</code>函数。在<code>paintEvent()</code>函数中，我们创建了一个<code>QPainter</code>对象，将其关联到窗口上，并使用一些绘制函数，在窗口的矩形区域内绘制图形。最后，我们创建了一个<code>my_painter</code>对象并显示窗口，绘制的图形将在窗口中心显示。运行的结果如下：</p><p><img src="/images/learn_note/qt_learn/fig_7.png" alt="" /></p><p>  这只是一个简单的示例，你可以根据需要使用其他绘图函数和属性来绘制更复杂的图形和效果。</p><h2 id="事件"><a class="markdownIt-Anchor" href="#事件"></a> 事件</h2><p>  抄了大佬的这篇<a href="https://blog.csdn.net/qq_29912325/article/details/117767972" target="_blank" rel="noopener">博客</a></p><h3 id="事件定义"><a class="markdownIt-Anchor" href="#事件定义"></a> 事件定义</h3><p>  事件(event)是由系统或者 Qt 本身在不同的时刻发出的。当用户按下鼠标，敲下键盘，或者是窗口需要重新绘制的时候，都会发出一个相应的事件。一些事件是在对用户操作做出响应的时候发出，如键盘事件等；另一些事件则是由系统自动发出，如计时器事件。</p><h3 id="事件与信号槽"><a class="markdownIt-Anchor" href="#事件与信号槽"></a> 事件与信号槽</h3><p>  一般来说，使用 Qt 编程时，我们并不会把主要精力放在事件上，因为在 Qt 中，需要我们关心的事件总会发出一个信号。比如，我们关心的是<code>QPushButton</code>的鼠标点击，但我们不需要关心这个鼠标点击事件，而是关心它的<code>clicked()</code>信号。</p><ul><li><strong>信号槽</strong>：<code>signal</code>由具体对象发出，然后会马上交给由<code>connect</code>函数连接的<code>slot</code>进行处理。</li><li><strong>事件</strong>：Qt 使用一个事件队列对所有发出的事件进行维护，当新的事件产生时，会被追加到事件队列的尾部，前一个事件完成后，取出后面的事件进行处理。但是，必要的时候，Qt 的事件也是可以不进入事件队列，而是直接处理的。并且，事件还可以使用“事件过滤器”进行过滤。</li></ul><p>  总的来说，如果我们使用组件，我们关心的是信号槽；如果我们自定义组件，我们关心的是事件。因为我们可以通过事件来改变组件的默认操作。比如，如果我们要自定义一个<code>QPushButton</code>，那么我们就需要重写它的鼠标点击事件和键盘处理事件，并且在恰当的时候发出<code>clicked()</code>信号。</p><h3 id="事件循环"><a class="markdownIt-Anchor" href="#事件循环"></a> 事件循环</h3><p>  我们在 main 函数里面创建了一个<code>QApplication</code>对象，然后调用了它的<code>exec()</code>函数。其实，这个函数就是开始 Qt 的事件循环。在执行<code>exec()</code>函数之后，程序将进入事件循环来监听应用程序的事件。</p><h3 id="事件处理函数"><a class="markdownIt-Anchor" href="#事件处理函数"></a> 事件处理函数</h3><p>  当事件发生时，Qt 将创建一个事件对象。Qt 的所有事件都继承于<code>QEvent</code>类。在事件对象创建完毕后，Qt 将这个事件对象传递给 QObject 的<code>event()</code>函数。<code>event()</code>函数并不直接处理事件，而是按照事件对象的类型分派给特定的事件处理函数(event handler) 。</p><p>  例如在所有组件的父类 QWidget 中，定义了很多事件处理函数 ，如<code>keyPressEvent()</code>、<code>keyReleaseEvent()</code>、<code>mouseDoubleClickEvent()</code>、<code>mouseMoveEvent ()</code>、<code>mousePressEvent()</code>、<code>mouseReleaseEvent()</code>等。这些函数都是<code>protected virtual</code>的，也就是说，我们应该在子类中重写这些函数。下面是一个重写事件处理函数的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QKeyEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">event_widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">/* 事件处理主函数，主要用来截取事件 */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">event</span><span class="params">(QEvent *ev)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 鼠标按下事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line">    <span class="comment">/* 鼠标释放事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line">    <span class="comment">/* 鼠标移动事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line">    <span class="comment">/* 鼠标双击事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 键盘按下事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *ev)</span></span>;</span><br><span class="line">    <span class="comment">/* 键盘释放事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyReleaseEvent</span><span class="params">(QKeyEvent *ev)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 窗口隐藏事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideEvent</span><span class="params">(QHideEvent *ev)</span></span>;</span><br><span class="line">    <span class="comment">/* 窗口显示事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showEvent</span><span class="params">(QShowEvent *ev)</span></span>;</span><br><span class="line">    <span class="comment">/* 重绘事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *ev)</span></span>;</span><br><span class="line">    <span class="comment">/* 窗口关闭事件处理 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closeEvent</span><span class="params">(QCloseEvent *ev)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事件处理主函数，主要用于事件的分发 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">event_widget::event</span><span class="params">(QEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 默认的事件处理函数 */</span></span><br><span class="line">    <span class="keyword">return</span> QWidget::event(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标按下事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"mouse press event"</span>;</span><br><span class="line">    QWidget::mousePressEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标释放事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"mouse release event"</span>;</span><br><span class="line">    QWidget::mouseReleaseEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标移动事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 只有鼠标按下时移动，才能触发事件 */</span></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"mouse move "</span> &lt;&lt; i++;</span><br><span class="line">    <span class="comment">/* 如果要在鼠标不按下时，也触发事件，需要在构造函数中运行下面的代码 */</span></span><br><span class="line">    <span class="comment">// this-&gt;setMouseTracking(true);</span></span><br><span class="line">    QWidget::mouseMoveEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标双击事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::mouseDoubleClickEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"mouse double click event"</span>;</span><br><span class="line">    QWidget::mouseDoubleClickEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 键盘按下事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::keyPressEvent</span><span class="params">(QKeyEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"key press event "</span> &lt;&lt; ev-&gt;key();</span><br><span class="line">    QWidget::keyPressEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 键盘释放事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::keyReleaseEvent</span><span class="params">(QKeyEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"key release event "</span> &lt;&lt; ev-&gt;key();</span><br><span class="line">    QWidget::keyPressEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 窗口隐藏事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::hideEvent</span><span class="params">(QHideEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"hide event"</span>;</span><br><span class="line">    QWidget::hideEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 窗口显示事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::showEvent</span><span class="params">(QShowEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"show event"</span>;</span><br><span class="line">    QWidget::showEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重绘事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::paintEvent</span><span class="params">(QPaintEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"paint event"</span>;</span><br><span class="line">    QWidget::paintEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 窗口关闭事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::closeEvent</span><span class="params">(QCloseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"close event"</span>;</span><br><span class="line">    QWidget::closeEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    event_widget widget;</span><br><span class="line">    widget.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，我们定义了一个<code>QWidget</code>的子类<code>event_widget</code>，重写了一些事件处理函数。</p><h3 id="事件接受与忽略"><a class="markdownIt-Anchor" href="#事件接受与忽略"></a> 事件接受与忽略</h3><p>  前面的例子中我们在重写事件处理函数时，都会调用父类对应的事件处理函数。这在某种程度上说，是把事件向上传递给父类去响应，也就是说，我们在子类中“忽略”了这个事件。</p><p>  我们可以把 Qt 的事件传递看成链状：如果子类没有处理这个事件，就会继续向其他类传递。其实，Qt 的事件对象都有一个<code>accept()</code>函数和<code>ignore()</code>函数。正如它们的名字，前者用来告诉 Qt，事件处理函数“接收”了这个事件，不要再传递；后者则告诉 Qt，事件处理函数“忽略”了这个事件，需要继续传递，寻找另外的接受者。在事件处理函数中，可以使用<code>isAccepted()</code>来查询这个事件是不是已经被接收了。</p><p>  事实上，我们很少使用<code>accept()</code>和<code>ignore()</code>函数，而是像上面的示例一样，如果希望忽略事件，只要调用父类的响应函数即可。</p><p>  Qt 中的事件大部分是<code>protected</code>的，因此，重写的函数必定存在着其父类中的响应函数，这个方法是可行的。为什么要这么做呢？因为我们无法确认父类中的这个处理函数没有操作，如果我们在子类中直接忽略事件，Qt 不会再去寻找其他的接受者，那么父类的操作也就不能进行，这可能会有潜在的危险。</p><p>  在一个情形下，我们必须使用<code>accept()</code>和<code>ignore()</code>函数，那就是在窗口关闭的时候。如果在窗口关闭时需要有个询问对话框，那么就需要这么去写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 窗口关闭事件处理 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_widget::closeEvent</span><span class="params">(QCloseEvent * event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QMessageBox::StandardButton ret;</span><br><span class="line">    ret = QMessageBox::question(<span class="keyword">this</span>, <span class="string">"Quit"</span>,</span><br><span class="line">        <span class="string">"Are you sure to quit this application"</span>,</span><br><span class="line">        QMessageBox::Yes | QMessageBox::No, QMessageBox::No);</span><br><span class="line">    <span class="keyword">if</span>(ret == QMessageBox::Yes) &#123;</span><br><span class="line">        event-&gt;accept();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        event-&gt;ignore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们经过询问之后才能正常退出程序。</p><h3 id="event函数"><a class="markdownIt-Anchor" href="#event函数"></a> event()函数</h3><p>  事件对象创建完毕后，Qt 将这个事件对象传递给<code>QObject</code>的<code>event()</code>函数。<code>event()</code>函数并不直接处理事件，而是将这些事件对象按照它们不同的类型，分发给不同的事件处理器(event handler)。</p><p>  <code>event()</code>函数主要用于事件的分发，所以，如果希望在事件分发之前做一些操作，那么，就需要注意这个<code>event()</code>函数了。为了达到这种目的，我们可以重写<code>event()</code>函数。</p><p>  例如，如果希望在窗口中的 tab 键按下时将焦点移动到下一组件，而不是让具有焦点的组件处理，那么就可以继承 QWidget ，并重写它的<code>event()</code>函数，以达到这个目的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyWidget::event</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;type() == QEvent::KeyPress)</span><br><span class="line">    &#123;</span><br><span class="line">        QKeyEvent *keyEvent = <span class="keyword">static_cast</span>&lt;QKeyEvent *&gt;(event);</span><br><span class="line">        <span class="keyword">if</span> (keyEvent-&gt;key() == Qt::Key_Tab)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理 Tab 键时事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QWidget::event(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>event()</code>函数接受一个 QEvent 对象，也就是需要这个函数进行转发的对象。为了进行转发，必定需要有一系列的类型判断，这就可以调用 QEvent 的<code>type()</code>函数，其返回值是<code>QEvent::Type</code>类型的枚举。</p><p>  我们处理过自己需要的事件后，可以直接<code>return </code>回去，对于其他我们不关心的事件，需要调用父类的<code>event()</code>函数继续转发，否则这个组件就只能处理我们定义的事件了。</p><p>  <code>event()</code>函数返回值是<code>bool</code>类型，如果传入的事件已被识别并且处理，返回<code>true</code>，否则返回<code>false</code>。如果返回值是<code>true</code>，QApplication 会认为这个事件已经处理完毕，会继续处理事件队列中的下一事件；如果返回值是<code>false</code>，QApplication 会尝试寻找这个事件的下一个处理函数。</p><p>  <code>event()</code>函数的返回值和事件的<code>accept()</code>和<code>ignore()</code>函数不同。<code>accept()</code>和<code>ignore()</code>函数用于不同的事件处理器之间的沟通，例如判断这一事件是否处理；<code>event()</code>函数的返回值主要是通知 QApplication 的<code>notify()</code>函数是否处理下一事件。</p><p>为了更加明晰这一点，我们来看看 QWidget 的<code>event()</code>函数是如何定义的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QWidget::event</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e-&gt;type())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> QEvent::KeyPress:</span><br><span class="line">            keyPressEvent((QKeyEvent *)event);</span><br><span class="line">            <span class="keyword">if</span> (!((QKeyEvent *)event)-&gt;isAccepted())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> QEvent::KeyRelease:</span><br><span class="line">            keyReleaseEvent((QKeyEvent *)event);</span><br><span class="line">            <span class="keyword">if</span> (!((QKeyEvent *)event)-&gt;isAccepted())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// more...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  QWidget 的<code>event()</code>函数使用一个巨大的 switch 来判断 QEvent 的 type，并且分发给不同的事件处理函数。在事件处理函数之后，使用这个事件的<code>isAccepted()</code>方法，获知这个事件是不是被接受，如果没有被接受则<code>event()</code>函数立即返回<code>false</code>，否则返回<code>true</code>。</p><p>  另外一个必须重写<code>event()</code>函数的情形是有自定义事件的时候。如果程序中有自定义事件，则必须重写<code>event()</code>函数以便将自定义事件进行分发，否则自定义事件永远也不会被调用。</p><h3 id="事件过滤器"><a class="markdownIt-Anchor" href="#事件过滤器"></a> 事件过滤器</h3><p>  Qt 创建了 QEvent 事件对象之后，会调用 QObject 的<code>event()</code>函数做事件的分发。有时候，可能需要在调用event()函数之前做一些另外的操作，比如，对话框上某些组件可能并不需要响应回车按下的事件，此时，就需要重新定义组件的<code>event()</code>函数。如果组件很多，就需要重写很多次<code>event()</code>函数，这显然没有效率。为此，可以使用一个事件过滤器，来判断是否需要调用<code>event()</code>函数。</p><p>QOjbect 有一个<code>eventFilter()</code>函数，用于建立事件过滤器。这个函数的签名如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">QObject::eventFilter</span><span class="params">(QObject * watched, QEvent * event)</span></span></span><br></pre></td></tr></table></figure><p>如果 watched 对象安装了事件过滤器，这个函数会被调用并进行事件过滤，然后才轮到组件进行事件处理。在重写这个函数时，如果需要过滤掉某个事件，例如停止对这个事件的响应，需要返回true。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 重载消息过滤器 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">event_filter_t::eventFilter</span><span class="params">(QObject *o, QEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e-&gt;type() == QEvent::MouseButtonPress ||</span><br><span class="line">        e-&gt;type() == QEvent::MouseButtonRelease ||</span><br><span class="line">        e-&gt;type() == QEvent::MouseButtonDblClick)</span><br><span class="line">    &#123;</span><br><span class="line">QPushButton *button = <span class="keyword">static_cast</span>&lt;QPushButton *&gt;(o);</span><br><span class="line">        qDebug() &lt;&lt; button-&gt;text() &lt;&lt; <span class="string">"button mouse event"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QObject::eventFilter(o, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面的例子中为 event_filter_t 建立了一个事件过滤器。为了过滤某个组件上的事件，首先需要判断这个对象是哪个组件，然后判断这个事件的类型。</p><p>  例如，我不想让 textEdit 组件处理键盘事件，于是就首先找到这个组件，如果这个事件是键盘事件，则直接返回<code>true</code>，也就是过滤掉了这个事件。对于其他组件，我们并不保证是不是还有过滤器，于是最保险的办法是调用父类的函数。</p><p>  在创建了过滤器之后，下面要做的是安装这个过滤器。安装过滤器需要调用<code>installEventFilter()</code>函数。这个函数的签名如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QObject::installEventFilter</span><span class="params">(QObject* filterObj)</span></span></span><br></pre></td></tr></table></figure><p>  这个函数是 QObject 的一个函数，因此可以安装到任何 QObject 的子类，并不仅仅是 UI 组件。这个函数接收一个 QObject 对象，调用了这个函数安装事件过滤器的组件会调用 filterObj 定义的<code>eventFilter()</code>函数。</p><p>  例如，<code>textField.installEventFilter(obj)</code>，则如果有事件发送到 textField 组件是，会先调用<code>obj-&gt;eventFilter()</code>函数，然后才会调用<code>textField.event()</code>。</p><p>  当然，你也可以把事件过滤器安装到 QApplication 上面，这样就可以过滤所有的事件，已获得更大的控制权。不过，这样做的后果就是会降低事件分发的效率。</p><p>  如果一个组件安装了多个过滤器，则最后一个安装的会最先调用，类似于堆栈的行为。</p><p>  <strong>注意</strong>：如果你在事件过滤器中<code>delete</code>了某个接收组件，务必将返回值设为<code>true</code>。否则，Qt 还是会将事件分发给这个接收组件，从而导致程序崩溃。</p><p>  事件过滤器和被安装的组件必须在同一线程，否则，过滤器不起作用。另外，如果在 install 之后，这两个组件到了不同的线程，那么，只有等到二者重新回到同一线程的时候过滤器才会有效。</p><p>  事件的调用最终都会调用 QCoreApplication 的<code>notify()</code>函数，因此，最大的控制权实际上是重写 QCoreApplication 的<code>notify()</code>函数。由此可以看出，Qt 的事件处理实际上是分层五个层次：</p><ol><li>重定义事件处理函数</li><li>重定义 event()函数</li><li>为单个组件安装事件过滤器</li><li>为 QApplication 安装事件过滤器</li><li>重定义 QCoreApplication 的<code>notify()</code>函数</li></ol><p>这几个层次的控制权是逐层增大的。</p><h3 id="自定义事件"><a class="markdownIt-Anchor" href="#自定义事件"></a> 自定义事件</h3><p>  Qt 允许创建自己的事件类型，这在多线程的程序中尤其有用，当然，也可以用在单线程的程序中，作为一种对象间通讯的机制。那么，为什么需要使用事件，而不是使用信号槽呢？主要原因是，事件的分发既可以是同步的，又可以是异步的，而函数的调用或者说是槽的回调总是同步的。事件的另外一个好处是，它可以使用过滤器。</p><p>  Qt 中的自定义事件很简单，同其他类似的库的使用很相似，都是要继承一个类进行扩展。在 Qt 中，你需要继承的类是<code>QEvent</code>。</p><p>  继承 QEvent 类，你需要提供一个<code>QEvent::Type</code>类型的参数，作为自定义事件的类型值。这里的 QEvent::Type 类型是 QEvent 里面定义的一个 enum，因此，你是可以传递一个 int 的。重要的是，你的事件类型不能和已经存在的 type 值重复，否则会有不可预料的错误发生！因为系统会将你的事件当做系统事件进行派发和调用。</p><p>  在 Qt 中，系统将保留<code>0 - 999</code>的值，也就是说，你的事件 type 要大于999. 具体来说，你的自定义事件的 type 要在 QEvent::User 和 QEvent::MaxUser 的范围之间。其中，QEvent::User 值是1000，QEvent::MaxUser 的值是65535。从这里知道，你最多可以定义64536个事件，相信这个数字已经足够大了！</p><p>  但是，即便如此，也只能保证用户自定义事件不能覆盖系统事件，并不能保证自定义事件之间不会被覆盖。为了解决这个问题，Qt 提供了一个函数：<code>registerEventType()</code>，用于自定义事件的注册。该函数签名如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">QEvent::registerEventType</span><span class="params">(<span class="keyword">int</span> hint = <span class="number">-1</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>函数是 static 的，因此可以使用 QEvent 类直接调用。函数接受一个 int 值，其默认值为-1，返回值是创建的这个 Type 类型的值。如果 hint 是合法的，不会发生任何覆盖，则会返回这个值；如果hint不合法，系统会自动分配一个合法值并返回。因此，使用这个函数即可完成 type 值的指定。这个函数是线程安全的，因此不必另外添加同步。</p><p>  你可以在 QEvent 子类中添加自己的事件所需要的数据，然后进行事件的发送。Qt 中提供了两种发送方式：</p><p><code>static bool QCoreApplication::sendEvent(QObjecy receiver, QEvent event)</code>：事件被<br />QCoreApplication 的 notify()函数直接发送给 receiver 对象，返回值是事件处理函数的返回值。使用这个函数必须要在栈上创建事件对象，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QMouseEvent <span class="title">event</span><span class="params">(QEvent::MouseButtonPress, pos, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">QApplication::sendEvent(mainWindow, &amp;event);</span><br></pre></td></tr></table></figure><p><code>static bool QCoreApplication::postEvent(QObject receiver, QEvent event)</code>：事件被<br />QCoreApplication 追加到事件列表的最后，并等待处理，该函数将事件追加后会立即返回，并且注意，该函数是线程安全的。另外一点是，使用这个函数必须要在堆上创建对象，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QApplication::postEvent(object, <span class="keyword">new</span> MyEvent(QEvent::registerEventType(<span class="number">2048</span>)));</span><br></pre></td></tr></table></figure><p>  这个对象不需要手动 delete，Qt 会自动 delete 掉！因此，如果在 post 事件之后调用 delete，程序可能会崩溃。另外，postEvent()函数还有一个重载的版本，增加一个优先级参数，具体请参见API。通过调用 sendPostedEvent()函数可以让已提交的事件立即得到处理。</p><p>  如果要处理自定义事件，可以重写 QObject 的<code>customEvent()</code>函数，该函数接收一个 QEvent 对象作为参数，也可以像前面介绍的重写<code>event()</code>函数的方法去重写这个函数，这两种办法都是可行的。下面是一个使用自定义信号的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化自定义的事件类型值 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CUSTOM_EVENT_TYPE = QEvent::registerEventType();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义事件类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">custom_event_t</span> :</span> <span class="keyword">public</span> QEvent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">custom_event_t</span>() : QEvent((QEvent::Type)CUSTOM_EVENT_TYPE) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main_widgt_t</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">main_widgt_t</span>() : QWidget() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">event</span><span class="params">(QEvent *e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">customEvent</span><span class="params">(QEvent *e)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重载事件处理函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">main_widgt_t::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e-&gt;type() == CUSTOM_EVENT_TYPE)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"event() get custom event\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QObject::event(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重载自定义事件处理函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main_widgt_t::customEvent</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e-&gt;type() == CUSTOM_EVENT_TYPE)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"customEvent() get custom event\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"><span class="keyword">main_widgt_t</span> main_w;</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"CUSTOM_EVENT_TYPE: "</span> &lt;&lt; CUSTOM_EVENT_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="function">QPushButton <span class="title">button</span><span class="params">(<span class="string">"send custom event"</span>)</span></span>;</span><br><span class="line">button.setParent(&amp;main_w);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用lambda表达式连接button的点击事件 */</span></span><br><span class="line">QObject::connect(&amp;button, &amp;QPushButton::clicked, [&amp;main_w]()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">custom_event_t</span> custom_event;</span><br><span class="line">        <span class="comment">/* 给main_w发送自定义事件 */</span></span><br><span class="line">        QApplication::sendEvent(&amp;main_w, &amp;custom_event);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">main_w.show();</span><br><span class="line"><span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号和槽"><a class="markdownIt-Anchor" href="#信号和槽"></a> 信号和槽</h2><p>  抄了大佬的这篇<a href="https://zhuanlan.zhihu.com/p/648165514" target="_blank" rel="noopener">博客</a>。</p><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>  信号槽是QT中用于对象间通信的一种机制，也是QT的核心机制。在GUI编程中，我们经常需要在改变一个组件的同时，通知另一个组件做出响应。</p><p>  早期，对象间的通信采用回调来实现。回调实际上是利用函数指针来实现，当我们希望某件事发生时处理函数能够获得通知，就需要将回调函数的指针传递给处理函数，这样处理函数就会在合适的时候调用回调函数。回调有两个明显的缺点：</p><ul><li>它们不是类型安全的，我们无法保证处理函数传递给回调函数的参数都是正确的。</li><li>回调函数和处理函数紧密耦合，源于处理函数必须知道哪一个函数被回调。</li></ul><p>  在QT中，我们有回调技术之外的选择，也即是信号槽机制。所谓的信号与槽，其实都是函数。当特定事件被触发时将发送一个信号，而与该信号建立的连接槽，则可以接收到该信号并做出反应。</p><p>  QT组件预定义了很多信号和槽，而在GUI编程中，我们习惯于继承那些组件，继承后添加我们自己的槽，以便以我们的方式来处理信号。槽和普通的C++成员函数几乎是一样的，它可以是虚函数，可以被重载，可以是共有、私有或是保护的，也同样可以被其他成员函数调用。它的函数参数也可以是任意类型的。唯一不同的是：槽还可以和信号连接在一起。</p><p>  与回调不同，信号槽机制是类型安全的。这体现在信号的函数签名与槽的函数签名必须匹配上，才能够发生信号的传递。实际上，槽的参数个数可以比信号的参数个数少，因为槽能够忽略信号形参中多出来的参数。信号和槽是松耦合的：发出信号的类不关心哪些类将接收它的信号。QT的槽能够接收到信号的参数并调用，信号和槽都可以有任意个数的参数，它们都是类型安全的。</p><h3 id="样例分析"><a class="markdownIt-Anchor" href="#样例分析"></a> 样例分析</h3><p>  首先我们要知道的是，所有继承自<code>QObject</code>或者它的子类（如<code>QWidget</code>）都可以包含信号槽。我们写的类也要继承自<code>QObject</code>（或其子类）。所有包含了信号和槽的类都必须在声明的上部含有<code>Q_OBJECT</code>宏。</p><p>下面是一个样例，一个定义了信号的类和一个定义了槽函数的类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MY_SIGHNAL_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MY_SIGHNAL_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一个定义了信号的类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_signal</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    my_signal(<span class="keyword">int</span> id_) : QObject(), _id(id_) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">/* 信号 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signal_fun</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> num = <span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __MY_SIGHNAL_H__ */</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MY_SLOT_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MY_SLOT_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_signal.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一个定义了槽函数的类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_slot</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    my_slot(<span class="keyword">int</span> id_) : QObject(), _id(id_) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">/* 槽函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">slot_fun</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">my_signal *sign = <span class="keyword">static_cast</span>&lt;my_signal *&gt;(sender());</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"my_slot: "</span> &lt;&lt; get_id()</span><br><span class="line">                 &lt;&lt; <span class="string">" get my_sign: "</span> &lt;&lt; sign-&gt;get_id()</span><br><span class="line">                 &lt;&lt; <span class="string">" str: "</span> &lt;&lt; str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __MY_SLOT_H__ */</span></span></span><br></pre></td></tr></table></figure><p>  在这个信号类中，我们使用Qt的<code>signals</code>保留字定义了一个信号函数<code>signal_fun()</code>，<code>signal_fun()</code>的代码会由 Qt 的 moc 工具自动生成，开发人员一定不能在自己的C++代码中实现它。反之，槽应该由开发人员来实现，在槽函数里可以使用<code>sender()</code>来获取信号的发送方。需要注意的是，必须在 pro 工程文件里，使用<code>HEADERS</code>添加定义了信号或槽函数类的头文件，如果只是使用<code>INCLUDEPATH</code>添加头文件的路径，Qt 不会调用 moc 生成代码。</p><p>  可以使用<code>QObject::connect()</code>函数连接信号和槽，该函数指定了信号发送方、信号函数、信号接收方、槽函数等信息，函数的格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QObject::connect(</span><br><span class="line">    QObject* sender,      <span class="comment">/* 信号发送方 */</span></span><br><span class="line">    SIGNAL(signal_fun()), <span class="comment">/* 信号函数 */</span></span><br><span class="line">    QObject* receiver,    <span class="comment">/* 信号接收方 */</span></span><br><span class="line">    SLOT(slot_fun()));    <span class="comment">/* 槽函数 */</span></span><br></pre></td></tr></table></figure><p>  最后，我们可以使用 Qt 的<code>emit</code>关键字发送信号，下面是一个使用<code>connect()</code>和<code>emit</code>的简单样例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_signal.h"</span> <span class="comment">/* 定义了信号的类 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_slot.h"</span>   <span class="comment">/* 定义了槽函数的类 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">QCoreApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">my_signal <span class="title">sign</span><span class="params">(<span class="number">1</span>)</span></span>; <span class="comment">/* 信号发送方 */</span></span><br><span class="line">    <span class="function">my_slot <span class="title">slot</span><span class="params">(<span class="number">1</span>)</span></span>;   <span class="comment">/* 信号接收方 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接信号和槽 */</span></span><br><span class="line">    QObject::connect(&amp;sign, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                     &amp;slot, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送信号 */</span></span><br><span class="line">    emit sign.signal_fun(<span class="string">"hello word 1"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面的例子中，信号函数有两个参数，而槽函数只有一个参数，信息函数的第二个参数会被槽函数忽略。这个例子展示了对象之间通信的一种方式。对象间可以一起工作，而不需要知道彼此的任何信息。为了达到通信的目的，只需要将它们连接起来，而这只需要通过调用<code>QObject::connect()</code>函数指定一些简单信息就好。</p><h3 id="连接"><a class="markdownIt-Anchor" href="#连接"></a> 连接</h3><p>要把信号成功连接到槽，它们的参数必须具有相同的顺序和相同的类型，或者允许信号的参数比槽多，槽会自动忽略掉多出来的参数而进行调用。</p><h4 id="一个信号可以连接多个槽"><a class="markdownIt-Anchor" href="#一个信号可以连接多个槽"></a> 一个信号可以连接多个槽</h4><p>  使用<code>QObject::connect</code>可以把一个信号连接到多个槽，而当信号发射时，将按声明联系时的顺序依次调用槽。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my_signal sign;</span><br><span class="line">my_slot slot_1, slot_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 信号连接到两个槽 */</span></span><br><span class="line">QObject::connect(&amp;sign, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)), </span><br><span class="line">                 &amp;slot_1, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br><span class="line">QObject::connect(&amp;sign, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                 &amp;slot_2, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送信号 */</span></span><br><span class="line">emit sign.signal_fun(<span class="string">"hello word"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 依次调用 slot_1.slot_fun()、slot_2.slot_fun() */</span></span><br></pre></td></tr></table></figure><h4 id="多个信号可以连接同一个槽"><a class="markdownIt-Anchor" href="#多个信号可以连接同一个槽"></a> 多个信号可以连接同一个槽</h4><p>  同样的，可以让多个信号连接到同一个槽上，而且其中的任意一个信号的发送，都会调用了那个槽。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my_signal sign_1, sign_2;</span><br><span class="line">my_slot slot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 两个信号连接到同一个槽上 */</span></span><br><span class="line">QObject::connect(&amp;sign_1, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                 &amp;slot, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br><span class="line">QObject::connect(&amp;sign_2, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                 &amp;slot, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送信号，两个信号都会触发槽函数slot.slot_fun()的调用 */</span></span><br><span class="line">emit sign_1.signal_fun(<span class="string">"hello word 1"</span>, <span class="number">1</span>);</span><br><span class="line">emit sign_2.signal_fun(<span class="string">"hello word 2"</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="一个信号可以和另外一个信号相连接"><a class="markdownIt-Anchor" href="#一个信号可以和另外一个信号相连接"></a> 一个信号可以和另外一个信号相连接</h4><p>  当发送第一个信号的时候，也会把第二个信号发送出去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my_signal sign_1, sign_2;</span><br><span class="line">my_slot slot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 两个信息号相连 */</span></span><br><span class="line">QObject::connect(&amp;sign_1, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                 &amp;sign_2, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)));</span><br><span class="line"><span class="comment">/* 两个信号连接到同一个槽上 */</span></span><br><span class="line">QObject::connect(&amp;sign_1, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                 &amp;slot, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br><span class="line">QObject::connect(&amp;sign_2, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                 &amp;slot, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送信号1，信号2也会发送出去 */</span></span><br><span class="line">emit sign_1.signal_fun(<span class="string">"hello word 1"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 发送信号2，信号1不会被发送出去 */</span></span><br><span class="line">emit sign_2.signal_fun(<span class="string">"hello word 2"</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="连接可以被移除"><a class="markdownIt-Anchor" href="#连接可以被移除"></a> 连接可以被移除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 移除sign.signal_fun()与slot.slot_fun()之间的连接 */</span></span><br><span class="line">QObject::disconnect(&amp;sign, SIGNAL(signal_fun(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)),</span><br><span class="line">                    &amp;slot, SLOT(slot_fun(<span class="keyword">const</span> <span class="keyword">char</span> *)));</span><br></pre></td></tr></table></figure><p>  实际上当对象被delete时，其关联的所有连接都会失效，QT会自动移除和这个对象的所有连接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说两句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先说两句&quot;&gt;&lt;/a&gt; 先说两句&lt;/h1&gt;
&lt;p&gt;  最近偷懒了很久没有学习，对于自己的懒惰实在是看不下了，所以决定随便学点什么。但是最近没什么学习的方向，想起之前学过一点点Qt，但</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://ganyuo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="http://ganyuo.github.io/tags/Qt/"/>
    
    <category term="C++" scheme="http://ganyuo.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼树</title>
    <link href="http://ganyuo.github.io/learn_note/huffman_tree/"/>
    <id>http://ganyuo.github.io/learn_note/huffman_tree/</id>
    <published>2022-01-03T16:00:00.000Z</published>
    <updated>2025-03-06T06:48:01.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说两句"><a class="markdownIt-Anchor" href="#先说两句"></a> 先说两句</h1><p>  这篇博客大部分也是抄的，<a href="https://www.cnblogs.com/sench/p/7798064.html" target="_blank" rel="noopener">原文地址</a>。</p><h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p>  哈夫曼树，又称最优树，是一类带权路径长度最短的树。首先有几个概念需要清楚：</p><h2 id="路径和路径长度"><a class="markdownIt-Anchor" href="#路径和路径长度"></a> 路径和路径长度</h2><p>  从树中一个结点到另一个结点之间的分支构成两个结点的路径，路径上的分支数目叫做路径长度。树的路径长度是从树根到每一个结点的路径长度之和。</p><h2 id="带权路径长度"><a class="markdownIt-Anchor" href="#带权路径长度"></a> 带权路径长度</h2><p>  结点的带权路径长度为从该结点到树根之间的路径长度与结点上权的乘积。树的带权路径长度为树中所有叶子结点的带权路径长度之和，通常记作WPL。</p><p>  若有n个权值为w1,w2,…,wn的结点构成一棵有n个叶子结点的二叉树，则树的带权路径最小的二叉树叫做哈夫曼树或最优二叉树。</p><p><img src="/images/learn_note/huffman_tree/fig_1.png" alt="" /></p><p>在上图中，3棵二叉树都有4个叶子结点a、b、c、d，分别带权7、5、2、4，则它们的带权路径长度为：</p><p>（a）WPL = 7×2 + 5×2 + 2×2 + 4×2 = 36<br />（b）WPL = 4×2 + 7×3 + 5×3 + 2×1 = 46<br />（c）WPL = 7×1 + 5×2 + 2×3 + 4×3 = 35</p><p>其中©的WPL最小，可以验证，©恰为哈夫曼树。</p><h1 id="哈夫曼树的创建"><a class="markdownIt-Anchor" href="#哈夫曼树的创建"></a> 哈夫曼树的创建</h1><p>  假设有n个结点，n个结点的权值分别为w1,w2,…,wn，这n个结点可以看作n个只有一个树根结点的二叉树，构成的二叉树的集合为F={T1,T2,…,Tn}。基于F，可以构造一棵含有n个叶子结点的哈夫曼树，步骤如下：</p><ol><li>从F中选取两棵根结点权值最小的树作为左右子树构造一棵新的二叉树，其新的二叉树的权值为其左右子树根结点权值之和；</li><li>从F中删除上一步选取的两棵二叉树，将新构造的树放到F中；</li><li>重复第1步和第2步，直到F只含一棵树为止。</li></ol><p>下面是一个构建哈夫曼树的例子：</p><p><img src="/images/learn_note/huffman_tree/fig_2.png" alt="" /></p><p>  从上面的步骤可以看出，每次都需要选取F中权值最小的两个结点，原文中，大佬用了最小堆优化查找，为了让算法简单易懂（顺便偷个懒），我就直接用数组遍历查找。</p><p>  创建哈夫曼树的C语言实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_DATA_LEN 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">left_child</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">right_child</span>;</span></span><br><span class="line">&#125; tree_node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 遍历结点列表，返回权重最小结点的位置</span></span><br><span class="line"><span class="comment"> * @param nodes : [in]结点列表</span></span><br><span class="line"><span class="comment"> * @param book : [in]标记数组，标记对应结点是否已经使用过</span></span><br><span class="line"><span class="comment"> * @param node_num : [in]结点的个数</span></span><br><span class="line"><span class="comment"> * @return : 权重最小结点的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_min_weight_index</span><span class="params">(tree_node *nodes[], <span class="keyword">int</span> book[], <span class="keyword">int</span> node_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, index, min_weight;</span><br><span class="line"></span><br><span class="line">min_weight = <span class="number">0x3FFFFFFF</span>;</span><br><span class="line">index = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; node_num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[i] == <span class="number">0</span> &amp;&amp; nodes[i]-&gt;weight &lt; min_weight)</span><br><span class="line">&#123;</span><br><span class="line">index = i;</span><br><span class="line">min_weight = nodes[i]-&gt;weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 构建哈夫曼树</span></span><br><span class="line"><span class="comment"> * @param data_list : [in]数据数组</span></span><br><span class="line"><span class="comment"> * @param weight_list : [in]权重数组</span></span><br><span class="line"><span class="comment"> * @param data_len : [in]数据个数</span></span><br><span class="line"><span class="comment"> * @return : 构建好的哈夫曼树的头结点地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">tree_node *<span class="title">build_huffman_tree</span><span class="params">(<span class="keyword">char</span> data_list[], <span class="keyword">int</span> weight_list[], <span class="keyword">int</span> data_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree_node *nodes[MAX_DATA_LEN * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> book[MAX_DATA_LEN * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> i, node_num, index_1, index_2;</span><br><span class="line"></span><br><span class="line">node_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; data_len; i++)</span><br><span class="line">&#123;</span><br><span class="line">nodes[i] = (tree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tree_node));</span><br><span class="line">nodes[i]-&gt;data = data_list[i];</span><br><span class="line">nodes[i]-&gt;weight = weight_list[i];</span><br><span class="line">node_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(book, <span class="number">0</span>, <span class="keyword">sizeof</span>(book));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; data_len; i++)</span><br><span class="line">&#123;</span><br><span class="line">index_1 = find_min_weight_index(nodes, book, node_num);</span><br><span class="line">book[index_1] = <span class="number">1</span>;</span><br><span class="line">index_2 = find_min_weight_index(nodes, book, node_num);</span><br><span class="line">book[index_2] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">nodes[node_num] = (tree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tree_node));</span><br><span class="line">nodes[node_num]-&gt;data = <span class="number">-1</span>;</span><br><span class="line">nodes[node_num]-&gt;weight = nodes[index_1]-&gt;weight + nodes[index_2]-&gt;weight;</span><br><span class="line">nodes[node_num]-&gt;left_child = nodes[index_1];</span><br><span class="line">nodes[node_num]-&gt;right_child = nodes[index_2];</span><br><span class="line">node_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nodes[node_num - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, data_len = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> data_list[MAX_DATA_LEN] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> weight_list[MAX_DATA_LEN] = &#123;<span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">tree_node *root = build_huffman_tree(data_list, weight_list, data_len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈夫曼编码"><a class="markdownIt-Anchor" href="#哈夫曼编码"></a> 哈夫曼编码</h1><p>  我们约定左分支表示字符`0’，右分支表示字符’1’，在哈夫曼树中从根结点开始，到叶子结点的路径上分支字符组成的字符串为该叶子结点的哈夫曼编码。上面代码所创建的哈夫曼树如下所示：</p><p><img src="/images/learn_note/huffman_tree/fig_3.png" alt="" /></p><p>  可以看出3被编码为00，1为010，2为011,4为10,5为11。在这些编码中，任何一个字符的编码均不是另一个字符编码的前缀。</p><p>输出所有哈夫曼编码的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 输出所有哈夫曼编码</span></span><br><span class="line"><span class="comment"> * @param root : [in]树根结点地址</span></span><br><span class="line"><span class="comment"> * @param path : [in]用来记录路径</span></span><br><span class="line"><span class="comment"> * @param depth : [in]当前结点的深度</span></span><br><span class="line"><span class="comment"> * @return : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_huffman_code</span><span class="params">(tree_node *root, <span class="keyword">char</span> path[], <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(root != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;data &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c: "</span>, root-&gt;data);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; depth; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, path[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">path[depth] = <span class="number">0</span>;</span><br><span class="line">print_huffman_code(root-&gt;left_child, path, depth + <span class="number">1</span>);</span><br><span class="line">path[depth] = <span class="number">1</span>;</span><br><span class="line">print_huffman_code(root-&gt;right_child, path, depth + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说两句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先说两句&quot;&gt;&lt;/a&gt; 先说两句&lt;/h1&gt;
&lt;p&gt;  这篇博客大部分也是抄的，&lt;a href=&quot;https://www.cnblogs.com/sench/p/7798064.htm</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://ganyuo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="二叉树" scheme="http://ganyuo.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="数据结构" scheme="http://ganyuo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://ganyuo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>线索二叉树</title>
    <link href="http://ganyuo.github.io/learn_note/threaded_binary_tree/"/>
    <id>http://ganyuo.github.io/learn_note/threaded_binary_tree/</id>
    <published>2021-12-28T16:00:00.000Z</published>
    <updated>2025-03-06T06:48:01.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说两句"><a class="markdownIt-Anchor" href="#先说两句"></a> 先说两句</h1><p>  前几天考研题里，考到了线索二叉树和哈夫曼树，之前打acm的时侯没遇到过关于这两个的题目，所以就一直懒得学，考研要考，只好花点时间学一下了。本文大部分内容参考自大佬的这篇<a href="https://www.jianshu.com/p/3965a6e424f5" target="_blank" rel="noopener">博客</a>，好吧，几乎就是照抄。</p><h1 id="线索二叉树产生背景"><a class="markdownIt-Anchor" href="#线索二叉树产生背景"></a> 线索二叉树产生背景</h1><p>  现有一棵结点数目为n的二叉树，采用二叉链表的形式存储。对于每个结点均有指向左右孩子的两个指针域，而结点为n的二叉树一共有n-1条有效分支路径。那么，则二叉链表中存在2n-(n-1)=n+1个空指针域。那么，这些空指针造成了空间浪费。</p><p>  例如：图1所示一棵二叉树一共有10个结点，空指针^有11个。</p><p><img src="/images/learn_note/threaded_binary_tree/fig_1.png" alt="图1" /></p><p>  此外，当对二叉树进行中序遍历时可以得到二叉树的中序序列。例如：图1所示二叉树的中序遍历结果为HDIBJEAFCG，可以得知A的前驱结点为E，后继结点为F。但是，这种关系的获得是建立在完成遍历后得到的，那么可不可以在建立二叉树时就记录下前驱后继的关系呢，那么在后续寻找前驱结点和后继结点时将大大提升效率。</p><h1 id="线索化"><a class="markdownIt-Anchor" href="#线索化"></a> 线索化</h1><p>  现将某结点的空指针域指向该结点的前驱后继，定义规则如下：</p><blockquote><p>若结点的左子树为空，则该结点的左孩子指针指向其前驱结点。<br />若结点的右子树为空，则该结点的右孩子指针指向其后继结点。</p></blockquote><p>  这种指向前驱和后继的指针称为线索。将一棵普通二叉树以某种次序遍历，并添加线索的过程称为线索化。<br />  按照规则将图1所示二叉树线索化后如图2所示：</p><p><img src="/images/learn_note/threaded_binary_tree/fig_2.png" alt="图2" /></p><p>  图中黑色点画线为指向后继的线索，紫色虚线为指向前驱的线索。<br />  可以看出通过线索化，既解决了空间浪费问题，又解决了前驱后继的记录问题。</p><h1 id="线索化带来新问题"><a class="markdownIt-Anchor" href="#线索化带来新问题"></a> 线索化带来新问题</h1><p>  经过第3节的讲解后，可以将一棵二叉树线索化为一棵线索二叉树，那么新的问题产生了。我们如何区分一个结点的lchild指针是指向左孩子还是前驱结点呢？例如：对于图2所示的结点E，如何区分其lchild的指向的结点J是其左孩子还是前驱结点呢？<br />  为了解决这一问题，现需要添加标志位ltag，rtag。并定义规则如下：</p><blockquote><p>ltag为0时，指向左孩子，为1时指向前驱<br />rtag为0时，指向右孩子，为1时指向后继</p></blockquote><p>  添加ltag和rtag属性后的结点结构如下：</p><p><img src="/images/learn_note/threaded_binary_tree/fig_3.png" alt="图3" /></p><p>图2所示线索二叉树转变为下图4所示的二叉树:</p><p><img src="/images/learn_note/threaded_binary_tree/fig_4.png" alt="图4" /></p><h1 id="线索二叉树结点数据结构"><a class="markdownIt-Anchor" href="#线索二叉树结点数据结构"></a> 线索二叉树结点数据结构</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> pointer_flag</span><br><span class="line">&#123;</span><br><span class="line">POINTER_NODE,</span><br><span class="line">POINTER_THREAD</span><br><span class="line">&#125; pointer_flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">left_child</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">right_child</span>;</span></span><br><span class="line">pointer_flag left_flag, right_flag;</span><br><span class="line">&#125; tree_node;</span><br></pre></td></tr></table></figure><h1 id="中序线索二叉树"><a class="markdownIt-Anchor" href="#中序线索二叉树"></a> 中序线索二叉树</h1><h2 id="建立"><a class="markdownIt-Anchor" href="#建立"></a> 建立</h2><p>  二叉树中序遍历的方法可以参考大佬的这篇<a href="https://www.jianshu.com/p/bf73c8d50dc2" target="_blank" rel="noopener">博客</a>，实现线索化的过程就是在中序遍历同时修改结点空指针的指向。</p><h2 id="加上头结点"><a class="markdownIt-Anchor" href="#加上头结点"></a> 加上头结点</h2><p>  加上线索的二叉树结构是一个双向链表结构，为了便于遍历线索二叉树，我们为其添加一个头结点，头结点左孩子指向原二叉树的根结点，右孩子指针指向中序遍历的最后一个结点。同时，将第一个结点左孩子指针指向头结点，最后一个结点的右孩子指针指向头结点。</p><p>  图4所示线索二叉树添加头结点后如图5所示：</p><p><img src="/images/learn_note/threaded_binary_tree/fig_5.png" alt="图5" /></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>  采用中序遍历的访问顺序实现一棵二叉树的线索化过程代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mid_order_traverse_build_tree</span><span class="params">(tree_node *root, tree_node **pre_node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">mid_order_traverse_build_tree(root-&gt;left_child, pre_node);</span><br><span class="line"><span class="keyword">if</span>(root-&gt;left_child == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">root-&gt;left_child = *pre_node;</span><br><span class="line">root-&gt;left_flag = POINTER_THREAD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">root-&gt;left_flag = POINTER_NODE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((*pre_node)-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*pre_node)-&gt;right_child = root;</span><br><span class="line">(*pre_node)-&gt;right_flag = POINTER_THREAD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">(*pre_node)-&gt;right_flag = POINTER_NODE;</span><br><span class="line">&#125;</span><br><span class="line">*pre_node = root;</span><br><span class="line">mid_order_traverse_build_tree(root-&gt;right_child, pre_node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">tree_node* <span class="title">build_thread_binary_tree</span><span class="params">(tree_node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree_node *head_node = (tree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tree_node));</span><br><span class="line">tree_node *pre_node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(root != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head_node-&gt;left_child = root;</span><br><span class="line">pre_node = head_node;</span><br><span class="line">mid_order_traverse_build_tree(head_node-&gt;left_child, &amp;pre_node);</span><br><span class="line">head_node-&gt;right_child = pre_node;</span><br><span class="line">head_node-&gt;right_flag = POINTER_THREAD;</span><br><span class="line">pre_node-&gt;right_child = head_node;</span><br><span class="line">pre_node-&gt;right_flag = POINTER_THREAD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">head_node-&gt;left_child = head_node;</span><br><span class="line">head_node-&gt;right_child = head_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h2><p>  带有头结点的中序线索二叉树遍历代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_thread_binary_tree</span><span class="params">(tree_node *head_node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree_node *p = head_node-&gt;left_child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p != head_node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;left_flag == POINTER_NODE)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;left_child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, p-&gt;data);</span><br><span class="line"><span class="keyword">while</span>(p-&gt;right_flag == POINTER_THREAD &amp;&amp; p-&gt;right_child != head_node)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;right_child;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;right_child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="先序线索二叉树"><a class="markdownIt-Anchor" href="#先序线索二叉树"></a> 先序线索二叉树</h1><p>  先序线索二叉树在建立时，除了建立的顺序不一样，其他和中序的一样，这里，我就偷个懒，只贴个代码参考。</p><p>先序线索二叉树的建立：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order_traverse_build_tree</span><span class="params">(tree_node *root, tree_node **pre_node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;left_child == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">root-&gt;left_child = *pre_node;</span><br><span class="line">root-&gt;left_flag = POINTER_THREAD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">root-&gt;left_flag = POINTER_NODE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((*pre_node)-&gt;right_child == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*pre_node)-&gt;right_child = root;</span><br><span class="line">(*pre_node)-&gt;right_flag = POINTER_THREAD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">(*pre_node)-&gt;right_flag = POINTER_NODE;</span><br><span class="line">&#125;</span><br><span class="line">*pre_node = root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(root-&gt;left_flag == POINTER_NODE)</span><br><span class="line">&#123;</span><br><span class="line">pre_order_traverse_build_tree(root-&gt;left_child, pre_node);</span><br><span class="line">&#125;</span><br><span class="line">pre_order_traverse_build_tree(root-&gt;right_child, pre_node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">tree_node* <span class="title">build_thread_binary_tree</span><span class="params">(tree_node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree_node *head_node = (tree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tree_node));</span><br><span class="line">tree_node *pre_node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(root != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head_node-&gt;left_child = root;</span><br><span class="line">pre_node = head_node;</span><br><span class="line">pre_order_traverse_build_tree(head_node-&gt;left_child, &amp;pre_node);</span><br><span class="line">head_node-&gt;right_child = pre_node;</span><br><span class="line">head_node-&gt;right_flag = POINTER_THREAD;</span><br><span class="line">pre_node-&gt;right_child = head_node;</span><br><span class="line">pre_node-&gt;right_flag = POINTER_THREAD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">head_node-&gt;left_child = head_node;</span><br><span class="line">head_node-&gt;right_child = head_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序线索二叉树的遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_thread_binary_tree</span><span class="params">(tree_node *head_node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree_node *p = head_node-&gt;left_child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p != head_node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;left_flag == POINTER_NODE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;left_child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;right_child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后序线索二叉树"><a class="markdownIt-Anchor" href="#后序线索二叉树"></a> 后序线索二叉树</h1><p>  后序线索二叉树是不完善的，要对它进行遍历，还需要使用栈来辅助，这里就不讲了。</p><h1 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h1><p>  线索二叉树充分利用了指针空间，同时又便于寻找结点的前驱结点和后继结点。线索二叉树适用于经常需要遍历寻找结点前驱或者后继结点的二叉树。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说两句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先说两句&quot;&gt;&lt;/a&gt; 先说两句&lt;/h1&gt;
&lt;p&gt;  前几天考研题里，考到了线索二叉树和哈夫曼树，之前打acm的时侯没遇到过关于这两个的题目，所以就一直懒得学，考研要考，只好花点时间</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://ganyuo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="二叉树" scheme="http://ganyuo.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="数据结构" scheme="http://ganyuo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://ganyuo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>做了一个点阵屏</title>
    <link href="http://ganyuo.github.io/other/lattice_screen/"/>
    <id>http://ganyuo.github.io/other/lattice_screen/</id>
    <published>2021-07-15T16:00:00.000Z</published>
    <updated>2025-03-06T06:48:01.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说两句"><a class="markdownIt-Anchor" href="#先说两句"></a> 先说两句</h1><p>  ~~最近上班摸鱼太无聊了，~~因为和某人约定好了要送一个礼物，又因为最近做嵌入式的原因，有点手痒，想自己做个东西玩玩，所以打算开始做个点阵屏。然后前阵子学了一下kicad，打算拿这个练手，算是我第一次画电路板。感觉和大佬比起来，我这就像过家家一样🙃。</p><h1 id="max7219芯片"><a class="markdownIt-Anchor" href="#max7219芯片"></a> MAX7219芯片</h1><p>  因为没学过硬件，画电路板没一点头绪，所以就花了5块钱从淘宝上买了一个8×8的点阵屏，打算<s>抄</s>参考一下，买来以后是这样的：</p><p><img src="/images/other/lattice_screen/max7219_module.jpeg" alt="" /></p><p>  感觉比我想像的要简单一点，就一个芯片、一个点阵屏、一个电容和一个电阻。去找商家要了一下资料（<a href="/documnets/other/lattice_screen/MAX7219%E7%82%B9%E9%98%B5%E6%A8%A1%E5%9D%97%E8%B5%84%E6%96%99.rar">下载链接</a>），后来才知道这个芯片叫MAX7219。扫了一眼MAX7219的芯片手册，没怎么看懂🙃，结合资料里的样例代码才勉强看懂了一点点。</p><h2 id="硬件方面"><a class="markdownIt-Anchor" href="#硬件方面"></a> 硬件方面</h2><p>  MAX7219一共有24个引脚，各个引脚的功能如下表：</p><table><thead><tr><th style="text-align:left">管脚</th><th style="text-align:left">名称</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">DIN</td><td style="text-align:left">串行数据输入端口。在时钟上升沿时数据被载入内部的16位寄存器。</td></tr><tr><td style="text-align:left">2,3,5-8,10,11</td><td style="text-align:left">DIG0–DIG7</td><td style="text-align:left">八个数据驱动线路置显示器共阴极为低电平。关闭时此管脚输出高电平。</td></tr><tr><td style="text-align:left">4,9</td><td style="text-align:left">GND</td><td style="text-align:left">地线(4 脚和 9 脚必须同时接地)</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">LOAD</td><td style="text-align:left">载入数据。连续数据的后16位在LOAD端的上升沿时被锁定。</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">CLK</td><td style="text-align:left">时钟序列输入端。最大速率为10MHz.在时钟的上升沿,数据移入内部移位寄存器。下降沿时,数据从DOUT端输出。</td></tr><tr><td style="text-align:left">14-17,20-23</td><td style="text-align:left">SEGA-SEGG,DP</td><td style="text-align:left">7段和小数点驱动,为显示器提供电流。当一个段驱动关闭时,此端呈低电平</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">SET</td><td style="text-align:left">通过一个电阻连接到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mrow><mi>D</mi><mi>D</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{DD}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 来提高段电流。</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mo lspace="0em" rspace="0em">+</mo></msub></mrow><annotation encoding="application/x-tex">V_{+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left">正极电压输入，+5V（好像3.3V）也可以</td></tr><tr><td style="text-align:left">24</td><td style="text-align:left">DOUT</td><td style="text-align:left">串行数据输出端口,从DIN输入的数据在16.5个时钟周期后在此端有效。当使用多个MAX7219时用此端方便扩展。</td></tr></tbody></table><p>  然后8×8的点阵屏模块MAX7219部分的原理图是这样的：</p><p><img src="/images/other/lattice_screen/max7219_design.png" alt="" /></p><p>  按照原理图，MAX7219的DIG0–DIG7接点阵屏的共阴极，SEGA-SEGG和DP接点阵屏的共阳极，DIN、CLK、LOAD接到MCU的IO口上，用来与MCU通信，DOUT接到下一个MAX7219的DIN上，用来实现多个级联。<br />然后其他引脚按照电路图接对应的元件和电源就好了。</p><h2 id="软件方面"><a class="markdownIt-Anchor" href="#软件方面"></a> 软件方面</h2><p>  控制MAX7219的方式是写寄存器，MAX7219一共有14个8位的可寻址的数据寄存器和控制寄存器，MCU通过给这些寄存器写数据来控制MAX7219的工作。</p><h3 id="写移位寄存器"><a class="markdownIt-Anchor" href="#写移位寄存器"></a> 写移位寄存器</h3><p>  刚刚说到，MAX7219有3个引脚（DIN、CLK、LOAD）是接到MCU的IO口上的，写寄存器就是通过这3个引脚来完成的。在MAX7219里有一个16位的移位寄存器，当CLK引脚出现一个上升沿的电压信号后，MAX7219就会将DIN端的信号移入移位寄存器里，作为移位寄存器的最后一位。<br />  举个栗子，下图中在CLK的第1个上升沿，MCU给了DIN一个高电平，所以MAX7219的移位寄存器移入了一个1，然后在CLK的第2个上升沿，MCU给了DIN一个低电平，所以MAX7219的移位寄存器移入了一个0。最终的效果就是移位寄存器里原来的数据向前移动了两位，后两位数据变成了移入的1和0。</p><p><img src="/images/other/lattice_screen/max7219_write_regitist.png" alt="" /></p><p>  按照上面说的方法，连续写16位数据，就可以把移位寄存器写成我们想要的数据了。</p><h3 id="写内部寄存器"><a class="markdownIt-Anchor" href="#写内部寄存器"></a> 写内部寄存器</h3><p>  数据写入移位寄存器之后，就可以利用移位寄存器的数据来更改MAX7219的14个数据寄存器和控制寄存器（以下简称为内部寄存器）了。<br />  移位寄存器的数据可以分成两个部分，一部分是用来表示内部寄存器的地址，占4位，位于第8到第11位，一部分是用来表示寄存器的数据，位于第0到第7位，如下图所示：</p><p><img src="/images/other/lattice_screen/max7219_regitist_struct.png" alt="" /></p><p>  当MCU给LOAD引脚一个上升沿信号时，MAX7219就根据移位寄存器中的4个地址位，选择对应的内部寄存器，然后把移位寄存器里的8个数据位写入该寄存器中。<br />  结合之前的写移位寄存器的方法，就可以实现将数据据写入对应的内部寄存器中了。这里给出一个用来写内部寄存器的参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 向MAX7219的移位寄存器写入一个字节的数据</span></span><br><span class="line"><span class="comment"> * @param data : [in]需要写入的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_max7219_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">write_max7219_pin(CLK_PIN, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(data &amp; <span class="number">0x80</span>)</span><br><span class="line">&#123;</span><br><span class="line">write_max7219_pin(DIN_PIN, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">write_max7219_pin(DIN_PIN, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">write_max7219_pin(CLK_PIN, <span class="number">1</span>);</span><br><span class="line">data = data &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 向MAX7219的内部寄存器写入数据</span></span><br><span class="line"><span class="comment"> * @param load_pin : [in]对应MAX7219的LOAD引脚</span></span><br><span class="line"><span class="comment"> * @param address : [in]内部寄存器地址</span></span><br><span class="line"><span class="comment"> * @param data : [in]需要写入内部寄存器的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_max7219_register</span><span class="params">(max7219_pin_def load_pin, <span class="keyword">unsigned</span> <span class="keyword">char</span> address, <span class="keyword">unsigned</span> <span class="keyword">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">write_max7219_pin(load_pin, <span class="number">0</span>);</span><br><span class="line">write_max7219_byte(address);</span><br><span class="line">write_max7219_byte(data);</span><br><span class="line">write_max7219_pin(load_pin, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部寄存器"><a class="markdownIt-Anchor" href="#内部寄存器"></a> 内部寄存器</h3><p>  刚刚已经介绍了如何写内部寄存器，接下来就是如何用这14个内部寄存器控制MAX7219工作。这些寄存器分两类，一类是控制寄存器，共5个，分别用来设置编码模式、显示亮度、扫描限制、掉电模式以及显示检测，另一类是数据寄存器，用来设置显示的数据。</p><table><thead><tr><th style="text-align:center">地址</th><th style="text-align:center">寄存器</th></tr></thead><tbody><tr><td style="text-align:center">0x00</td><td style="text-align:center">不工作寄存器</td></tr><tr><td style="text-align:center">0x01-0x08</td><td style="text-align:center">8个数据寄存器</td></tr><tr><td style="text-align:center">0x09</td><td style="text-align:center">译码模式寄存器</td></tr><tr><td style="text-align:center">0x0A</td><td style="text-align:center">亮度控制寄存器</td></tr><tr><td style="text-align:center">0x0B</td><td style="text-align:center">扫描控制寄存器</td></tr><tr><td style="text-align:center">0x0C</td><td style="text-align:center">掉电模式寄存器</td></tr><tr><td style="text-align:center">0x0F</td><td style="text-align:center">显示检测寄存器</td></tr></tbody></table><p>  数据寄存器很好理解，共8个，对应8个段选，每个8位，每一位对应SEGA～SEGG和SEGDP八个引脚的输出电平。MAX7219工作时，DIG0～7八个引脚会按顺序输出低电平，同时根据数据寄存器中的值，给SEG八个引脚输出对应的电平。比如，当前DIG引脚输出低电平时，其他DIG引脚都输出高电平，MAX7219就按照第2个数据寄存器（地址是0x03）中的值，给SEG引脚输出对应的电平，下一次就轮到给DIG3引脚输出低电平，按照第3个数据寄存器中的值，给SEG引脚输出对应的电平，如此循环八个引脚。<br />  控制寄存器我没怎么细看，打算直接按照参考的驱动代码设置，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 初始化MAX7219</span></span><br><span class="line"><span class="comment"> * @param load_pin : [in]对应MAX7219的LOAD引脚</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_max7219</span><span class="params">(max7219_pin_def load_pin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">write_max7219_register(load_pin, <span class="number">0x09</span>, <span class="number">0x00</span>); <span class="comment">/* 译码方式 */</span></span><br><span class="line">write_max7219_register(load_pin, <span class="number">0x0a</span>, <span class="number">0x03</span>); <span class="comment">/* 亮度 */</span></span><br><span class="line">write_max7219_register(load_pin, <span class="number">0x0b</span>, <span class="number">0x07</span>); <span class="comment">/* 扫描界限；8个数码管显示 */</span></span><br><span class="line">write_max7219_register(load_pin, <span class="number">0x0c</span>, <span class="number">0x01</span>); <span class="comment">/* 掉电模式：0，普通模式：1 */</span></span><br><span class="line">write_max7219_register(load_pin, <span class="number">0x0f</span>, <span class="number">0x00</span>); <span class="comment">/* 显示测试：1；测试结束，正常显示：0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  按照上面的代码初始化好后，将要显示的内容写入数据寄存器就好了。比如要显示一个字母’A’的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 让点阵屏显示一个A</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">/* 字母A的点阵数据，1的位置是点阵屏上要亮的位置 */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">8</span>] = &#123;<span class="number">0x08</span>, <span class="number">0x14</span>, <span class="number">0x22</span>, <span class="number">0x3E</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>&#125;;</span><br><span class="line"><span class="comment">/*16进制         二进制</span></span><br><span class="line"><span class="comment"> 0x08 ---&gt; 0 0 0 0 1 0 0 0</span></span><br><span class="line"><span class="comment"> 0x14 ---&gt; 0 0 0 1 0 1 0 0</span></span><br><span class="line"><span class="comment"> 0x22 ---&gt; 0 0 1 0 0 0 1 0</span></span><br><span class="line"><span class="comment"> 0x3E ---&gt; 0 0 1 1 1 1 1 0</span></span><br><span class="line"><span class="comment"> 0x22 ---&gt; 0 0 1 0 0 0 1 0</span></span><br><span class="line"><span class="comment"> 0x22 ---&gt; 0 0 1 0 0 0 1 0</span></span><br><span class="line"><span class="comment"> 0x22 ---&gt; 0 0 1 0 0 0 1 0</span></span><br><span class="line"><span class="comment"> 0x22 ---&gt; 0 0 1 0 0 0 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">init_max7219(CS1_PIN);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">write_max7219_register(CS1_PIN, (<span class="keyword">unsigned</span> <span class="keyword">char</span>)i, data[i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="点阵屏"><a class="markdownIt-Anchor" href="#点阵屏"></a> 点阵屏</h1><p>  点阵屏比较容易理解，就是一些led灯组成的点阵。分为共阴极和共阳极两种，共阴极点阵屏的同一行led阴极是连在一起的，同一列的阳极连在一起，而共阳极点阵屏同一行led的阳极是连在一起的，同一列的阴极连在一起。原理图如下（左边是共阳，右边是共阴）：</p><p><img src="/images/other/lattice_screen/screen.png" alt="" /></p><p>  从点阵屏的正面看，四个边中有个一个边有突起，将那个边向下，这时点阵的行和列就和上图对应了。上图中圆圈里的编号是引脚编号，点阵屏一共有16个引脚，分成两行，按刚刚的方法放好，上面一排的引脚编号从左往右是16、15、…、9，下面一排的引脚编号从左往右是1、2、…、8。</p><h1 id="硬件设计"><a class="markdownIt-Anchor" href="#硬件设计"></a> 硬件设计</h1><h2 id="原理图设计"><a class="markdownIt-Anchor" href="#原理图设计"></a> 原理图设计</h2><p>  看懂了MAX7219和点阵屏的工作原理后，就可以用kicad开始设计电路了。kicad是一个开源的PCB设计软件，用起来感觉不错，而且有中文文档教程，还跨平台，对于我这个新手来说相当友好，想了解的小伙伴可以去<a href="https://www.kicad.org" target="_blank" rel="noopener">kicad的官网</a>看看。</p><p>  kicad的元件库里有MAX7219，可以直接拿来用，但是没有点阵屏，所以要自己加一个点阵屏元件，下图是我自己加的1088AS元件和封装：</p><p><img src="/images/other/lattice_screen/1088AS.png" alt="" /></p><p>  接下来就是设计原理图了，MAX7219部分可以参考资料里的原理图来设计，要做成16×16的点阵的话，需要4个8×8点阵拼接起来，原理图就是下面这样的。</p><p><img src="/images/other/lattice_screen/schematic_diagram_1.png" alt="" /></p><p>  MCU本来打算用STM32F103C8T6的，在淘宝上看了一下，发现最近因为芯片缺货的问题，C8T6涨到了30块钱一片😓…，不过C6T6价格还可以接受，6块一片，而且C6T6的引脚和C8T6的完全一样，用来替代C8T6刚刚好。去网上找了一个STM32F103C8T6最小系统板的资料，参考原理图改了一下，如下：</p><p><img src="/images/other/lattice_screen/schematic_diagram_2.png" alt="" /></p><p>  完整的pdf原理图可以在<a href="/documnets/other/lattice_screen/schematic_diagram.pdf">这里</a>查看。</p><h2 id="电路设计"><a class="markdownIt-Anchor" href="#电路设计"></a> 电路设计</h2><p>  设计好原理图后开始设计电路。<br />  首先选择封装，所有的电阻和电容都选择0603贴片，两个LED灯用了0805，USB插座想用type-c的，本来想用6PIN的，在kicad里没找到6PIN的封装，干脆就用16PIN的了，都差不多。其他的按照元件的尺寸随便选了一些。<br />  接下来就是让人头大的布线了，唔…，第一次布线，感觉比想像中要难一些，改了很久才搞定，特别是MCU附近的线比较难走线。布好线后是这样的：</p><p><img src="/images/other/lattice_screen/circuit_design.png" alt="" /></p><p>  kicad里有个3D查看器，可以模拟成品的样子，大概是这个样子的：</p><p><img src="/images/other/lattice_screen/3d_view.png" alt="" /></p><p>  左边是正面，右边是背面，因为点阵屏的封装里没有3D模型，所以这个渲染出来就没有点阵屏。</p><h2 id="制作"><a class="markdownIt-Anchor" href="#制作"></a> 制作</h2><p>  布好线后，在淘宝上找了个PCB打样的，发现22块钱能打10块板子，感觉还算比较便宜。打样好是这个样子的：</p><p><img src="/images/other/lattice_screen/empty_baord.jpeg" alt="" /></p><p>  然后把需要的元件都买到后，开始焊板子，感觉比想像中要难焊一点，特别是焊MCU的时候，锡容易把两个引脚粘在一起，用了助焊剂后好了很多。焊好后是这样的：</p><p><img src="/images/other/lattice_screen/baord_ok.jpeg" alt="" /></p><p>  焊的有点丑，有些电容和电阻歪了。接下来把点阵屏插上去应该就能用了。</p><h1 id="写代码"><a class="markdownIt-Anchor" href="#写代码"></a> 写代码</h1><h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2><p>  用STM32CubeMX生成了一个工程（不清楚的小伙伴可以参考这篇<a href="/learn_note/linux_arm_config/">博客</a>），按照电路的连接，配置对应引脚为GPIO上拉输出模式。</p><p><img src="/images/other/lattice_screen/MCU_config.png" alt="" /></p><p>  接下来生成工程代码，make以后尝试烧录，烧录失败了…。openocd报了下面这个错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; program build&#x2F;lattice_screen.hex                                                </span><br><span class="line">target halted due to debug-request, current mode: Thread </span><br><span class="line">xPSR: 0x01000000 pc: 0x08001038 msp: 0x20002800</span><br><span class="line">** Programming Started **</span><br><span class="line">device id &#x3D; 0x10006412</span><br><span class="line">SWD DPIDR 0x1ba01477</span><br><span class="line">Failed to read memory at 0x1ffff7e2</span><br><span class="line">STM32 flash size failed, probe inaccurate - assuming 32k flash</span><br><span class="line">flash size &#x3D; 32kbytes</span><br><span class="line">stm32x device protected</span><br><span class="line">failed erasing sectors 0 to 4</span><br><span class="line">embedded:startup.tcl:530: Error: ** Programming Failed **</span><br><span class="line">in procedure &#39;program&#39; </span><br><span class="line">in procedure &#39;program_error&#39; called at file &quot;embedded:startup.tcl&quot;, line 595</span><br><span class="line">at file &quot;embedded:startup.tcl&quot;, line 530</span><br></pre></td></tr></table></figure><p>  一开始还以为是芯片某个引脚没焊好，然后检查一下电路，发现没问题。百度了一下，网上说是因为芯片flash上了锁，要解锁才能烧录，参考了一下大佬的这篇<a href="https://www.brobwind.com/archives/1139" target="_blank" rel="noopener">博客</a>，用openocd执行下面的解锁命令后，就可以烧录了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; reset halt</span><br><span class="line">target halted due to debug-request, current mode: Thread </span><br><span class="line">xPSR: 0x01000000 pc: 0x08001038 msp: 0x20002800</span><br><span class="line">&gt; stm32f1x unlock 0</span><br><span class="line">stm32x unlocked.</span><br><span class="line">INFO: a reset or power cycle is required for the new settings to take effect.</span><br><span class="line"></span><br><span class="line">&gt; reset halt</span><br><span class="line">target halted due to debug-request, current mode: Thread </span><br><span class="line">xPSR: 0x01000000 pc: 0xfffffffe msp: 0xfffffffc</span><br></pre></td></tr></table></figure><h2 id="汉字编码生成"><a class="markdownIt-Anchor" href="#汉字编码生成"></a> 汉字编码生成</h2><p>  要显示一个汉字，需要有对应的汉字编码，自己设计比较麻烦，在网上找了一个大佬写的生成16×16汉字点阵的<a href="https://blog.twofei.com/embedded/hzk.html" target="_blank" rel="noopener">代码</a>。大致的原理是用汉字的GB2312编码，在HZK16字库中，索引到对应的编码，然后打印出来。</p><h2 id="显示逻辑"><a class="markdownIt-Anchor" href="#显示逻辑"></a> 显示逻辑</h2><p>  前面说了8×8点阵屏的显示逻辑，现在是16×16的，也就是4个8×8拼在一起，所以只要让每个8×8显示对应的内容就好了，显示一个汉字的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 让16*16点阵屏显示一个字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_word</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *word_code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">write_max7219_register(CS4_PIN, (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(i / <span class="number">2</span> + <span class="number">1</span>), word_code[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">write_max7219_register(CS2_PIN, (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(i / <span class="number">2</span> + <span class="number">1</span>), word_code[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">16</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">write_max7219_register(CS3_PIN, (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(i / <span class="number">2</span> - <span class="number">8</span> + <span class="number">1</span>), word_code[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">write_max7219_register(CS1_PIN, (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(i / <span class="number">2</span> - <span class="number">8</span> + <span class="number">1</span>), word_code[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  接下来实现一个字符串的循环移动显示，其实也很简单，只要在一定的延时后，把汉字编码按照一定的逻辑，循环移动一位，然后再把开头显示出来就好了。循环移位的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 将字的编码循环移动一位</span></span><br><span class="line"><span class="comment"> * @param word_code : [in/out]字的编码</span></span><br><span class="line"><span class="comment"> * @param word_count : [in]字的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cyclic_shift_word</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *word_code, <span class="keyword">int</span> word_count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, len;</span><br><span class="line"><span class="keyword">unsigned</span> short front;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *p = word_code;</span><br><span class="line"></span><br><span class="line">front = <span class="number">0x0000</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((p[<span class="number">2</span> * i] &amp; <span class="number">0x80</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">front += (<span class="number">0x0001</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">len = word_count * <span class="number">32</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len - <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (p[i] &lt;&lt; <span class="number">1</span>) + (p[i + <span class="number">1</span>] &gt;&gt; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p[i] = (p[i] &lt;&lt; <span class="number">1</span>) + (p[i + <span class="number">31</span>] &gt;&gt; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = len - <span class="number">32</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (p[i] &lt;&lt; <span class="number">1</span>) + (p[i + <span class="number">1</span>] &gt;&gt; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p[i] = (p[i] &lt;&lt; <span class="number">1</span>) + ((front &gt;&gt; ((i + <span class="number">31</span> - len) / <span class="number">2</span>)) &amp; <span class="number">0x0001</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  主函数代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HAL_Delay(<span class="number">2</span>); <span class="comment">// 防止MAX7219未正常启动</span></span><br><span class="line">init_screen();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">show_word(word_code);</span><br><span class="line">cyclic_shift_word(word_code, WORD_COUNT);</span><br><span class="line">HAL_Delay(<span class="number">180</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成果演示"><a class="markdownIt-Anchor" href="#成果演示"></a> 成果演示</h1><center><video src="/images/other/lattice_screen/run_show.mp4" controls="controls" autoplay="autoplay" loop="loop"></video></center><p>  虽然点阵屏算是比较简单的一个东西，但是因为是第一次自己画板子，设计电路，感觉还是挺好玩的。<br />  这个点阵屏的硬件设计和代码都已经放到github上了，<a href="https://github.com/ganyuo/lattice_screen" target="_blank" rel="noopener">https://github.com/ganyuo/lattice_screen</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说两句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先说两句&quot;&gt;&lt;/a&gt; 先说两句&lt;/h1&gt;
&lt;p&gt;  ~~最近上班摸鱼太无聊了，~~因为和某人约定好了要送一个礼物，又因为最近做嵌入式的原因，有点手痒，想自己做个东西玩玩，所以打算开</summary>
      
    
    
    
    <category term="其他" scheme="http://ganyuo.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="嵌入式" scheme="http://ganyuo.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="单片机" scheme="http://ganyuo.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="MAX7219" scheme="http://ganyuo.github.io/tags/MAX7219/"/>
    
  </entry>
  
  <entry>
    <title>linuxmint搭建Qt开发环境</title>
    <link href="http://ganyuo.github.io/learn_note/linux_qt_config/"/>
    <id>http://ganyuo.github.io/learn_note/linux_qt_config/</id>
    <published>2021-04-12T16:00:00.000Z</published>
    <updated>2025-03-06T06:48:01.567Z</updated>
    
    <content type="html"><![CDATA[<p>  最近想学一种桌面应用开发技术，之前大学的时候因为课程原因，学了下<code>javafx</code>，但是个人不喜欢java，后面就没深入去学，现在基本上忘了。后来毕业前准备找工作的时候学了两天<code>Qt</code>，当时只学了一些简单的GUI设计，结果面试没过😭，也没深入去学。再然后玩博客的时候，接触了一些前端的技术，发现有很多桌面应用是基于<code>Electron</code>开发的，这东西感觉挺不错的，跨平台，而且开发出来的界面很好看，不过貌似比较占用资源。</p><p>  最后还是打算学Qt，Qt有C++和python接口，而且跨平台，能在windows、linux和mac上跑，因为之前学过一点点，所以上手会快一点吧。</p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><p>  Anaconda里包含Qt的库和相关的工具，所以安装好Anaconda，把Anaconda加到PATH环境变量就能用Qt了。<br />  如果没装Anaconda的话，也可以用apt命令安装Qt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qt5-default</span><br></pre></td></tr></table></figure><h1 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> hello world</h1><p>  这里我打算用C++来写Qt，听说用python来写会简单一点，习惯python的小伙伴可以尝试一下，接口很相似的。Qt有个官方的IDE，叫Qt Creator，实际上不用这个IDE也可以很方便地写Qt代码，有<code>qmake</code>和<code>make</code>就够了，先试试编译一个“hello world”程序吧。</p><ol><li>首先创建一个文件夹，在里面新建一个<code>main.cpp</code>文件，往里面写代码，代码内容如下：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt; /* 应用程序抽象类 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;  /* 窗口类 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">QWidget widget; <span class="comment">/* 构造一个窗口 */</span></span><br><span class="line">widget.setWindowTitle(<span class="string">"Hello World"</span>); <span class="comment">/* 设置窗口标题 */</span></span><br><span class="line">widget.show(); <span class="comment">/* 显示窗口 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> app.exec(); <span class="comment">/* exec():进入消息循环 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的功能是用Qt创建一个标题是“Hello World”的窗口，然后显示出来。</p><ol start="2"><li>然后再新建一个<code>hello_world.pro</code>文件，作为Qt的项目文件，把刚刚的<code>main.cpp</code>加到项目里去：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 因为用了QWidget，所以要加上这个</span><br><span class="line">QT +&#x3D; widgets gui</span><br><span class="line"></span><br><span class="line"># 把main.cpp加到项目的代码列表里</span><br><span class="line">SOURCES +&#x3D; \</span><br><span class="line">main.cpp</span><br></pre></td></tr></table></figure><ol start="3"><li>最后在文件夹下打开终端，用<code>qmake</code>和<code>make</code>编译，编译好后运行生成的<code>hello_world</code>程序。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> qmake ../hello_world.pro</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./hello_world</span></span><br></pre></td></tr></table></figure><p>一切顺利的话，可以看到一个标题是“Hello World”的窗口。</p><h1 id="vscodium搭建qt开发环境"><a class="markdownIt-Anchor" href="#vscodium搭建qt开发环境"></a> vscodium搭建Qt开发环境</h1><p>  主要是<code>.vscode</code>目录下的三个json文件，一个是<code>tasks.json</code>，这个是用来配置vscodium编译Qt项目的，其实就是让vscodium运行<code>qmake</code>和<code>make</code>命令，可以参考一下我的配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"qt_build_debug"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"rm"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line"><span class="string">"-rf"</span>, <span class="string">"./*"</span>,</span><br><span class="line">                <span class="string">"&amp;&amp;"</span>, <span class="string">"qmake"</span>, <span class="string">"$&#123;file&#125;"</span>, <span class="string">"CONFIG+=debug"</span>, <span class="string">"CONFIG+=qml_debug"</span>, </span><br><span class="line">                <span class="string">"&amp;&amp;"</span>, <span class="string">"make"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;/build"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后是<code>launch.json</code>，用来配置运行或调试编译好的Qt程序。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line"><span class="attr">"configurations"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"qt_launch"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line"><span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line"><span class="attr">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/build/$&#123;fileBasenameNoExtension&#125;"</span>,</span><br><span class="line"><span class="attr">"args"</span>: [],</span><br><span class="line"><span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line"><span class="attr">"environment"</span>: [],</span><br><span class="line"><span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line"><span class="attr">"setupCommands"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"为 gdb 启用整齐打印"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line"><span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"preLaunchTask"</span>: <span class="string">"qt_build_debug"</span>,</span><br><span class="line"><span class="attr">"miDebuggerPath"</span>: <span class="string">"/usr/bin/gdb"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  最后一个是<code>c_cpp_properties.json</code>，这个用来配置vscodium的语法补全，这个要装C++的插件才行。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Linux"</span>,</span><br><span class="line">            <span class="attr">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/**"</span>,</span><br><span class="line">                <span class="string">"/home/ganyuo/program/anaconda3/include/qt/**"</span> <span class="comment">/* 这里需要根据anaconda的安装路径改 */</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defines"</span>: [],</span><br><span class="line">            <span class="attr">"compilerPath"</span>: <span class="string">"/usr/bin/g++"</span>,</span><br><span class="line">            <span class="attr">"cStandard"</span>: <span class="string">"gnu17"</span>,</span><br><span class="line">            <span class="attr">"cppStandard"</span>: <span class="string">"gnu++14"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"gcc-x64"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  配置好以后，打开一个Qt的<code>.pro</code>项目文件，按<code>F5</code>编译运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  最近想学一种桌面应用开发技术，之前大学的时候因为课程原因，学了下&lt;code&gt;javafx&lt;/code&gt;，但是个人不喜欢java，后面就没深入去学，现在基本上忘了。后来毕业前准备找工作的时候学了两天&lt;code&gt;Qt&lt;/code&gt;，当时只学了一些简单的GUI设计，结果面试没</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://ganyuo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="http://ganyuo.github.io/tags/Qt/"/>
    
    <category term="C++" scheme="http://ganyuo.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>图像LBP特征的提取</title>
    <link href="http://ganyuo.github.io/image_processing/lbp_feature/"/>
    <id>http://ganyuo.github.io/image_processing/lbp_feature/</id>
    <published>2021-03-17T16:00:00.000Z</published>
    <updated>2025-03-07T02:49:52.351Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容大部分<s>抄袭</s>引用自大佬的<a href="https://www.cnblogs.com/urglyfish/p/12424087.html" target="_blank" rel="noopener">一篇博客</a>。</p><h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p>  LBP（Local Binary Pattern，局部二值模式）是一种用来描述图像局部纹理特征的算子，具有旋转不变形和灰度值不变形等显著优点。主要用于纹理特征提取，在人脸识别部分有较好的效果。</p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>  从94年T. Ojala, M.Pietikäinen, 和D. Harwood提出至今，LBP大致经历了三个版本。下面按照时间顺序进行介绍。</p><h1 id="原始的lbp"><a class="markdownIt-Anchor" href="#原始的lbp"></a> 原始的LBP</h1><p>  最初的LBP算子通过定义一个3x3的窗口，以窗口内中心点的像素值为标准，对比窗口内另8个点像素值的大小，大于为1，小于为0。8个点形成一个二进制数字（通常转换为十进制表示）即为中心点的LBP特征值。详细计算如下图：</p><p><img src="/images/image_processing/lbp_feature/fig_1.png" alt="" /></p><p>通过上面得到的LBP算子具有很多缺点，之后研究人员在LBP基础上进行不断改进。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> ************************************</span></span><br><span class="line"><span class="comment"> * @author   : ganyuo</span></span><br><span class="line"><span class="comment"> * @date     : 2021-03-18</span></span><br><span class="line"><span class="comment"> ************************************</span></span><br><span class="line"><span class="comment"> * @brief :</span></span><br><span class="line"><span class="comment"> * 提取图像的原始LBP特征</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">origin_LBP_feature</span><span class="params">(cv::InputArray src, cv::OutputArray dst)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cv::Mat src_img, dst;</span><br><span class="line"></span><br><span class="line">src_img = cv::imread(<span class="string">"img/img1.png"</span>, cv::IMREAD_GRAYSCALE);</span><br><span class="line">cv::imshow(<span class="string">"原图"</span>, src_img);</span><br><span class="line"></span><br><span class="line">origin_LBP_feature(src_img, dst);</span><br><span class="line">cv::imshow(<span class="string">"原始LBP特征"</span>, dst);</span><br><span class="line"></span><br><span class="line">cv::waitKey();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 提取图像的原始LBP特征</span></span><br><span class="line"><span class="comment"> * @param src : 输入的图像</span></span><br><span class="line"><span class="comment"> * @param dst : 图像src的原始LBP特征</span></span><br><span class="line"><span class="comment"> * @return : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">origin_LBP_feature</span><span class="params">(cv::InputArray src, cv::OutputArray dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cv::Mat _src, _dst, border_src;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 填充图像的边界 */</span></span><br><span class="line">_src = src.getMat();</span><br><span class="line">cv::copyMakeBorder(_src, border_src, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, cv::BORDER_CONSTANT, cv::Scalar(<span class="number">0</span>));</span><br><span class="line">dst.create(_src.rows, _src.cols, _src.type());</span><br><span class="line">_dst = dst.getMat();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 循环处理每个像素 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; dst.rows(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; src.cols(); j++)</span><br><span class="line">&#123;</span><br><span class="line">uchar center = border_src.at&lt;uchar&gt;(i + <span class="number">1</span>, j + <span class="number">1</span>);</span><br><span class="line">uchar lbp_code = <span class="number">0</span>;</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">0</span>, j + <span class="number">0</span>) &gt; center) &lt;&lt; <span class="number">7</span>);</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">0</span>, j + <span class="number">1</span>) &gt; center) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">0</span>, j + <span class="number">2</span>) &gt; center) &lt;&lt; <span class="number">5</span>);</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">1</span>, j + <span class="number">2</span>) &gt; center) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">2</span>, j + <span class="number">2</span>) &gt; center) &lt;&lt; <span class="number">3</span>);</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">2</span>, j + <span class="number">1</span>) &gt; center) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">2</span>, j + <span class="number">0</span>) &gt; center) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">lbp_code |= ((border_src.at&lt;uchar&gt;(i + <span class="number">1</span>, j + <span class="number">0</span>) &gt; center) &lt;&lt; <span class="number">0</span>);</span><br><span class="line">_dst.at&lt;uchar&gt;(i, j) = lbp_code;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="改进的lbp"><a class="markdownIt-Anchor" href="#改进的lbp"></a> 改进的LBP</h1><p>  原始LBP算子计算区域为像素点的周围8个点，在图像尺寸发生改变时会出现很大的偏差，不能正确反映像素点周围的纹理信息。为适应不同尺寸纹理特征，LBP原作者将圆形邻域代替正方形邻域。同时增加了旋转不变的特性，在对LBP特征值的存储部分，也进行了改进。详细如下文。</p><h2 id="圆形lbp特征"><a class="markdownIt-Anchor" href="#圆形lbp特征"></a> 圆形LBP特征</h2><p>  圆形LBP特征以像素点为圆心，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>为半径，提取半径上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>个采样点，根据 <a href="#%E5%8E%9F%E5%A7%8B%E7%9A%84LBP">原始的LBP</a> 中像素值比较方法，进行像素值大小的比较，得到该点的LBP特征值。其中提取采样点的方法如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mi>t</mi></msub><mo>=</mo><msub><mi>x</mi><mi>d</mi></msub><mo>+</mo><mi>R</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>p</mi></mrow><mi>P</mi></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>y</mi><mi>t</mi></msub><mo>=</mo><msub><mi>y</mi><mi>d</mi></msub><mo>+</mo><mi>R</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>p</mi></mrow><mi>P</mi></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}x_t = x_d + R\cos(\frac{2\pi p}{P}) \\y_t = y_d + R\cos(\frac{2\pi p}{P})\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.61488em;vertical-align:-2.05744em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.55744em;"><span style="top:-4.55744em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.05744em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_t, y_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>为某个采样点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>d</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_d, y_d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>为邻域中心点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>为第p个采样点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>为采样点的个数。得到采样点的坐标可能为小数，改进后的LBP采用双线性插值法进行计算该点的像素值，计算公式如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>≈</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>−</mo><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mi>y</mi><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mi>y</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mi>y</mi><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mi>y</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mo stretchy="false">⌊</mo><mi>y</mi><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>−</mo><mo stretchy="false">⌊</mo><mi>y</mi><mo stretchy="false">⌋</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">f(x, y) \approx\left[\begin{matrix}1 - (x - \lfloor x \rfloor) &amp; x - \lfloor x \rfloor\end{matrix} \right]\left[\begin{matrix}f(\lfloor x \rfloor, \lfloor y \rfloor) &amp; f(\lfloor x \rfloor, \lfloor y \rfloor + 1) \\f(\lfloor x \rfloor + 1, \lfloor y \rfloor) &amp; f(\lfloor x \rfloor + 1, \lfloor y \rfloor + 1)\end{matrix} \right]\left[\begin{matrix}1 - (y - \lfloor y \rfloor) \\y - \lfloor y \rfloor\end{matrix} \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">⌋</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">⌋</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">⌋</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">⌋</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>几种不同半径不同采样点数量的LBP算子：<br /><img src="/images/image_processing/lbp_feature/fig_2.png" alt="" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 提取图像的圆形LBP特征</span></span><br><span class="line"><span class="comment"> * @param src : 输入的图像</span></span><br><span class="line"><span class="comment"> * @param dst : 图像src的圆形LBP特征</span></span><br><span class="line"><span class="comment"> * @return : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">circular_LBP_feature</span><span class="params">(cv::InputArray src, cv::OutputArray dst, <span class="keyword">int</span> num_neighbor, <span class="keyword">double</span> radius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cv::Mat _src, _dst, border_src;</span><br><span class="line"><span class="keyword">int</span> i, j, k, padding;</span><br><span class="line"><span class="keyword">double</span> x, y, neighbor;</span><br><span class="line"></span><br><span class="line">_src = src.getMat();</span><br><span class="line">dst.create(_src.rows, _src.cols, _src.type());</span><br><span class="line">_dst = dst.getMat();</span><br><span class="line"><span class="comment">/* 填充图像的边界 */</span></span><br><span class="line">padding = (<span class="keyword">int</span>)radius + <span class="number">1</span>;</span><br><span class="line">cv::copyMakeBorder(_src, border_src, </span><br><span class="line">padding, padding, padding, padding, cv::BORDER_CONSTANT, cv::Scalar(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 循环处理每个像素 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; dst.rows(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; src.cols(); j++)</span><br><span class="line">&#123;</span><br><span class="line">uchar center = border_src.at&lt;uchar&gt;(i + padding, j + padding);</span><br><span class="line">uchar lbp_code = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; num_neighbor; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 根据公式计算第k个采样点的坐标，这个地方可以优化，不必每次都进行计算radius*cos，radius*sin */</span></span><br><span class="line">x = (<span class="keyword">double</span>)j + radius * <span class="built_in">cos</span>(<span class="number">2.0</span> * CV_PI * k / num_neighbor);</span><br><span class="line">y = (<span class="keyword">double</span>)i + radius * <span class="built_in">sin</span>(<span class="number">2.0</span> * CV_PI * k / num_neighbor);</span><br><span class="line">neighbor = bilinear_interpolation(src, x, y);</span><br><span class="line">lbp_code |= ((neighbor &gt; center) &lt;&lt; (num_neighbor - k - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">_dst.at&lt;uchar&gt;(i, j) = lbp_code;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 利用双线性内插计算图像的浮点像素值</span></span><br><span class="line"><span class="comment"> * @param src : 需要插值的图像</span></span><br><span class="line"><span class="comment"> * @param x : x坐标</span></span><br><span class="line"><span class="comment"> * @param y : y坐标</span></span><br><span class="line"><span class="comment"> * @return : 图像src在浮点坐标(x, y)处的浮点像素值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bilinear_interpolation</span><span class="params">(cv::InputArray src, <span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cv::Mat _src = src.getMat();</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt; _src.cols || y &lt; <span class="number">0</span> || y &gt; _src.rows)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图像中与浮点像素最近的四个整数坐标值(lx:左x、rx:右x、uy:上y、dy:下y) */</span></span><br><span class="line"><span class="keyword">double</span> lx = (<span class="keyword">int</span>)x;</span><br><span class="line"><span class="keyword">double</span> rx = lx + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> uy = (<span class="keyword">int</span>)y;</span><br><span class="line"><span class="keyword">double</span> dy = uy + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 先计算y方向的两个像素点值f1、f2，再计算xy两个方向上的像素点值 */</span></span><br><span class="line"><span class="keyword">double</span> f1 = (rx - x) * _src.at&lt;uchar&gt;(uy, lx) + (x - lx) * _src.at&lt;uchar&gt;(uy, rx);</span><br><span class="line"><span class="keyword">double</span> f2 = (rx - x) * _src.at&lt;uchar&gt;(dy, lx) + (x - lx) * _src.at&lt;uchar&gt;(dy, rx);</span><br><span class="line"><span class="keyword">double</span> xy = (dy - y) * f1 + (y - uy) * f2;</span><br><span class="line"><span class="keyword">return</span> xy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转不变lbp特征"><a class="markdownIt-Anchor" href="#旋转不变lbp特征"></a> 旋转不变LBP特征</h2><p>  上面通过采取圆形邻域的计算，一定程度上削弱了尺度改变的影响。研究人员在上面的基础上进一步扩展，使具备旋转不变的特征。</p><p>  首先，在确定半径大小和采样点数目后，不断旋转圆形邻域内采样点的位置，得到一系列的LBP特征值，从这些LBP特征值中选择最小的值作为LBP中心像素点的LBP特征值，具体如下图：<br /><img src="/images/image_processing/lbp_feature/fig_3.png" alt="" /></p><p>  通过不断旋转，取最小值，使具备旋转不变特性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 对LBP特征图像进行旋转不变处理</span></span><br><span class="line"><span class="comment"> * @param src : 输入的LBP特征图像</span></span><br><span class="line"><span class="comment"> * @param dst : 进行旋转不变处理后的特征图像</span></span><br><span class="line"><span class="comment"> * @return : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotation_invariant</span><span class="params">(cv::InputArray src, cv::OutputArray dst, <span class="keyword">int</span> num_neighbor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cv::Mat _src, _dst;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line">uchar current_value, min_value, temp;</span><br><span class="line"></span><br><span class="line">_src = src.getMat();</span><br><span class="line">dst.create(_src.rows, _src.cols, _src.type());</span><br><span class="line">_dst = dst.getMat();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 循环处理每个像素 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; _src.rows; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; _dst.cols; j++)</span><br><span class="line">&#123;</span><br><span class="line">current_value = _src.at&lt;uchar&gt;(i, j);</span><br><span class="line">min_value = current_value;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">1</span>; k &lt; num_neighbor; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 循环右移k位 */</span></span><br><span class="line">temp = (current_value &gt;&gt; k) | (current_value &lt;&lt; (num_neighbor - k));</span><br><span class="line">temp &amp;= (<span class="number">0xff</span> &gt;&gt; (<span class="number">8</span> - num_neighbor));</span><br><span class="line"><span class="keyword">if</span>(temp &lt; min_value)</span><br><span class="line">&#123;</span><br><span class="line">min_value = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_dst.at&lt;uchar&gt;(i, j) = min_value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一模式lbp特征"><a class="markdownIt-Anchor" href="#统一模式lbp特征"></a> 统一模式LBP特征</h2><p>  统一模式LBP（Uniform Pattern LBP）特征也称为等价模式或均匀模式。对LBP特征值的存储方式上，进行了优化。详细如下。</p><p>  假设对于半径为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>的圆形邻域内提取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>个采样点，会产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>P</mi></msup></mrow><annotation encoding="application/x-tex">2^P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span></span></span></span></span></span></span>种二进制表达方法，随着邻域内采样点数目的增加，二进制模式的种类以指数形式增加，不利于LBP特征值的存储、提取、分类和识别。LBP原作者提出一种“统一模式”对LBP算子进行降维。详细如下。</p><p>  在实际图像中，绝大多数LBP模式只包括从0到1或从1到0的转变，LBP原作者将“统一模式”定义为当某个LBP特征值所对应的二进制数从0到1或从1到0的转变最多有两次时，该LBP所对应的二进制就称为一个统一模式。如<code>00000000</code>（0次跳变）、<code>00000011</code>（1次跳变）、<code>10001111</code>（2次跳变）均为统一模式类。除统一模式类外均归为混合模式类。上述算法，使得模式数量由原来的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>P</mi></msup></mrow><annotation encoding="application/x-tex">2^P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span></span></span></span></span></span></span>种减少为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>P</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P(P - 1) + 2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>种（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>代表采样点的数量）。</p><p>实例介绍：</p><p>  如采样点数为8，即256种LBP特征值，根据统一模式可分为59类：跳变0次——2个，跳变1次——0个，跳变2次——56个，…跳变8次——1个。（跳变1次为0个是因为LBP作者把LBP二进制数字看做一个圆性的序列，故跳变1次为0个）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 对LBP特征进行统一模式编码</span></span><br><span class="line"><span class="comment"> * @param src : 输入的LBP特征</span></span><br><span class="line"><span class="comment"> * @param dst : 用统一模式编码的LBP特征</span></span><br><span class="line"><span class="comment"> * @return : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uniform_pattern</span><span class="params">(cv::InputArray src, cv::OutputArray dst, <span class="keyword">int</span> num_neighbor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cv::Mat _src, _dst;</span><br><span class="line"><span class="keyword">int</span> i, j, k, hop_time;</span><br><span class="line">uchar kind, curr_bit, next_bit;</span><br><span class="line">uchar table[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算编码映射关系 */</span></span><br><span class="line">kind = <span class="number">1</span>; <span class="comment">/* 用0来表示混合模式类，所以从1开始计算统一模式类 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 计算跳变次数 */</span></span><br><span class="line">hop_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; num_neighbor; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 计算i的二进制第j位，以及j的下一位--第(j + 1) % num_neighbor位 */</span></span><br><span class="line">curr_bit = (i &gt;&gt; j) &amp; <span class="number">0x01</span>;</span><br><span class="line">next_bit = (i &gt;&gt; ((j + <span class="number">1</span>) % num_neighbor)) &amp; <span class="number">0x01</span>;</span><br><span class="line"><span class="keyword">if</span>(curr_bit != next_bit)</span><br><span class="line">&#123;</span><br><span class="line">hop_time++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 跳变次数小于等于2，说明是统一模式类 */</span></span><br><span class="line"><span class="keyword">if</span>(hop_time &lt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">table[i] = kind;</span><br><span class="line">kind++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_src = src.getMat();</span><br><span class="line">dst.create(_src.rows, _src.cols, _src.type());</span><br><span class="line">_dst = dst.getMat();</span><br><span class="line"><span class="comment">/* 对输入的LBP特征进行统一模式编码 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; _src.rows; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; _src.cols; j++)</span><br><span class="line">&#123;</span><br><span class="line">_dst.at&lt;uchar&gt;(i, j) = table[_dst.at&lt;uchar&gt;(i, j)];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mb-lbp特征"><a class="markdownIt-Anchor" href="#mb-lbp特征"></a> MB-LBP特征</h2><p>  MB-LBP特征，全称为Multiscale Block LBP,由中科院的研究人员研究发表，原理与HOG特征提取有相似之处，介绍MB-LBP仅用于了解，下面是原理介绍。</p><p>  首先将图像分为分为多个块，再将每个小块分成多个区域，每个区域的灰度值为该区域内灰度值的平均值。在一个块内，将中心区域的灰度值大小与周围区域的灰度值大小进行比较形成LBP特征值。如下图：<br /><img src="/images/image_processing/lbp_feature/fig_4.png" alt="" /></p><p>  作者对得到的MB-LBP特征值同样进行均值编码。首先，对得到的特征值采用直方图进行表示，计算每一种特征值的数量，进行排序，将排序在前63为的特征值看作是统一模式类，其他的为混合模式类，共64类。</p><h1 id="lbph"><a class="markdownIt-Anchor" href="#lbph"></a> LBPH</h1><p>  LBP的最后一步改进为LBPH即LBP特征统计直方图的使用，可用于机器学习特征的提取。这种表示方法由Ahonen等人提出，将LBP特征图像分成m个局部块，提取每个局部块的直方图，并依次连接在一起形成LBP特征的统计直方图。具体过程如下：</p><ol><li>计算图像中每一像素点的LBP特征值。</li><li>图像进行分成多块。（Opencv中默认将LBP特征图像分为8行8列64块区域。）</li><li>计算每块区域的LBP特征值的直方图，并将直方图进行归一化。（横坐标为LBP特征值的表示方式，纵坐标为数量）</li><li>将上面计算的每块区域特征图像的直方图按顺序依次排列成一行，形成LBP特征向量。</li><li>用机器学习方法对LBP特征向量进行训练。</li></ol><p>举例说明LBPH的维度：</p><p>  采样点为8个，如果用的是原始的LBP或Extended LBP特征，其LBP特征值的模式为256种，则一幅图像的LBP特征向量维度为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>64</mn><mo>×</mo><mn>256</mn><mo>=</mo><mn>16384</mn></mrow><annotation encoding="application/x-tex">64 \times 256 = 16384</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">3</span><span class="mord">8</span><span class="mord">4</span></span></span></span>维， 而如果使用<a href="#%E7%BB%9F%E4%B8%80%E6%A8%A1%E5%BC%8FLBP%E7%89%B9%E5%BE%81">统一模式LBP特征</a>，其LBP值的模式为59种，其特征向量维度为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>64</mn><mo>×</mo><mn>59</mn><mo>=</mo><mn>3776</mn></mrow><annotation encoding="application/x-tex">64 \times 59 = 3776</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord">7</span><span class="mord">6</span></span></span></span>维，可以看出，使用统一模式特征，其特征向量的维度大大减少， 这意味着使用机器学习方法进行学习的时间将大大减少，而性能上没有受到很大影响。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief : 提取图像的LBP特征统计直方图</span></span><br><span class="line"><span class="comment"> * @param src : 输入的图像</span></span><br><span class="line"><span class="comment"> * @param dst : 图像的LBP特征统计直方图，大小为(grid_w, grid_h, num_patterns)</span></span><br><span class="line"><span class="comment"> * @param num_patterns : LBP模式的种类</span></span><br><span class="line"><span class="comment"> * @param grid_w : 分块后的宽度，图像最终分成 grid_w×grid_h 个块</span></span><br><span class="line"><span class="comment"> * @param grid_h : 分块后的高度</span></span><br><span class="line"><span class="comment"> * @return : None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">histogram_LBP_feature</span><span class="params">(cv::InputArray src, cv::OutputArray dst, <span class="keyword">int</span> num_patterns, <span class="keyword">int</span> grid_w, <span class="keyword">int</span> grid_h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cv::Mat _src, _dst, block;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> weight, height;</span><br><span class="line"><span class="keyword">int</span> dst_row_index;</span><br><span class="line"><span class="keyword">int32_t</span> block_histogram[<span class="number">256</span>];</span><br><span class="line">uchar *data, *dst_row_ptr;</span><br><span class="line"></span><br><span class="line">_src = src.getMat();</span><br><span class="line">dst.create(cv::Size(grid_w, grid_h), CV_32SC(num_patterns));</span><br><span class="line">_dst = dst.getMat();</span><br><span class="line">weight = (<span class="keyword">int</span>)(_src.cols / grid_w);</span><br><span class="line">height = (<span class="keyword">int</span>)(_src.rows / grid_h);</span><br><span class="line"></span><br><span class="line">dst_row_ptr = _dst.data;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; grid_h; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; grid_w; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 对图像切块 */</span></span><br><span class="line">block = cv::Mat(_src, cv::Rect(j * weight, i * height, weight, height));</span><br><span class="line"><span class="comment">/* 计算块的直方图 */</span></span><br><span class="line"><span class="built_in">memset</span>(block_histogram, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(block_histogram));</span><br><span class="line"><span class="keyword">for</span>(data = block.data; data != block.dataend; data++)</span><br><span class="line">&#123;</span><br><span class="line">block_histogram[*data]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 将块的直方图存到dst的一行里 */</span></span><br><span class="line"><span class="built_in">memcpy</span>(dst_row_ptr, block_histogram, <span class="number">4</span> * num_patterns);</span><br><span class="line"><span class="comment">/* dst_row_ptr指向dst的下一行 */</span></span><br><span class="line">dst_row_ptr = dst_row_ptr +  <span class="number">4</span> * num_patterns;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文内容大部分&lt;s&gt;抄袭&lt;/s&gt;引用自大佬的&lt;a href=&quot;https://www.cnblogs.com/urglyfish/p/12424087.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;背景</summary>
      
    
    
    
    <category term="图像处理" scheme="http://ganyuo.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://ganyuo.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="LBP" scheme="http://ganyuo.github.io/tags/LBP/"/>
    
    <category term="特征提取" scheme="http://ganyuo.github.io/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>linuxmint搭建stm32开发环境</title>
    <link href="http://ganyuo.github.io/learn_note/linux_arm_config/"/>
    <id>http://ganyuo.github.io/learn_note/linux_arm_config/</id>
    <published>2021-03-16T13:00:00.000Z</published>
    <updated>2025-03-06T06:48:01.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说两句"><a class="markdownIt-Anchor" href="#先说两句"></a> 先说两句</h1><p>  最近公司要做一个单片机上的项目，虽然之前学过一点点，不过当时只会写“hello world”级别的代码。感觉这东西挺好玩的，趁着晚上下班没事学一下，随便记录一下开发环境的搭建过程。<br />  开发板是<code>STM32F407G-DISC1</code>，大学搞飞控的时候买的，<s>当时我在团队里面是划水的</s>。之前是在win10系统开发，现在换了linuxmint系统，要重新学一下怎么搭环境，主要是参考大佬的 <a href="https://blog.csdn.net/u010000843/article/details/114531922" target="_blank" rel="noopener">https://blog.csdn.net/u010000843/article/details/114531922</a> 这篇博客搭的。用到的工具先列一下吧：</p><table><thead><tr><th style="text-align:left">工具</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left">vscodium</td><td style="text-align:left">vscode完全开源版的IDE，和vscode很像</td></tr><tr><td style="text-align:left">STM32CubeMX</td><td style="text-align:left">ST公司的代码自动生成工具</td></tr><tr><td style="text-align:left">gcc-arm-none-eabi</td><td style="text-align:left">arm平台的GNU编译器</td></tr><tr><td style="text-align:left">openOCD</td><td style="text-align:left">开源的烧录调试工具</td></tr></tbody></table><p>  好的，接下来就开始吧。</p><h1 id="开发工具安装"><a class="markdownIt-Anchor" href="#开发工具安装"></a> 开发工具安装</h1><h2 id="vscodium"><a class="markdownIt-Anchor" href="#vscodium"></a> vscodium</h2><p>  去GitHub上下载，地址：<a href="https://github.com/vscodium/vscodium/releases" target="_blank" rel="noopener">https://github.com/vscodium/vscodium/releases</a>。建议不要装1.5x.x版本的，代码提示经常加载不出来，vscode也是一样。</p><h2 id="stm32cubemx"><a class="markdownIt-Anchor" href="#stm32cubemx"></a> STM32CubeMX</h2><p>  ST官网上下载安装就好了，<a href="https://www.st.com/zh/development-tools/stm32cubemx.html" target="_blank" rel="noopener">传送门</a>。</p><h2 id="gcc-arm-none-eabi"><a class="markdownIt-Anchor" href="#gcc-arm-none-eabi"></a> gcc-arm-none-eabi</h2><p>  这个在arm官网上有，<a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads" target="_blank" rel="noopener">传送门</a>，下载后解压到你喜欢的某个路径下，然后把里面的<code>bin</code>目录添加到<code>PATH</code>环境变量里。方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开.bashrc后把下面这两句添加到里面</span></span><br><span class="line">GCC_ARM_NONE_EABI_HOME="" # 这里写gcc-arm-none-eabi解压后的路径</span><br><span class="line">export PATH="$&#123;GCC_ARM_NONE_EABI_HOME&#125;/bin:$PATH"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存退出后让PATH生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>一切顺利的话，可以查到编译器的版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> arm-none-eabi-gcc --version</span></span><br><span class="line">arm-none-eabi-gcc (GNU Arm Embedded Toolchain 9-2020-q2-update) 9.3.1 20200408 (release)</span><br><span class="line">Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><h2 id="openocd"><a class="markdownIt-Anchor" href="#openocd"></a> openOCD</h2><p>  用apt安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install openocd</span></span><br></pre></td></tr></table></figure><p>成功安装完后可以看到openOCD版本号，电脑用USB线连接上开发板后，可以用<code>lsusb</code>命令可以看到相关信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openocd -v</span></span><br><span class="line">Open On-Chip Debugger 0.10.0</span><br><span class="line">Licensed under GNU GPL v2</span><br><span class="line">For bug reports, read</span><br><span class="line">http://openocd.org/doc/doxygen/bugs.html</span><br><span class="line"><span class="meta">$</span><span class="bash"> lsusb</span></span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 002: ID 2717:5009 Xiaomi Inc. Mi Gaming Mouse</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 005: ID 040b:0a67 Weltrend Semiconductor Weltrend USB Mouse</span><br><span class="line">Bus 001 Device 004: ID 05e3:0610 Genesys Logic, Inc. 4-port hub</span><br><span class="line">Bus 001 Device 003: ID 0b05:1939 ASUSTek Computer, Inc. AURA LED Controller</span><br><span class="line">Bus 001 Device 002: ID 8087:0029 Intel Corp. </span><br><span class="line">Bus 001 Device 007: ID 0483:374b STMicroelectronics ST-LINK/V2.1  # &lt;== 这个是我的开发板</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><h1 id="生成工程代码"><a class="markdownIt-Anchor" href="#生成工程代码"></a> 生成工程代码</h1><p>  作为演示，这里就生成一个点亮板子LED灯的代码吧。</p><h2 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h2><ol><li><p>首先，打开STM32CubeMX，新建一个project。<br /><img src="/images/learn_note/linux_arm_config/fig_1.png" alt="" /></p></li><li><p>然后选择对应的芯片型号，我这块板子用的是<code>STM32F407VGT6</code>这块MCU，所以选这个：<br /><img src="/images/learn_note/linux_arm_config/fig_2.png" alt="" /></p></li></ol><h2 id="配置项目"><a class="markdownIt-Anchor" href="#配置项目"></a> 配置项目</h2><ol><li><p>打开调试功能：<br />打开System Core-&gt;SYS，Debug模式选择Serial Wire，也就是SWD。<br /><img src="/images/learn_note/linux_arm_config/fig_3.png" alt="" /></p></li><li><p>配置GPIO：<br />去官网上查<a href="https://www.st.com/resource/en/schematic_pack/mb997-f407vgt6-c01_schematic.pdf" target="_blank" rel="noopener">这块开发板的CAD文档</a>，在最后一页右下角找到了LED的部分，发现绿色的灯连的是PD12引脚，黄色的灯是PD13，红色的是PD14，蓝色的是PD15，这里就试一下蓝色和红色的灯吧，那接下来配置PD14和PD15这两个引脚就好了。<br /><img src="/images/learn_note/linux_arm_config/fig_4.png" alt="" />回到STM32CubeMX里，在芯片图右边找到这两个引脚，鼠标单击，两个引脚都配置成<code>GPIO_Output</code>模式。<br /><img src="/images/learn_note/linux_arm_config/fig_5.png" alt="" />然后点击左边的System Core-&gt;GPIO就可以看到这两个引脚的配置选项了，接下来把这两个引脚配置成输出高电平(High)，使用推挽输出(Pull-up)方式（不记得这个推挽输出是啥意思了），如下图：<br /><img src="/images/learn_note/linux_arm_config/fig_6.png" alt="" /></p></li></ol><p>到这里项目就配置好了，接下来是生成代码。</p><h2 id="生成代码"><a class="markdownIt-Anchor" href="#生成代码"></a> 生成代码</h2><p>  进入Project Manager，填写项目名字和保存路径，选择使用Makefile管理项目，然后点右上角的GENERATE CODE生成代码。<br /><img src="/images/learn_note/linux_arm_config/fig_7.png" alt="" /></p><p>  如果是第一次生成代码，会弹出一个框，意思大概是要先下载一个F4的包才能生成代码，这个包默认是下载到home目录下的STM32Cube里，因为文件夹开头是不带&quot;.&quot;隐藏的，对于我这个强迫症来说，受不了home目录下有莫名其妙的文件夹。幸好在Help-&gt;Updater Setting有个Repository Folder，可以指定包的保存路径（设置前要先点File保存关闭项目才能设置），把路径改成了CubeMX的安装路径，然后把home目录下的STM32Cube删除，舒服了(๑¯∀¯๑)！</p><h1 id="编译烧录"><a class="markdownIt-Anchor" href="#编译烧录"></a> 编译烧录</h1><h2 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h2><p>  在项目目录下<code>make</code>就好了。如果编译成功，项目会在目录下创建一个build文件夹，里面有与项目名字相同的.bin文件和.hex文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure><h2 id="烧录"><a class="markdownIt-Anchor" href="#烧录"></a> 烧录</h2><p>  把开发板连上电脑，然后开一个终端，用openocd连接开发板，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openocd -f 烧录器配置文件 -f MCU配置文件</span></span><br></pre></td></tr></table></figure><p>烧录器配置文件在<code>/usr/share/openocd/scripts/interface</code>目录下，MCU的配置文件在<code>/usr/share/openocd/scripts/target</code>目录下，根据开发板选择对应的配置文件。我的这块开发板的烧录器是stlink-v2.1，MCU是<code>STM32F407VGT6</code>，所以连接的命令和输出是酱紫的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openocd -f /usr/share/openocd/scripts/interface/stlink-v2-1.cfg -f /usr/share/openocd/scripts/target/stm32f4x.cfg</span></span><br><span class="line">Open On-Chip Debugger 0.10.0</span><br><span class="line">Licensed under GNU GPL v2</span><br><span class="line">For bug reports, read</span><br><span class="line">http://openocd.org/doc/doxygen/bugs.html</span><br><span class="line">Info : auto-selecting first available session transport "hla_swd". To override use 'transport select &lt;transport&gt;'.</span><br><span class="line">Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD</span><br><span class="line">adapter speed: 2000 kHz</span><br><span class="line">adapter_nsrst_delay: 100</span><br><span class="line">none separate</span><br><span class="line">Info : Unable to match requested speed 2000 kHz, using 1800 kHz</span><br><span class="line">Info : Unable to match requested speed 2000 kHz, using 1800 kHz</span><br><span class="line">Info : clock speed 1800 kHz</span><br><span class="line">Info : STLINK v2 JTAG v25 API v2 SWIM v14 VID 0x0483 PID 0x374B</span><br><span class="line">Info : using stlink api v2</span><br><span class="line">Info : Target voltage: 2.890749</span><br><span class="line">Info : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints</span><br></pre></td></tr></table></figure><p>  连接成功后再开一个终端，用<code>telnet</code>连接本地的4444端口，与openocd通信。然后用<code>program 生成的hex文件路径</code>把程序烧录进开发板，如果出现<code>** Programming Finished **</code>，说明烧录成功。然后用<code>reset</code>命令重启开发板，这个时候应该就可以看到开发板的红灯和蓝灯亮了，最后用<code>exit</code>命令退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> telnet localhost 4444   <span class="comment"># 连接</span></span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is '^]'.</span><br><span class="line">Open On-Chip Debugger</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> program /home/ganyuo/code/stm32f4_led/build/stm32f4_led.hex  <span class="comment"># 烧录</span></span></span><br><span class="line">Unable to match requested speed 2000 kHz, using 1800 kHz</span><br><span class="line">Unable to match requested speed 2000 kHz, using 1800 kHz</span><br><span class="line">adapter speed: 1800 kHz</span><br><span class="line">target halted due to debug-request, current mode: Thread </span><br><span class="line">xPSR: 0x01000000 pc: 0x08000f6c msp: 0x20020000</span><br><span class="line">Unable to match requested speed 8000 kHz, using 4000 kHz</span><br><span class="line">Unable to match requested speed 8000 kHz, using 4000 kHz</span><br><span class="line">adapter speed: 4000 kHz</span><br><span class="line">** Programming Started **</span><br><span class="line">auto erase enabled</span><br><span class="line">target halted due to breakpoint, current mode: Thread </span><br><span class="line">xPSR: 0x61000000 pc: 0x20000046 msp: 0x20020000</span><br><span class="line">wrote 16384 bytes from file /home/ganyuo/code/stm32f4_led/build/stm32f4_led.hex in 0.616047s (25.972 KiB/s)</span><br><span class="line">** Programming Finished **  # 表示烧录成功</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> reset   <span class="comment"># 重启开发板</span></span></span><br><span class="line">Unable to match requested speed 2000 kHz, using 1800 kHz</span><br><span class="line">Unable to match requested speed 2000 kHz, using 1800 kHz</span><br><span class="line">adapter speed: 1800 kHz</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">exit</span>  <span class="comment"># 退出</span></span></span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><h1 id="配置vscodium"><a class="markdownIt-Anchor" href="#配置vscodium"></a> 配置vscodium</h1><h2 id="安装arm插件"><a class="markdownIt-Anchor" href="#安装arm插件"></a> 安装ARM插件</h2><p>  在vscodium插件商店里搜索<code>ARM</code>和<code>Cortex-Debug</code>，安装。vscodium默认用的是插件商店是<a href="https://open-vsx.org/" target="_blank" rel="noopener">open-vsx.org</a>，下载比较慢，而且很多vscode库里的插件没有，改成vscode库的方法可以参考这里<a href="https://github.com/VSCodium/vscodium/blob/master/DOCS.md#extensions--marketplace" target="_blank" rel="noopener">传送门</a>。<br /><img src="/images/learn_note/linux_arm_config/fig_8.png" alt="" /></p><h2 id="添加c配置"><a class="markdownIt-Anchor" href="#添加c配置"></a> 添加C++配置</h2><p>  用vscodium打开项目后会有很多红色的报错，可以添加C/C<ins>的配置文件来去掉。按下快捷键<code>Ctrl+Shift+p</code>，输入C/C</ins>，然后点击<code>Edit Configurrations(JSON)</code><br /><img src="/images/learn_note/linux_arm_config/fig_9.png" alt="" /></p><p>然后打开项目目录下的.vscode/c_cpp_properties.json文件，把<code>defines</code>配置成下面这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Linux"</span>,</span><br><span class="line">            <span class="attr">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/**"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defines"</span>: [</span><br><span class="line">                <span class="string">"USE_HAL_DRIVER"</span>, <span class="comment">/* 加上这两个 */</span></span><br><span class="line">                <span class="string">"STM32F407xx"</span>     <span class="comment">/* 这个要根据MCU型号来写 */</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"compilerPath"</span>: <span class="string">"/home/ganyuo/programs/gcc-arm-none-eabi/bin/arm-none-eabi-gcc"</span>,</span><br><span class="line">            <span class="attr">"cStandard"</span>: <span class="string">"gnu17"</span>,</span><br><span class="line">            <span class="attr">"cppStandard"</span>: <span class="string">"gnu++14"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"gcc-arm"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一键编译烧录调试"><a class="markdownIt-Anchor" href="#一键编译烧录调试"></a> 一键编译烧录调试</h2><p>  在工程的.vscode目录下新建一个<code>tasks.json</code>和<code>launch.json</code>。<br />  <code>tasks.json</code>用来编译项目，在这里就是make一下，可以参考下面这样写。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"task_build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"make"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>launch.json</code>用来配置运行和调试，可以参考下面这样写。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Cortex Debug"</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>,</span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"task_build"</span>,</span><br><span class="line">            <span class="attr">"executable"</span>: <span class="string">"$&#123;workspaceRoot&#125;/build/$&#123;workspaceFolderBasename&#125;.elf"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cortex-debug"</span>,</span><br><span class="line"><span class="attr">"svdFile"</span>: <span class="string">"STM32F407.svd"</span>,</span><br><span class="line">            <span class="attr">"servertype"</span>: <span class="string">"openocd"</span>,</span><br><span class="line">            <span class="attr">"configFiles"</span>:[</span><br><span class="line">                <span class="string">"/usr/share/openocd/scripts/interface/stlink-v2-1.cfg"</span>,</span><br><span class="line">                <span class="string">"/usr/share/openocd/scripts/target/stm32f4x.cfg"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"armToolchainPath"</span>: <span class="string">"/home/ganyuo/programs/gcc-arm-none-eabi/bin"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>launch.json</code>里面有个<code>svdFile</code>配置项，用来指定svd文件，有这个文件能查看寄存器的值，不配置这个选项也能调试。可以在<a href="https://github.com/posborne/cmsis-svd" target="_blank" rel="noopener">https://github.com/posborne/cmsis-svd</a>找到，每个MCU都不同，下载对应的svd文件，放到项目目录下就好了。<br /><br></p><p>接下来试一下能不能调试，在<code>Core/Src/main.c</code>的<code>main</code>函数里设置一个断点，然后按F5开始调试，然后就gg了…emmmm…<br /><img src="/images/learn_note/linux_arm_config/99_error.gif" alt="" /><br />打开调试控制台，发现报了下面这个错误。</p><blockquote><p>undefined/home/ganyuo/programs/gcc-arm-none-eabi/bin/arm-none-eabi-gdb: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</p></blockquote><p>意思是说找不到<code>libncurses.so.5</code>这个动态链接库，用<code>ldconfig</code>命令找了一下，发现只有<code>libncurses.so.6</code>，2333…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ldconfig -p | grep libncurses.so</span></span><br><span class="line">libncurses.so.6 (libc6,x86-64) =&gt; /lib/x86_64-linux-gnu/libncurses.so.6</span><br></pre></td></tr></table></figure><p>用<code>apt-get</code>把<code>libncurses5</code>这个包装上以后就可以找到这个库了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libncurses5</span><br><span class="line">$ ldconfig -p | grep libncurses.so</span><br><span class="line">libncurses.so.6 (libc6,x86-64) &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libncurses.so.6</span><br><span class="line">libncurses.so.5 (libc6,x86-64) &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libncurses.so.5</span><br></pre></td></tr></table></figure><br><p>再试一下能不能调试，这次没问题了，开心！&lt;(*￣▽￣*)/<br /><img src="/images/learn_note/linux_arm_config/fig_10.png" alt="" /></p><p>刚开始调试的时候会停在用来引导的汇编代码里面，继续按F5就运行到main函数里的断点了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说两句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先说两句&quot;&gt;&lt;/a&gt; 先说两句&lt;/h1&gt;
&lt;p&gt;  最近公司要做一个单片机上的项目，虽然之前学过一点点，不过当时只会写“hello world”级别的代码。感觉这东西挺好玩的，趁着</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://ganyuo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="嵌入式" scheme="http://ganyuo.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="arm" scheme="http://ganyuo.github.io/tags/arm/"/>
    
    <category term="linux" scheme="http://ganyuo.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>装的第一台电脑</title>
    <link href="http://ganyuo.github.io/other/assemble_computer/"/>
    <id>http://ganyuo.github.io/other/assemble_computer/</id>
    <published>2020-11-24T06:14:00.000Z</published>
    <updated>2025-03-06T06:48:01.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说两句"><a class="markdownIt-Anchor" href="#先说两句"></a> 先说两句</h1><p>  前阵子因为大学用的小米笔记本屏幕坏了，所以买了个2K的显示器，外接给笔记本用。虽然日常用起来不卡，不过笔记本摸起来很烫，风扇经常呼啦呼啦地转，可能是盖起盖子影响了散热，也可能是以笔记本的性能带个2K显示器有点吃力，毕竟是个轻薄本吗。总之，我是迫不得已才剁手买电脑的，绝对不是因为笔记本打游戏太卡了的原因。</p><h1 id="配置说明"><a class="markdownIt-Anchor" href="#配置说明"></a> 配置说明</h1><table><thead><tr><th style="text-align:left">电脑配件</th><th style="text-align:left">型号</th><th style="text-align:left">价格</th></tr></thead><tbody><tr><td style="text-align:left">cpu</td><td style="text-align:left">AMD 3600x</td><td style="text-align:left">￥1366</td></tr><tr><td style="text-align:left">显卡</td><td style="text-align:left">还没买到</td><td style="text-align:left">￥105</td></tr><tr><td style="text-align:left">主板</td><td style="text-align:left">华硕重炮手B550M(带wifi)</td><td style="text-align:left">￥739</td></tr><tr><td style="text-align:left">内存</td><td style="text-align:left">金士顿骇客神条3600，8G×2</td><td style="text-align:left">￥689</td></tr><tr><td style="text-align:left">电源</td><td style="text-align:left">酷冷至尊sfx 650w</td><td style="text-align:left">￥878</td></tr><tr><td style="text-align:left">硬盘</td><td style="text-align:left">三星970 EVO Plus 500G + 西部数据SN550 1T</td><td style="text-align:left">￥649 + ￥749</td></tr><tr><td style="text-align:left">机箱</td><td style="text-align:left">酷鱼s5</td><td style="text-align:left">￥300</td></tr><tr><td style="text-align:left">散热器</td><td style="text-align:left">乔思伯CR-1400</td><td style="text-align:left">￥79</td></tr><tr><td style="text-align:left">风扇</td><td style="text-align:left">利民TL-C12S×2 + 乔思伯FR925×3</td><td style="text-align:left">￥179.8 +￥89.7</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">￥5823.5</td></tr></tbody></table><p>  趁着双11降价，除了显卡外（显卡涨地飞起，想再等等），其他电脑配件都买到了。第一次配电脑，瞎买的，感觉没配好，然后因为配的是itx电脑，所以性价比比较低。</p><p><img src="/images/other/assemble_computer/all_show.jpeg" alt="" /></p><h2 id="cpu"><a class="markdownIt-Anchor" href="#cpu"></a> CPU</h2><p>  CPU选的是AMD的3600X，因为双11降价，只花了￥1366，这个CPU感觉算性价比比较高，3700X和5600X感觉稍微有点贵了。</p><p><img src="/images/other/assemble_computer/CPU_3600X.jpeg" alt="" /></p><h2 id="显卡"><a class="markdownIt-Anchor" href="#显卡"></a> 显卡</h2><p>  这个不想说，因为比特币涨价的问题，显卡都被矿老板收走了，缺货特别严重。现在显卡已经涨得特别离谱，所以就花￥100块钱买了张二手GT450亮机卡凑合着用。</p><p><img src="/images/other/assemble_computer/GPU_GT450.jpeg" alt="" /></p><h2 id="主板"><a class="markdownIt-Anchor" href="#主板"></a> 主板</h2><p>  主板选的是华硕的B550M，没选B450M是因为微星和华硕的B450M都没wifi和蓝牙，而且不支持PCIE4（听说华硕的刷新BIOS后支持了），选华硕是因为华硕的灯光同步做的比较好。</p><p><img src="/images/other/assemble_computer/main_borde_case.jpeg" alt="" /></p><p>主板拆开以后是这样的：</p><p><img src="/images/other/assemble_computer/main_borde_open.jpeg" alt="" /></p><h2 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h2><p>  内存条选的是两根8G的金士顿的骇客神条3600，买金士顿是因为听说兼容性好，后期如果升级成4根的话可能会方便一点。</p><p><img src="/images/other/assemble_computer/RAM_case.jpeg" alt="" /></p><p><img src="/images/other/assemble_computer/RAM_show.jpeg" alt="" /></p><h2 id="电源"><a class="markdownIt-Anchor" href="#电源"></a> 电源</h2><p>  因为酷鱼s5只支持sfx电源，所以选了酷冷至尊的sfx 650w，海韵的太贵了，酷冷的这个相对便宜一点。一开始买的是550w，后来感觉不太够，找售后退了，换了650w的，这电源3070显卡应该也勉强扛得住。</p><p><img src="/images/other/assemble_computer/power_supply.jpeg" alt="" /></p><p>我买的是全模组的，送了一堆的线：</p><p><img src="/images/other/assemble_computer/power_wire.jpeg" alt="" /></p><h2 id="硬盘"><a class="markdownIt-Anchor" href="#硬盘"></a> 硬盘</h2><p>  一开始是打算买西部数据的SN750 500G作为系统盘的，后来发现三星970 EVO Plus 500G读写速度会快一点，而且也只贵了一点点，所以选了三星的。然后买一张西部数据SN550 1T作为数据盘。</p><p><img src="/images/other/assemble_computer/hard_disk_case.jpeg" alt="" /></p><p><img src="/images/other/assemble_computer/hard_disk_show.jpeg" alt="" /></p><h2 id="机箱"><a class="markdownIt-Anchor" href="#机箱"></a> 机箱</h2><p>  机箱看上了两款——先马趣造、酷鱼s5，这两款都是能装matx主板的小机箱，先马趣造稍微大一点，但是能装atx电源，因为只有黑色款的，感觉比较难看，最终还是选了酷鱼s5。后来我买了没多久，先马趣造就出了白色款了…，早知道就再等等了。机箱拆开是这样的：</p><p><img src="/images/other/assemble_computer/case.jpeg" alt="" /></p><p>这款机箱的特点是能装matx主板，不过做工一般，感觉不值这个价，而且不能走背线，装机难度相对先马趣造难一些。不说了，越说越后悔当时没再等等。</p><h2 id="散热器"><a class="markdownIt-Anchor" href="#散热器"></a> 散热器</h2><p>  买的是乔思伯CR-1400，买这个散热器是因为机箱限高135mm，符合这个高度还带RGB的就这款了，4热管压3600X是没问题的。</p><p><img src="/images/other/assemble_computer/heat_sink_case.jpeg" alt="" /></p><p><img src="/images/other/assemble_computer/heat_sink_show.jpeg" alt="" /></p><h2 id="风扇"><a class="markdownIt-Anchor" href="#风扇"></a> 风扇</h2><p>  机箱的顶部可以装两个9cm的风扇，尾部可以装一个9cm的风扇，底部可以装两个12cm的风扇进风。itx机箱散热稍微差一点，多装一些风扇会好一点，所以我选择都装上，<s>其实最主要是因为风扇有RGB</s>。买了两个利民的TL-C12S，3个乔思伯的FR925，因为主板上只有两个风扇的接口，所以买了两根风扇的一分三扩展线。</p><p><img src="/images/other/assemble_computer/fan.jpeg" alt="" /></p><hr/><p>配置大概就是这样的，接下来开始装机。</p><h1 id="装机"><a class="markdownIt-Anchor" href="#装机"></a> 装机</h1><h2 id="安装电源"><a class="markdownIt-Anchor" href="#安装电源"></a> 安装电源</h2><p>  根据这款机箱的设计，要先装电源再装主板，<s>没错，我就是顺序搞错了才知道的，</s>。<br />  先把机箱的玻璃侧板拆了，然后把尾部的风扇、顶部风扇支架、电源支架还有电源线都拆了，再给机箱顶部贴上防尘网（后面如果装了主板就不方便贴了）。然后用螺丝把电源固定在电源支架上，再把电源支架装回机箱里。固定电源的那个螺丝特别难对准，说到这我又后悔没买先马趣造了。</p><p><img src="/images/other/assemble_computer/step_1_1.jpeg" alt="" /></p><p><img src="/images/other/assemble_computer/step_1_2.jpeg" alt="" /></p><h2 id="安装cpu"><a class="markdownIt-Anchor" href="#安装cpu"></a> 安装CPU</h2><p>  把主板的CPU卡扣打开。CPU的四个角里，有一个角是标记过的，用来和主板对准，主板的CPU底座也有一个角是标记过的，把CPU和主板的这两个特殊的角对应好（在下面图里，这两个角是左上角），再把CPU放到底座上面就好了，然后把卡扣扣上。</p><p><img src="/images/other/assemble_computer/step_2_1.jpeg" alt="" /></p><p><img src="/images/other/assemble_computer/step_2_2.jpeg" alt="" /></p><h2 id="安装散热器"><a class="markdownIt-Anchor" href="#安装散热器"></a> 安装散热器</h2><p>  先把主板CPU附近的散热器卡扣螺丝拧下来，拆掉散热器卡扣，然后给装好的CPU涂上硅脂，一点点就好了，不用涂太均匀，等会散热器放上去会压均匀的，我第一次涂，涂的有点丑。</p><p><img src="/images/other/assemble_computer/step_3_1.jpeg" alt="" /></p><p>  把散热器拿出来，撕掉底部的膜，这个很重要，一定不要忘了撕膜。然后给散热器装上AMD的支架，一般散热器会配Intel和AMD的支架，注意不要装错了支架，不然装不到主板上。装好散热器支架后把散热器固定到主板上，拧螺丝的时候要注意，不要一个螺丝一次拧到底，要四个角的螺丝轮着来拧，每次拧一点，还有就是不要把螺丝拧太死，感觉能压住CPU也不会晃就可以了。</p><p><img src="/images/other/assemble_computer/step_3_2.jpeg" alt="" /></p><h2 id="安装内存条"><a class="markdownIt-Anchor" href="#安装内存条"></a> 安装内存条</h2><p>  matx的主板一般有4个内存条卡槽，如果是装两个内存条的话，装在第2和第4槽会好一点。先把主板的内存条卡扣打开，然后把内存条按进去，内存条上有防呆口，方向反了的话是按不进去的，按的时候卡扣会自动扣上，等完全扣上说明内存条装好了。</p><p><img src="/images/other/assemble_computer/step_4_1.jpeg" alt="" /></p><h2 id="安装主板"><a class="markdownIt-Anchor" href="#安装主板"></a> 安装主板</h2><p>  安装主板比较头疼的就是接线了，因为主板上的接口比较多，不百度不看说明书的话，根本不知道怎么接。</p><p>  先把主板的CPU供电线和主板供电线接上。华硕的这款主板CPU供电线在左上角，CPU供电线不同的主板可能会不同，一般是两个4pin并在一起的。主板供电线在内存条右边，主板的供电限比较好认，最大的那个24pin的就是了。</p><p>  然后把主板的IO挡板装到机箱的尾部，把主板放进机箱。一般机箱和主板之间都会有一些空隙，防止主板和机箱金属接触，造成短路，这部分空隙可以用来走线，也就是走背线，可以把CPU的供电线从主板上面引到主板背面，然后再从背面引到电源的接口附近，这样可以减少主板上面空间的占用，而且也更好看一点。主板的供电线因为太多了，我的这个机箱不方便走背线。放好主板后把主板的固定螺丝拧紧就好了。</p><p>  最后把机箱的电源开关线、USB外接线接到主板上，不同的主板接口位置可能会不同，具体要看说明书。最后装好是这样的：</p><p><img src="/images/other/assemble_computer/step_5_1.jpeg" alt="" /></p><h2 id="安装硬盘"><a class="markdownIt-Anchor" href="#安装硬盘"></a> 安装硬盘</h2><p>  把主板上硬盘的固定螺丝拆下来，然后把硬盘装上去，再把螺丝拧回去就好了，这个比较简单。</p><p><img src="/images/other/assemble_computer/step_6_1.jpeg" alt="" /></p><h2 id="安装风扇"><a class="markdownIt-Anchor" href="#安装风扇"></a> 安装风扇</h2><p>  因为我的风扇是带灯的，所以每个风扇有两个线要连，一个是给风扇供电的，一个是控制风扇的RGB灯的。华硕的这款主板只有两个风扇的供电接口，我这里加上散热器上的风扇，一共有6个风扇，两根一分三的扩展线刚刚好能给所有风扇供电。装好以后感觉线太乱了，所以把线用扎带绑了一下，稍微理得好看了一点，最后是这样的：</p><p><img src="/images/other/assemble_computer/step_7_1.jpeg" alt="" /></p><h2 id="安装显卡"><a class="markdownIt-Anchor" href="#安装显卡"></a> 安装显卡</h2><p>  把主板上的显卡卡槽打开，然后把显卡对准，摁进去，然后用螺丝把显卡和机箱尾部的PCIE挡板固定，把其他不用的PCIE挡板用防尘板挡住，防止进灰。华硕的这款主板，显卡是插在第2个的PCIE卡槽上的，然后因为底部风扇把第4个PCIE卡槽的空间给占用了，所以如果要插太厚的显卡要把底部的风扇给拆下来才行，微星的B550M显卡是插第一个PCIE卡槽上的，不会有这个问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说两句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先说两句&quot;&gt;&lt;/a&gt; 先说两句&lt;/h1&gt;
&lt;p&gt;  前阵子因为大学用的小米笔记本屏幕坏了，所以买了个2K的显示器，外接给笔记本用。虽然日常用起来不卡，不过笔记本摸起来很烫，风扇经常</summary>
      
    
    
    
    <category term="其他" scheme="http://ganyuo.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="电脑" scheme="http://ganyuo.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
    <category term="装机" scheme="http://ganyuo.github.io/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>新买的捷安特ATX830自行车</title>
    <link href="http://ganyuo.github.io/other/new_bicycle_ATX830/"/>
    <id>http://ganyuo.github.io/other/new_bicycle_ATX830/</id>
    <published>2020-09-15T13:00:00.000Z</published>
    <updated>2025-03-06T06:48:01.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说两句"><a class="markdownIt-Anchor" href="#先说两句"></a> 先说两句</h1><p>  很久以前就想买一辆自行车了，奈何<s>没钱</s>家境贫寒，一直没买，前段时间坐公交上班的时候，经常因为堵车迟到，所以就决定去买一辆来代步。本来想买辆便宜点的喜德盛，后来被某有钱人<s>建议</s>怂恿，就选了捷安特。<br />  昨天去专卖店里买的，买这种品牌自行车还是去正规专卖店好，以后可以免费保养，售后会好一点。我对自行车不太懂，因为是用来上下班，店长就向我推荐了两款，ATX810和ATX830。考虑到ATX810飞轮是8速的（店长说9速的稳定性比8速的好很多），而且这两款价格相差不太大，所以最终选这款ATX830，价格￥2489，它的详细配置如下。</p><table><thead><tr><th style="text-align:left">部件</th><th style="text-align:left">型号</th></tr></thead><tbody><tr><td style="text-align:left">车架</td><td style="text-align:left">GIANT ATX8 ALUXX铝合金车架</td></tr><tr><td style="text-align:left">前叉</td><td style="text-align:left">铝合金线控锁死避震前叉</td></tr><tr><td style="text-align:left">车把</td><td style="text-align:left">GIANT 31.8铝合金直把</td></tr><tr><td style="text-align:left">车首竖杆</td><td style="text-align:left">铝合金竖杆</td></tr><tr><td style="text-align:left">座垫杆</td><td style="text-align:left">铝合金座垫杆</td></tr><tr><td style="text-align:left">座垫</td><td style="text-align:left">GIANT运动座垫</td></tr><tr><td style="text-align:left">变速把手</td><td style="text-align:left">标配小副把</td></tr><tr><td style="text-align:left">前变速器</td><td style="text-align:left">27S</td></tr><tr><td style="text-align:left">后变速器</td><td style="text-align:left">27S</td></tr><tr><td style="text-align:left">刹车</td><td style="text-align:left">油压碟刹</td></tr><tr><td style="text-align:left">大齿盘</td><td style="text-align:left">锻造铝腿22/30/40T大齿盘</td></tr><tr><td style="text-align:left">轮胎</td><td style="text-align:left">GIANT QUICKCROSS 27.5x1.95 30TPI山地轮胎</td></tr><tr><td style="text-align:left">轮组</td><td style="text-align:left">GAINT 双层铝合金轮圈 + GIANT 铝合金培林花鼓</td></tr></tbody></table><p>  店里有3种颜色选择，橙色、黑色和灰色，个人不喜欢灰色，橙色也不是很喜欢的颜色，<s>如果有粉色就好了</s>，最终选了黑色，整体的样子就是下面这张图片的样子。</p><p><img src="/images/other/new_bicycle_ATX830/IMG_2892.JPG" alt="" /></p><h1 id="车架"><a class="markdownIt-Anchor" href="#车架"></a> 车架</h1><p>  型号是<code>GIANT ATX8 ALUXX铝合金车架</code>，这个是ALUXX是捷安特的铝合金车架成型技术，网上说是入门级的，更高端的还有ALUXX SL和ALUXX SLR，貌似比ALUXX更轻一点。整体感觉不重，但也不算轻，铝合金的车架要比碳纤维的稍微重一点，车架是内走线的，刹车线从车架里面传到变速器和后刹车。</p><p><img src="/images/other/new_bicycle_ATX830/IMG_2894.JPG" alt="" /></p><h1 id="前叉"><a class="markdownIt-Anchor" href="#前叉"></a> 前叉</h1><p>  这个前叉应该是前面减震的这个东西，这款是可以用线控器锁住减震的，店长说上坡的时候锁住会好骑一点。</p><p><img src="/images/other/new_bicycle_ATX830/IMG_2889.JPG" alt="" /></p><h1 id="车把和车首竖杆"><a class="markdownIt-Anchor" href="#车把和车首竖杆"></a> 车把和车首竖杆</h1><p>  都是铝合金的，车把有副把，如果路况比较好，不怎么刹车的话，可以用副把来骑，减轻手腕的酸痛。车把上左右各一个变速器和刹车器，还有锁住前叉的线控器和铃铛。</p><p><img src="/images/other/new_bicycle_ATX830/handlebar.JPG" alt="" /></p><h1 id="刹车"><a class="markdownIt-Anchor" href="#刹车"></a> 刹车</h1><p>  油压碟刹的，比机械碟刹的好一点，具体不太懂，店长说刹车的碟片来令片不能碰到油，会影响刹车的制动力。</p><h1 id="大齿盘"><a class="markdownIt-Anchor" href="#大齿盘"></a> 大齿盘</h1><p>  锻造铝腿22/30/40T大齿盘。</p><p><img src="/images/other/new_bicycle_ATX830/IMG_2882.JPG" alt="" /></p><h1 id="飞轮"><a class="markdownIt-Anchor" href="#飞轮"></a> 飞轮</h1><p>  9速的，不太懂，店长说骑的时候多变速可以减轻链条对飞轮片的磨损，增加自行车的使用寿命。</p><p><img src="/images/other/new_bicycle_ATX830/IMG_2878.JPG" alt="" /></p><h1 id="轮组"><a class="markdownIt-Anchor" href="#轮组"></a> 轮组</h1><p>  轮组是自行车里比较重要的部分，我这款用的是<code>GAINT 双层铝合金轮圈 + GIANT 铝合金培林花鼓</code>，不太懂，对于我这种用来上下班的来说，应该算还不错吧。</p><h1 id="轮胎"><a class="markdownIt-Anchor" href="#轮胎"></a> 轮胎</h1><p>  轮胎用的是27.5x1.95的，店长建议车胎内压力在40~60psi之间会好一点。</p><h1 id="座垫和座垫杆"><a class="markdownIt-Anchor" href="#座垫和座垫杆"></a> 座垫和座垫杆</h1><p>  座垫坐起来感觉还不错，座垫杆这里经过特殊处理，可以增加座垫杆和车架的摩擦，防止坐垫滑动。店长帮我在坐垫下面装了个尾灯，晚上骑行会安全一点。</p><p><img src="/images/other/new_bicycle_ATX830/IMG_2885.JPG" alt="" /></p><h1 id="车锁"><a class="markdownIt-Anchor" href="#车锁"></a> 车锁</h1><p>  这个车锁是比较有意思的，见下图，店长说这个锁防液压剪，价格￥338感觉有点小贵。</p><p><img src="/images/other/new_bicycle_ATX830/lock.jpg" alt="" /></p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>  我个人感觉这辆车整体来说还不错，从店里到家一个骑了7公里多的路，没感觉到累，骑起来挺轻松的，自行车和各种配件一共￥3282。可惜天气预报显示这周会一直下雨，没法骑这这辆自行车去上班了，还是要坐公交，去淘宝上买个<s>浴衣</s>雨衣吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先说两句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先说两句&quot;&gt;&lt;/a&gt; 先说两句&lt;/h1&gt;
&lt;p&gt;  很久以前就想买一辆自行车了，奈何&lt;s&gt;没钱&lt;/s&gt;家境贫寒，一直没买，前段时间坐公交上班的时候，经常因为堵车迟到，所以就决定去买</summary>
      
    
    
    
    <category term="其他" scheme="http://ganyuo.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="自行车" scheme="http://ganyuo.github.io/tags/%E8%87%AA%E8%A1%8C%E8%BD%A6/"/>
    
    <category term="骑行" scheme="http://ganyuo.github.io/tags/%E9%AA%91%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>UVA-796 Critical Links</title>
    <link href="http://ganyuo.github.io/acm/uva_796/"/>
    <id>http://ganyuo.github.io/acm/uva_796/</id>
    <published>2020-08-31T10:00:00.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=737" target="_blank" rel="noopener">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=737</a></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  给出一张无向图，求图的割边。</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  大致的思路和求图的割点类似，用tarjan算法解决。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) (a &lt; b) ? a : b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">&#125; edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.a != b.a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.a &lt; b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.b &lt; b.b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, bn;</span><br><span class="line">node e[<span class="number">2</span> * MAX_N * MAX_N];</span><br><span class="line">edge bridge[MAX_N];</span><br><span class="line"><span class="keyword">int</span> head[MAX_N];</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N], v_ind;</span><br><span class="line"><span class="keyword">int</span> low[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, b;</span><br><span class="line"></span><br><span class="line">vis[v] = v_ind;</span><br><span class="line">low[v] = v_ind;</span><br><span class="line">v_ind++;</span><br><span class="line"><span class="keyword">for</span>(i = head[v]; i != <span class="number">-1</span>; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">b = e[i].b;</span><br><span class="line"><span class="keyword">if</span>(vis[b] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(b, v);</span><br><span class="line">low[v] = min(low[v], low[b]);</span><br><span class="line"><span class="keyword">if</span>(low[b] &gt; vis[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">bridge[bn].a = v;</span><br><span class="line">bridge[bn].b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">bridge[bn].a = b;</span><br><span class="line">bridge[bn].b = v;</span><br><span class="line">&#125;</span><br><span class="line">bn++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b != pre)</span><br><span class="line">&#123;</span><br><span class="line">low[v] = min(low[v], vis[b]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, k, b;</span><br><span class="line"><span class="keyword">int</span> i, j, en;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">en = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d (%d)"</span>, &amp;a, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">e[en].b = b;</span><br><span class="line">e[en].next = head[a];</span><br><span class="line">head[a] = en;</span><br><span class="line">en++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bn = <span class="number">0</span>;</span><br><span class="line">v_ind = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(i, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::sort(bridge, bridge + bn, cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d critical links\n"</span>, bn);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; bn; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d - %d\n"</span>, bridge[i].a, bridge[i].b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h1&gt;
&lt;p&gt;  &lt;a href=&quot;https://onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;</summary>
      
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="tarjan算法" scheme="http://ganyuo.github.io/tags/tarjan%E7%AE%97%E6%B3%95/"/>
    
    <category term="连通图" scheme="http://ganyuo.github.io/tags/%E8%BF%9E%E9%80%9A%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>UVA-315 Network</title>
    <link href="http://ganyuo.github.io/acm/uva_315/"/>
    <id>http://ganyuo.github.io/acm/uva_315/</id>
    <published>2020-08-06T06:34:00.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=251" target="_blank" rel="noopener">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=251</a></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  给出一张无向图，求图中割点的个数。割点是指删除该点后，其他点之间的连通性会受到影响的点。</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  用tarjan算法来解决，这题的输入有点麻烦，因为输入的问题runtime error了好几次。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* https://cn.vjudge.net/contest/67418#problem/B */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) (a &lt; b) ? a : b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N], vis_n;</span><br><span class="line"><span class="keyword">int</span> low[MAX_N];</span><br><span class="line"><span class="keyword">int</span> is_ctp[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, child = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">vis[v] = vis_n;</span><br><span class="line">low[v] = vis_n;</span><br><span class="line">vis_n++;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[v][i] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(i, root);</span><br><span class="line">low[v] = min(low[v], low[i]);</span><br><span class="line"><span class="keyword">if</span>(v == root)</span><br><span class="line">&#123;</span><br><span class="line">child++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(low[i] &gt;= vis[v])</span><br><span class="line">&#123;</span><br><span class="line">is_ctp[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">low[v] = min(low[v], vis[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(v == root &amp;&amp; child &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">is_ctp[root] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a, b, ans;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a) != EOF &amp;&amp; a != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(getchar() != <span class="string">'\n'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">mp[a][b] = <span class="number">1</span>;</span><br><span class="line">mp[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(is_ctp, <span class="number">0</span>, <span class="keyword">sizeof</span>(is_ctp));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis_n = <span class="number">1</span>;</span><br><span class="line">tarjan(i, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_ctp[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h1&gt;
&lt;p&gt;  &lt;a href=&quot;https://onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;</summary>
      
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="tarjan算法" scheme="http://ganyuo.github.io/tags/tarjan%E7%AE%97%E6%B3%95/"/>
    
    <category term="连通图" scheme="http://ganyuo.github.io/tags/%E8%BF%9E%E9%80%9A%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图像的灰度变换</title>
    <link href="http://ganyuo.github.io/image_processing/gray_transformation/"/>
    <id>http://ganyuo.github.io/image_processing/gray_transformation/</id>
    <published>2020-07-16T06:32:00.000Z</published>
    <updated>2025-03-06T06:48:01.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h1><p>  灰度变换是所有图像处理技术中最简单的技术，输出图像在点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>处的像素值仅取决于原图在点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>处的像素值。可以用公式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s = T(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>表示，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>分别表示处理前后的像素值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>是把像素值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>映射到像素值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>的一种变换。<br />  因为处理的是数字量，所以变换函数的值通常存储在一个一维阵列里，从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>的映射是通过查表实现的。对于8位的灰度图，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>包含256个灰度值的映射。<br />  图像增强常用的三类变换函数是：线性变换、对数变换、幂律变换。</p><h1 id="反转变换"><a class="markdownIt-Anchor" href="#反转变换"></a> 反转变换</h1><p>  这个比较简单，对于一张灰度级范围为[0, L - 1]的图像，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>就等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>−</mo><mn>1</mn><mo>−</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">L - 1 - r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>，用公式表示是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mi>L</mi><mo>−</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">s = L - r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>。<br />  使用这种变换方式可以反转一幅图像的灰度值，得到类似照片底片的效果。</p><h1 id="对数变换"><a class="markdownIt-Anchor" href="#对数变换"></a> 对数变换</h1><p>  对数变换的通用公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mo>=</mo><mi>c</mi><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s = c\log(1 + r) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></p><p>  式中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>是常数，并假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">r&gt;=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。对数变换和反对数变换的曲线如下所示，蓝色曲线代表对数变换，橙色曲线代表反对数变换（图上反对数变换的公式有点看不清，是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><msup><mi>e</mi><mfrac><mi>r</mi><mi>c</mi></mfrac></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">s=e^{\frac{r}{c}} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9304100000000001em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.84708em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>），c的取值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>L</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{L - 1}{T(L - 1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。对数变换将输入中范围较窄的低灰度值映射为输出中范围较宽的灰度值，将输入中范围较宽的高灰度值映射为输出中范围较窄的灰度值。使用这种类型的变换来扩展图像中的暗像素值，同时压缩更高灰度级的值。反对数变换的作用则相反。<br /><img src="/images/image_processing/gray_transformation/logarithmic_transformation.png" alt="" title="对数变换和反对数变换" /></p><h1 id="幂律变换"><a class="markdownIt-Anchor" href="#幂律变换"></a> 幂律变换</h1><p>  幂律变换也叫伽马变换，它的通用公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mo>=</mo><mi>c</mi><msup><mi>r</mi><mi>γ</mi></msup></mrow><annotation encoding="application/x-tex">s = cr^{\gamma} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.714392em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>  式中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>是常数。不同<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>值的幂律变换曲线如下所示。<br /><img src="/images/image_processing/gray_transformation/exponential_transform.png" alt="" title="幂律变换" /></p><h1 id="分段线性变换函数"><a class="markdownIt-Anchor" href="#分段线性变换函数"></a> 分段线性变换函数</h1><p>  分段线性变换函数和名字描述的一样，就是按照不同的范围段，用线性函数进行变换。其优点是形式可以任意复杂，缺点是函数要人为调整。</p><h2 id="对比度拉伸"><a class="markdownIt-Anchor" href="#对比度拉伸"></a> 对比度拉伸</h2><p>  对比度拉伸是最简单的分段线性变换之一，对比度拉伸是扩展图像灰度级动态范围的处理，因此可以跨越记录介质和显示装置的全部灰度范围。下图是一个对比度拉伸的典型函数图像。<br /><img src="/images/image_processing/gray_transformation/contrast_stretch.png" alt="" title="对比度拉伸" /></p><p>  通过变换后，灰度值在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[r_1, r_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>范围内的像素会线性拉伸到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[s_1, s_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>范围内，最终的结果是在范围<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[r_1, r_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>内会增强对比度，其他范围内的对比度会降低。</p><h2 id="灰度级分层"><a class="markdownIt-Anchor" href="#灰度级分层"></a> 灰度级分层</h2><p>  用于突出图像中特定范围的亮度，可以用来增强某些特征。给个书上的例图吧，不想码字了！<br /><img src="/images/image_processing/gray_transformation/grayscale_stratification.png" alt="" title="灰度级分层" /></p><h2 id="比特平面分层"><a class="markdownIt-Anchor" href="#比特平面分层"></a> 比特平面分层</h2><p>  对于8比特的灰度图，每个像素由8个比特位构成，如果把图像上所有像素的特定位置的比特位单独拿出来，就可以构成一张只包含0和1的二值图像，该图像就叫原图像的比特平面。比如取每个像素中8个比特位的第7个比特位，构成该图像的第7比特平面。<br />  一幅图像中高位的比特平面包含了视觉上很重要的大多数数据，低位的比特平面则展现了图像更精细的灰度细节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h1&gt;
&lt;p&gt;  灰度变换是所有图像处理技术中最简单的技术，输出图像在点&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-math</summary>
      
    
    
    
    <category term="图像处理" scheme="http://ganyuo.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://ganyuo.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ_1236 Network of Schools</title>
    <link href="http://ganyuo.github.io/acm/poj_1236/"/>
    <id>http://ganyuo.github.io/acm/poj_1236/</id>
    <published>2020-07-08T03:40:00.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="http://poj.org/problem?id=1236" target="_blank" rel="noopener">http://poj.org/problem?id=1236</a></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  有N个学校用一些单向的网络连接一起，每个学校得到一套软件后，可以通过单向网络向周边的学校传输。<br />  问题1：初始至少需要向多少个学校发放软件，使得网络内所有的学校最终都能得到软件。<br />  问题2：至少需要添加几条传输线路，使任意向一个学校发放软件后，经过若干次传送，网络内所有的学校最终都能得到软件。</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  将学校当做点，网络线路当做边，得到一个有向图，算出这个图里所有的强连通分量。因为同一个强连通分量之间的任意两点可以互相连通，所以向一个点发送软件后，与这个点同属于一个强连通分量的点都能收到软件。可以将每个强连通分量都假设为一个点，然后算出所有强连通分量的入度和出度，假设入度为0的强连通分量的个数为d_in0，出度为0的强连通分量的个数为d_out0。问题1的答案等于d_in0；当强连通分量的个数为1时，问题2的答案等于0，当强连通分量的个数大于1时，问题2的答案等于max(d_in0, d_out0)。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* AC 0MS 356K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N], <span class="keyword">vis_t</span>;</span><br><span class="line"><span class="keyword">int</span> st[MAX_N], st_top;</span><br><span class="line"><span class="keyword">int</span> in_st[MAX_N];</span><br><span class="line"><span class="keyword">int</span> low[MAX_N];</span><br><span class="line"><span class="keyword">int</span> belong[MAX_N], ccn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k;</span><br><span class="line"></span><br><span class="line">vis[v] = <span class="keyword">vis_t</span>;</span><br><span class="line">low[v] = <span class="keyword">vis_t</span>;</span><br><span class="line"><span class="keyword">vis_t</span>++;</span><br><span class="line">st_top++;</span><br><span class="line">st[st_top] = v;</span><br><span class="line">in_st[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[v][i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(i);</span><br><span class="line"><span class="keyword">if</span>(low[v] &gt; low[i])</span><br><span class="line">&#123;</span><br><span class="line">low[v] = low[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(in_st[i] == <span class="number">1</span> &amp;&amp; low[v] &gt; vis[i])</span><br><span class="line">&#123;</span><br><span class="line">low[v] = vis[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[v] == vis[v])</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(k != v)</span><br><span class="line">&#123;</span><br><span class="line">k = st[st_top];</span><br><span class="line">st_top--;</span><br><span class="line">in_st[k] = <span class="number">0</span>;</span><br><span class="line">belong[k] = ccn;</span><br><span class="line">&#125;</span><br><span class="line">ccn++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> d_in0, d_out0;</span><br><span class="line"><span class="keyword">int</span> d_in[MAX_N], d_out[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k) != EOF &amp;&amp; k !=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][k - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算强连通分量 */</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(in_st, <span class="number">0</span>, <span class="keyword">sizeof</span>(in_st));</span><br><span class="line">ccn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">st_top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">vis_t</span> = <span class="number">1</span>;</span><br><span class="line">tarjan(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算每个强连通分量的入度和出度 */</span></span><br><span class="line"><span class="built_in">memset</span>(d_in, <span class="number">0</span>, <span class="keyword">sizeof</span>(d_in));</span><br><span class="line"><span class="built_in">memset</span>(d_out, <span class="number">0</span>, <span class="keyword">sizeof</span>(d_out));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] == <span class="number">1</span> &amp;&amp; belong[i] != belong[j])</span><br><span class="line">&#123;</span><br><span class="line">d_in[belong[j]]++;</span><br><span class="line">d_out[belong[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d_in0 = <span class="number">0</span>;</span><br><span class="line">d_out0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ccn; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d_in[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">d_in0++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d_out[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">d_out0++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ccn == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1\n0\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, d_in0, (d_in0 &gt; d_out0) ? d_in0 : d_out0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h1&gt;
&lt;p&gt;  &lt;a href=&quot;http://poj.org/problem?id=1236&quot; target=&quot;_blank&quot; rel=&quot;noopener</summary>
      
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="poj" scheme="http://ganyuo.github.io/tags/poj/"/>
    
    <category term="强连通分量" scheme="http://ganyuo.github.io/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>图像的几何空间变换</title>
    <link href="http://ganyuo.github.io/image_processing/space_transformation/"/>
    <id>http://ganyuo.github.io/image_processing/space_transformation/</id>
    <published>2020-07-03T01:54:55.000Z</published>
    <updated>2025-03-07T01:58:02.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h1><p>  图像的几何空间变换可以改进图像中像素间的空间关系，主要由两个基本操作组成：</p><ul><li>坐标空间的变换。</li><li>图像内插，对空间变换后的像素赋值。</li></ul><h2 id="空间坐标变换"><a class="markdownIt-Anchor" href="#空间坐标变换"></a> 空间坐标变换</h2><p>  可由下式表示：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">(x, y) = T\{(v, w)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">{</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span></span></p><p>  上式中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v, w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span>是原图中像素的坐标，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>是变换后图像的坐标，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>是变换函数，也就是原图中某个位置的像素通过变换函数，映射到目标图像中。比如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mrow><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>v</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo separator="true">,</mo><mi>w</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y) = T{(v, w)} = (v/2, w/2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">/</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span></span></span></span>表示在两个方向上将原图缩小一半。</p><h2 id="图像内插"><a class="markdownIt-Anchor" href="#图像内插"></a> 图像内插</h2><p>  请参考我的另一篇博文<a href="/image_processing/interpolation/">图像内插</a>。</p><h1 id="仿射变换"><a class="markdownIt-Anchor" href="#仿射变换"></a> 仿射变换</h1><p>  仿射变换是最常用的空间坐标变换之一，其一般形式如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>v</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>w</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi>T</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>v</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>w</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mn>31</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mn>32</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} x &amp; y &amp; 1 \end{matrix}\right] = \left[\begin{matrix} v &amp; w &amp; 1 \end{matrix}\right]T = \left[\begin{matrix} v &amp; w &amp; 1 \end{matrix}\right]\left[\begin{matrix}t_{11} &amp; t_{12} &amp; 0 \\t_{21} &amp; t_{22} &amp; 0 \\t_{31} &amp; t_{32} &amp; 1\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>  上式中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>表示变换矩阵，可根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>中元素所选择的值，对一组坐标点做尺度、旋转、平移或偏移。</p><table><thead><tr><th style="text-align:center">变换名称</th><th style="text-align:center">变换矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></th><th style="text-align:center">坐标公式</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">恒等变换</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>v</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">x = v \\ y = w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></td><td style="text-align:center"><img src="/images/image_processing/space_transformation/affine_t_1.png" alt="" /></td></tr><tr><td style="text-align:center">尺度变换</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} c_x &amp; 0 &amp; 0 \\ 0 &amp; c_y &amp; 0 \\ 0 &amp; 0 &amp; 1\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>c</mi><mi>x</mi></msub><mi>v</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><msub><mi>c</mi><mi>y</mi></msub><mi>w</mi></mrow><annotation encoding="application/x-tex">x = c_x v \\ y = c_y w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></td><td style="text-align:center"><img src="/images/image_processing/space_transformation/affine_t_2.png" alt="" /></td></tr><tr><td style="text-align:center">平移变换</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ t_x &amp; t_y &amp; 1\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>v</mi><mo>+</mo><msub><mi>t</mi><mi>x</mi></msub><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mi>w</mi><mo>+</mo><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">x = v + t_x \\ y = w + t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><img src="/images/image_processing/space_transformation/affine_t_3.png" alt="" /></td></tr><tr><td style="text-align:center">旋转变换</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} \cos\theta &amp; \sin\theta &amp; 0 \\ -\sin\theta &amp; \cos\theta &amp; 0 \\ 0 &amp; 0 &amp; 1\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>v</mi><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo>−</mo><mi>w</mi><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mi>v</mi><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mo>+</mo><mi>w</mi><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">x = v\cos\theta - w\sin\theta \\ y = v\sin\theta + w\cos\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></td><td style="text-align:center"><img src="/images/image_processing/space_transformation/affine_t_4.png" alt="" /></td></tr><tr><td style="text-align:center">垂直偏移变换</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>h</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} 1 &amp; s_h &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>v</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mi>w</mi><mo>+</mo><msub><mi>s</mi><mi>h</mi></msub><mi>v</mi></mrow><annotation encoding="application/x-tex">x = v \\ y = w + s_hv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></td><td style="text-align:center"><img src="/images/image_processing/space_transformation/affine_t_5.png" alt="" /></td></tr><tr><td style="text-align:center">水平偏移变换</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>v</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} 1 &amp; 0 &amp; 0 \\ s_v &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>v</mi><mo>+</mo><msub><mi>s</mi><mi>v</mi></msub><mi>w</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">x = v + s_vw \\ y = w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></td><td style="text-align:center"><img src="/images/image_processing/space_transformation/affine_t_6.png" alt="" /></td></tr></tbody></table><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><p>  实现空间变换的方法有两种：</p><ul><li><strong>前向映射</strong>：整体思想是扫描原图像，对于原图像上的每个像素，根据它在原图中的坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v, w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span>，利用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">(x, y) = T\{(v, w)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">{</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span>计算其在目标图像上的坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，然后将原图中坐标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v, w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span>的像素值赋值给目标图像中坐标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>的像素。</li><li><strong>反向映射</strong>：整体思想是扫描目标图像的每个像素，对于坐标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>的像素，利用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">(v, w) = T^{-1}\{(x, y)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span>计算其在原图像上的坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v, w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span>，然后用内插的方法计算该像素的值。<br />  这里<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">T^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>表示变换函数的反函数，对于仿射变换来说，相当于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{matrix} x &amp; y &amp; 1 \end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span>乘变换矩阵的逆矩阵。</li></ul><p>  使用前向映射可能会存在两个问题，一个是原图像中多个像素被变换到目标图像的同一个位置，产生冲突，另一个问题是计算出的目标像素坐标不存在，比如不是个整数坐标。而反向映射不存在这两个问题，因此反向映射用的多一点。<br />  这里给出用反向映射实现仿射变换的C++代码，代码用的是opencv库处理图像。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原图路径 */</span></span><br><span class="line"><span class="keyword">char</span> img_path[<span class="number">100</span>] = <span class="string">"img/affine.png"</span>;</span><br><span class="line"><span class="comment">/* 变换后图像的大小 */</span></span><br><span class="line">Size img_out_size = &#123;<span class="number">300</span>, <span class="number">300</span>&#125;;</span><br><span class="line"><span class="comment">/* 仿射矩阵 */</span></span><br><span class="line"><span class="keyword">double</span> T[<span class="number">3</span>][<span class="number">3</span>] = </span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 利用双线性内插计算原图中的浮点像素值 */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bilinear_interpolation</span><span class="params">(Mat src, <span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt; src.cols || y &lt; <span class="number">0</span> || y &gt; src.rows)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表示在原图中与浮点像素最近的四个整数坐标值(lx:左x、rx:右x、uy:上y、dy:下y) */</span></span><br><span class="line"><span class="keyword">double</span> lx = (<span class="keyword">int</span>)x;</span><br><span class="line"><span class="keyword">double</span> rx = lx + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> uy = (<span class="keyword">int</span>)y;</span><br><span class="line"><span class="keyword">double</span> dy = uy + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 先计算y方向的两个像素点值f1、f2，再计算xy两个方向上的像素点值 */</span></span><br><span class="line"><span class="keyword">double</span> f1 = (rx - x) * src.at&lt;uchar&gt;(uy, lx) + (x - lx) * src.at&lt;uchar&gt;(uy, rx);</span><br><span class="line"><span class="keyword">double</span> f2 = (rx - x) * src.at&lt;uchar&gt;(dy, lx) + (x - lx) * src.at&lt;uchar&gt;(dy, rx);</span><br><span class="line"><span class="keyword">double</span> xy = (dy - y) * f1 + (y - uy) * f2;</span><br><span class="line"><span class="keyword">return</span> xy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">Mat src = imread(img_path, cv::IMREAD_GRAYSCALE);</span><br><span class="line">src.rows -= <span class="number">2</span>;</span><br><span class="line">Mat dst = Mat(img_out_size, src.type());</span><br><span class="line"></span><br><span class="line">Mat t_s = Mat(<span class="number">3</span>, <span class="number">3</span>, CV_64FC1, T);</span><br><span class="line">Mat t_inv = Mat(<span class="number">3</span>, <span class="number">3</span>, CV_64FC1);</span><br><span class="line">invert(t_s, t_inv); <span class="comment">// t_inv为仿射矩阵的逆矩阵</span></span><br><span class="line"></span><br><span class="line">Mat src_vec, dst_vec;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; dst.rows; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; dst.cols; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 目标图像的坐标向量 */</span></span><br><span class="line">dst_vec = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">3</span>) &lt;&lt; j, i, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* 计算dst_vec对应于原图中的坐标向量src_vec */</span></span><br><span class="line">src_vec = dst_vec * t_inv;</span><br><span class="line"><span class="comment">/* 计算目标图像的浮点像素值 */</span></span><br><span class="line">dst.at&lt;uchar&gt;(i, j) = (uchar)bilinear_interpolation(src, src_vec.at&lt;<span class="keyword">double_t</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), src_vec.at&lt;<span class="keyword">double_t</span>&gt;(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">"dst"</span>, dst);</span><br><span class="line">imwrite(<span class="string">"img/t_1.png"</span>, dst);</span><br><span class="line"></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h1&gt;
&lt;p&gt;  图像的几何空间变换可以改进图像中像素间的空间关系，主要由两个基本操作组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坐标空间的变换。&lt;/li&gt;
&lt;li&gt;图</summary>
      
    
    
    
    <category term="图像处理" scheme="http://ganyuo.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="图像处理" scheme="http://ganyuo.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="opencv" scheme="http://ganyuo.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>HDU_4081 Qin Shi Huangs National Road System</title>
    <link href="http://ganyuo.github.io/acm/hdu_4081/"/>
    <id>http://ganyuo.github.io/acm/hdu_4081/</id>
    <published>2020-06-19T11:00:07.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4081" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4081</a></p><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><blockquote><p>  During the Warring States Period of ancient China(476 BC to 221 BC), there were seven kingdoms in China ---- they were Qi, Chu, Yan, Han, Zhao, Wei and Qin. Ying Zheng was the king of the kingdom Qin. Through 9 years of wars, he finally conquered all six other kingdoms and became the first emperor of a unified China in 221 BC. That was Qin dynasty ---- the first imperial dynasty of China(not to be confused with the Qing Dynasty, the last dynasty of China). So Ying Zheng named himself “Qin Shi Huang” because “Shi Huang” means “the first emperor” in Chinese.<br />  Qin Shi Huang undertook gigantic projects, including the first version of the Great Wall of China, the now famous city-sized mausoleum guarded by a life-sized Terracotta Army, and a massive national road system. There is a story about the road system:<br />  There were n cities in China and Qin Shi Huang wanted them all be connected by n-1 roads, in order that he could go to every city from the capital city Xianyang.<br />  Although Qin Shi Huang was a tyrant, he wanted the total length of all roads to be minimum,so that the road system may not cost too many people’s life. A daoshi (some kind of monk) named Xu Fu told Qin Shi Huang that he could build a road by magic and that magic road would cost no money and no labor. But Xu Fu could only build ONE magic road for Qin Shi Huang. So Qin Shi Huang had to decide where to build the magic road. Qin Shi Huang wanted the total length of all none magic roads to be as small as possible, but Xu Fu wanted the magic road to benefit as many people as possible ---- So Qin Shi Huang decided that the value of A/B (the ratio of A to B) must be the maximum, which A is the total population of the two cites connected by the magic road, and B is the total length of none magic roads.<br />  Would you help Qin Shi Huang?<br />  A city can be considered as a point, and a road can be considered as a line segment connecting two points.</p></blockquote><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h2><blockquote><p>  The first line contains an integer t meaning that there are t test cases(t &lt;= 10).<br />  For each test case:<br />  The first line is an integer n meaning that there are n cities(2 &lt; n &lt;= 1000).<br />  Then n lines follow. Each line contains three integers X, Y and P ( 0 &lt;= X, Y &lt;= 1000, 0 &lt; P &lt; 100000). (X, Y) is the coordinate of a city and P is the population of that city.<br />  It is guaranteed that each city has a distinct location.</p></blockquote><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h2><blockquote><p>  For each test case, print a line indicating the above mentioned maximum ratio A/B. The result should be rounded to 2 digits after decimal point.</p></blockquote><h2 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h2><blockquote><p>2<br />4<br />1 1 20<br />1 2 30<br />200 2 80<br />200 1 100<br />3<br />1 1 20<br />1 2 30<br />2 2 40</p></blockquote><h2 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h2><blockquote><p>65.00<br />70.00</p></blockquote><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  有n个城市，给出每个城市的坐标和人口数，秦始皇想修一些路，使得这n个城市之间可以互相连通，同时希望花费最少的劳动力（修的路的长度总和越大，花费的劳动力越多）。有一个叫徐福的道士可以用魔法帮秦始皇修一条路，并且不需要额外的劳动力，不过徐福希望他用魔法修的路能帮到更多的人。所以他们最终决定采集A/B最小的方案，A是通过魔道连接的两个城市的总人口，而B是不用魔法修的路的总长度。求A/B的最小值。</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  次小生成树的变形。先求出最小生成树的总长度mst_l和maxd数组，然后枚举图上的每一条边，作为用魔法修的路，那么不用魔法修的路的总长度为mst_l-maxd[i][j]，再根据两个城市的总人口，就可以算出A/B的最小值。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=4081 */</span></span><br><span class="line"><span class="comment">/* AC 109MS 16968K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, p;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">node nd[MAX_N];</span><br><span class="line"><span class="keyword">int</span> mst[MAX_N];</span><br><span class="line"><span class="keyword">double</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">double</span> maxd[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">double</span> min, mst_l;</span><br><span class="line"><span class="keyword">double</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = mp[<span class="number">0</span>][i];</span><br><span class="line">mst[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dist[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(maxd, <span class="number">0</span>, <span class="keyword">sizeof</span>(maxd));</span><br><span class="line"></span><br><span class="line">mst_l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = <span class="number">1e10</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; min &gt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">min = dist[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(min == <span class="number">1e10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">mst_l += min;</span><br><span class="line">dist[k] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] == <span class="number">-1</span> &amp;&amp; j != k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pre = mst[k];</span><br><span class="line">maxd[j][k] = (maxd[j][pre] &gt; mp[pre][k]) ? maxd[j][pre] : mp[pre][k];</span><br><span class="line">maxd[k][j] = maxd[j][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; dist[j] &gt; mp[k][j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = mp[k][j];</span><br><span class="line">mst[j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mst_l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">double</span> mst_l, mst_sl, temp, ans;</span><br><span class="line"></span><br><span class="line">mst_l = prim();</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = mst_l - maxd[i][j];</span><br><span class="line"><span class="keyword">if</span>(ans &lt; (nd[i].p + nd[j].p) / temp)</span><br><span class="line">&#123;</span><br><span class="line">ans = (nd[i].p + nd[j].p) / temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, i, j;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;nd[i].x, &amp;nd[i].y, &amp;nd[i].p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][j] = <span class="built_in">pow</span>(nd[i].x - nd[j].x, <span class="number">2</span>) + <span class="built_in">pow</span>(nd[i].y - nd[j].y, <span class="number">2</span>);</span><br><span class="line">mp[i][j] = <span class="built_in">sqrt</span>(mp[i][j]);</span><br><span class="line">mp[j][i] = mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h1&gt;
&lt;p&gt;  &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4081&quot; target=&quot;_blan</summary>
      
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="hdu" scheme="http://ganyuo.github.io/tags/hdu/"/>
    
    <category term="次小生成树" scheme="http://ganyuo.github.io/tags/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ_1679 The Unique MST</title>
    <link href="http://ganyuo.github.io/acm/poj_1679/"/>
    <id>http://ganyuo.github.io/acm/poj_1679/</id>
    <published>2020-06-13T02:25:00.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="http://poj.org/problem?id=1679" target="_blank" rel="noopener">http://poj.org/problem?id=1679</a></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  给出一张无向图，问图的最小生成数是否唯一，不唯一的话输出<code>Not Unique!</code>，否则输出最小生成树的边权和。</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  算出图的最小生成树，然后算出次小生成数，判断一下是否相等。（第一次写次小生成树，bug改了好久(T﹏T)！）</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1679 */</span></span><br><span class="line"><span class="comment">/* AC 0MS 412K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x1f1f1f1f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> mst[MAX_N];</span><br><span class="line"><span class="keyword">int</span> maxd[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, min, ans;</span><br><span class="line"><span class="keyword">int</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = mp[<span class="number">1</span>][i];</span><br><span class="line">mst[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dist[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = INF;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">2</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; min &gt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">min = dist[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(min == INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans += dist[k];</span><br><span class="line">dist[k] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; dist[j] &gt; mp[k][j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = mp[k][j];</span><br><span class="line">mst[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[j] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pre = mst[k];</span><br><span class="line">maxd[j][k] = (maxd[j][pre] &gt; mp[pre][k]) ? maxd[j][pre] : mp[pre][k];</span><br><span class="line">maxd[k][j] = maxd[j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sec_mst</span><span class="params">(<span class="keyword">int</span> mst_l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, ans;</span><br><span class="line"></span><br><span class="line">ans = INF;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j || mp[i][j] == INF || mst[i] == j || mst[j] == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans &gt; mst_l + mp[i][j] - maxd[i][j])</span><br><span class="line">&#123;</span><br><span class="line">ans = mst_l + mp[i][j] - maxd[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, i, x, y, w, mst_l;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0x1f</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="built_in">memset</span>(maxd, <span class="number">0</span>, <span class="keyword">sizeof</span>(maxd));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line"><span class="keyword">if</span>(mp[x][y] &gt; w)</span><br><span class="line">&#123;</span><br><span class="line">mp[x][y] = w;</span><br><span class="line">mp[y][x] = w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mst_l = prim();</span><br><span class="line"><span class="keyword">if</span>(mst_l &lt; <span class="number">0</span> || mst_l == sec_mst(mst_l))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not Unique!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mst_l);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h1&gt;
&lt;p&gt;  &lt;a href=&quot;http://poj.org/problem?id=1679&quot; target=&quot;_blank&quot; rel=&quot;noopener</summary>
      
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="次小生成树" scheme="http://ganyuo.github.io/tags/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    <category term="poj" scheme="http://ganyuo.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本基础知识</title>
    <link href="http://ganyuo.github.io/learn_note/shell_script_base/"/>
    <id>http://ganyuo.github.io/learn_note/shell_script_base/</id>
    <published>2020-05-10T14:30:26.000Z</published>
    <updated>2025-03-07T01:58:02.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><h2 id="shell"><a class="markdownIt-Anchor" href="#shell"></a> shell</h2><p>  shell是操作系统内核之外的指令解析器，是一个程序，同时是一种命令语言和程序设计语言。是处于操作人员和操作系统接口之间的一层封装，用于方便操作人员使用计算机。<br />用途：</p><ol><li>用于计算机的启动、常用程序的运行等脚本。</li><li>作为配置文件。</li><li>处理文本文件。</li></ol><p>  常用的shell：sh、bash。</p><h2 id="shell脚本"><a class="markdownIt-Anchor" href="#shell脚本"></a> shell脚本</h2><p>  将多行命令封装进一个文本文件里，执行一个shell脚本即可执行多个shell命令。<br />  shell的第一行用于指定脚本解释器的路径，方法是<code>#!解释器的路径</code>，比如指定为/bin/sh的代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br></pre></td></tr></table></figure><h1 id="执行方式"><a class="markdownIt-Anchor" href="#执行方式"></a> 执行方式</h1><p>  shell有两种执行方式，第一种是<code>脚本解释器 shell文件</code>，第二种是<code>./shell文件</code>。使用第二种方式时，要确保shell文件有可执行权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash ./test.sh  # 第一种方式</span><br><span class="line">./test.sh  # 第二种方式</span><br></pre></td></tr></table></figure><h1 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h1><h2 id="单行注释"><a class="markdownIt-Anchor" href="#单行注释"></a> 单行注释</h2><p>  shell脚本里用#来表示单行注释，如果使用第一种方式执行shell，第一行的<code>#!</code>也是注释；如果用第二种方式执行shell，第一行的<code>#!</code>则不是注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这是一个注释</span></span><br><span class="line">ls -l # 这也是一个注释</span><br></pre></td></tr></table></figure><h2 id="多行注释"><a class="markdownIt-Anchor" href="#多行注释"></a> 多行注释</h2><ol><li>方法一</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">: '</span><br><span class="line">echo "这是一个注释"</span><br><span class="line">echo "这也是注释"</span><br><span class="line">echo "这还是注释"</span><br><span class="line">'</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：注释的开头的<code>:</code>和<code>'</code>之间有一个空格，不然会报错。</p><ol start="2"><li>方法二</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt; 字符</span><br><span class="line">echo "这是一个注释"</span><br><span class="line">echo "这也是注释"</span><br><span class="line">echo "这还是注释"</span><br><span class="line">字符</span><br></pre></td></tr></table></figure><p>  这里的字符上下两个要相同，否则注释无法结束。</p><h1 id="别名"><a class="markdownIt-Anchor" href="#别名"></a> 别名</h1><p>  给命令取其他名字，用来简化带参数的命令，比如使用<code>alias ll='ls -l'</code>命令来给<code>ls -l</code>取一个<code>ll</code>的别名，以后就可以用<code>ll</code>来代替<code>ls -l</code>了。<br />  如果是在终端输入<code>alias</code>命令后取的别名，在终端退出后别名就会失效，下次开启终端后，需要再执行一次<code>alias</code>命令才能使用别名。如果想要在每次开启终端后都能使用别名，需要把<code>alias</code>命令写入~/.bashrc文件里。</p><h1 id="输入输出"><a class="markdownIt-Anchor" href="#输入输出"></a> 输入输出</h1><h2 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h2><p>  echo命令用于将字符输出到标准输出，语法：<code>echo [可选项] 要输出的字符串...</code>，可选项有两个：</p><ul><li>-n ：输出后不换行，默认会换一行。</li><li>-e ：输出前解析转义字符（类似<code>\n</code>之类的），默认不解析。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'abc!'</span>   <span class="comment"># 输出后会换一行</span></span></span><br><span class="line">abc!</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -n <span class="string">'abc!'</span>   <span class="comment"># 输出后不换行</span></span></span><br><span class="line">abc!$ </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'abc\nabc'</span>  <span class="comment"># 不解析转义字符，将\n当做普通字符串输出</span></span></span><br><span class="line">abc\nabc</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">'abc\nabc'</span>  <span class="comment"># 解析转义字符，将\n当做换行符输出</span></span></span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><p>  cat命令用于将文件的内容输出到标准输出，语法：<code>cat 要输出的文件</code>。</p><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h2><p>  read命令会从标准输入中读取字符串，保存到变量中，语法：<code>read 保存输入的变量</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">read</span> VAR</span></span><br><span class="line">abc   # 输入的字符串</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR&#125;</span></span></span><br><span class="line">abc</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><p>  也可以用read命令将读取的字符串保存到多个变量中，语法：<code>read 变量1 变量2 ...</code>。read命令读取到空格就换一个变量来保存字符串，读取到回车停止读取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">read</span> VAR1 VAR2</span></span><br><span class="line">abc 123  # 输入的字符串</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR1&#125;</span></span></span><br><span class="line">abc</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR2&#125;</span></span></span><br><span class="line">123</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><p>  用read将输入保存到变量时，如果想将空格当做普通字符保存到变量中，可以在空格前加一个反斜杠来转义。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">read</span> VAR1 VAR2</span></span><br><span class="line">abc\ 123 xyz       </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR1&#125;</span></span></span><br><span class="line">abc 123</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR2&#125;</span></span></span><br><span class="line">xyz</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><p>  当用来保存输入的变量是最后一个变量的时候，即使不加反斜杠来转义，也会把空格当做普通字符来处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">read</span> VAR1 VAR2</span></span><br><span class="line">abc 123 xyz</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR1&#125;</span></span></span><br><span class="line">abc</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR2&#125;</span></span></span><br><span class="line">123 xyz  # 变量VAR2是最后一个保存输入的变量</span><br><span class="line"><span class="meta">$</span><span class="bash">   <span class="comment"># 所以“123”和“xyz”之间的空格，即使不加反斜杠，也当做普通字符处理</span></span></span><br></pre></td></tr></table></figure><p>  如果后面的变量还没有用到，read就读取到了换行，那么，没用到的变量会赋值为空字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> VAR1=xyz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> VAR2=123</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">read</span> VAR1 VAR2</span></span><br><span class="line">abc</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR1&#125;</span></span></span><br><span class="line">abc</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR2&#125;</span> <span class="comment"># 变量VAR2原来是123，现在是空字符串。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure><h2 id="文件重定向"><a class="markdownIt-Anchor" href="#文件重定向"></a> 文件重定向</h2><p>  一个进程启动时，默认会打开3个文件描述符。</p><ul><li>0 标准输入　STDIN_FILENO</li><li>1 标准输出　STDOUT_FILENO</li><li>2 标准错误　STDERR_FILENO</li></ul><p>  一般在终端运行的命令会将当前终端作为标准输入、标准输出和标准错误，如果想用一个文件去替换终端，作为该命令的标准输入、标准输出或者标准错误，则需要用到输入输出重定向。输入输出重定向的语法如下：</p><ul><li><code>commad 0&lt;file</code> ：将file文件作为commad命令的标准输入，0可以省略。</li><li><code>commad 1&gt;file</code> ：将commad命令的标准输出重定向到file文件，会覆盖file文件原来的内容，用<code>&gt;&gt;</code>替换<code>&gt;</code>就不会覆盖，会将标准输出追加到file文件里。1也可以省略，效果是一样的。</li><li><code>commad 2&gt;file</code> ：将commad命令的标准错误重定向到file文件，覆盖写入，用<code>&gt;&gt;</code>表示追加，这里2不可以省略。</li><li><code>commad 1&gt;file 2&gt;&amp;1</code> ：将commad命令的标准输出和标准错误都重定向到file文件，会覆盖file文件原来的内容，用<code>&gt;&gt;</code>表示追加，前面的1可以省略。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./a.out &lt;in.txt    # 将in.txt文件作为./a.out的输入</span><br><span class="line">./a.out &gt;out.txt   # 将./a.out的标准输出重定向到out.txt文件中，覆盖写入</span><br><span class="line">./a.out &gt;&gt;out.txt   # 将./a.out的标准输出重定向到out.txt文件中，追加写入</span><br><span class="line">./a.out 2&gt;out.txt   # 将./a.out的标准错误重定向到out.txt文件中，覆盖写入</span><br></pre></td></tr></table></figure><h1 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道</h1><p>  用<code>|</code>表示，即将前一条命令的执行结果，利用管道传给下一条命令，作为下一条命令的输入，比如查看test.cpp文件里所有包含<code>printf</code>的行可以使用以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.cpp | grep <span class="string">'printf'</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h1><p>  变量是一段内存名字。shell里只有字符串和整数两种类型的变量。shell变量常用大写英文字符表示。</p><h2 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明</h2><p>  shell变量可以用<code>declare</code>来声明。设定属性的选项：</p><ul><li>-a 声明下标数组 (如果支持)</li><li>-A 声明关联数组 (如果支持)</li><li>-i 声明整型变量</li><li>-r 声明只读变量</li><li>-n 声明指向一个以其值为名称的变量的引用</li><li>-x 声明一个变量，并将变量导出，有关导出的内容会在下文的<a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a>里解释。</li><li>-t 声明带有`trace’(追踪)属性的变量</li><li>-l 将变量在赋值时转为小写</li><li>-u 将变量在赋值时转为大写</li></ul><p>  如果在声明变量时，不指定任何属性，则默认为声明一个字符串类型的变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">声明一个下标数组</span></span><br><span class="line">declare -a MY_ARRAY</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">声明一个整型变量</span></span><br><span class="line">declare -i MY_INT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">声明一个只读变量，并将其初始化为<span class="string">'123'</span></span></span><br><span class="line">declare -r MY_READ_ONLY='123'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">声明一个变量，并将变量导出</span></span><br><span class="line">declare -x MY_EXPORT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">声明一个字符串变量</span></span><br><span class="line">declare MY_STRING</span><br></pre></td></tr></table></figure><p>  其实，字符串类型的变量不用<code>declare</code>声明也可以赋值或者使用，相当于一个空字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"MY_VAR=<span class="variable">$&#123;MY_VAR&#125;</span>;"</span> <span class="comment">#在没有用`declare`声明时，使用'MY_VAR'变量</span></span></span><br><span class="line">MY_VAR=;</span><br><span class="line"><span class="meta">$</span><span class="bash"> MY_VAR=123 <span class="comment">#在没有用`declare`声明时，给'MY_VAR'变量赋值</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"MY_VAR=<span class="variable">$&#123;MY_VAR&#125;</span>;"</span></span></span><br><span class="line">MY_VAR=123;</span><br></pre></td></tr></table></figure><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p>语法：<code>$变量名</code>或<code>${变量名}</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $VAR</span><br><span class="line">echo $&#123;VAR&#125;</span><br></pre></td></tr></table></figure><p>  推荐使用加大括号的方式，可以增强代码的可读性。</p><h2 id="赋值"><a class="markdownIt-Anchor" href="#赋值"></a> 赋值</h2><p>语法：<code>变量名=给变量赋的值</code><br />  赋值和初始化时等号两边不要加空格。<br />  只读变量初始化后不能再赋值了。</p><h2 id="释放"><a class="markdownIt-Anchor" href="#释放"></a> 释放</h2><p>语法：<code>unset 变量名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> VAR=123</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"VAR=<span class="variable">$&#123;VAR&#125;</span>;"</span></span></span><br><span class="line">VAR=123;</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> VAR</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"VAR=<span class="variable">$&#123;VAR&#125;</span>;"</span></span></span><br><span class="line">VAR=;</span><br></pre></td></tr></table></figure><p>  变量VAR在释放之前的值是123，在释放之后是一个空字符串。</p><h2 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h2><p>  局部变量(local variable)是用户自定义的变量，<code>declace</code>不加<code>-x</code>声明的变量都是局部变量。局部变量只在当前shell进程中有效，其父shell进程和其创建的子shell进程都无法使用。</p><h2 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h2><p>  环境变量(global variable)也叫全局变量。与局部变量不同，当前shell进程在创建子shell进程时，会将环境变量复制给子shell进程，使其成为子进程的环境变量，而当前shell进程的局部变量不会复制。<br />  可以用<code>export</code>将局部变量导出为环境变量，语法：<code>export 要导出的局部变量名</code>。<br />  下面，用两个例子来说明环境变量和局部变量的区别。假设当前目录下有一个test.sh脚本，里面只有一条<code>echo</code>命令，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "VAR=$&#123;VAR&#125;;"</span><br></pre></td></tr></table></figure><p><strong>第一个例子</strong><br />  首先在终端中声明一个名称为VAR的局部变量，然后用bash执行test.sh脚本，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> VAR=<span class="string">'123'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash ./test.sh</span></span><br><span class="line">VAR=;</span><br></pre></td></tr></table></figure><p>  在这个例子中，当前终端可以当做一个shell进程，执行<code>bash ./test.sh</code>命令会创建一个子shell进程，然后用创建的子shell进程去解析test.sh里的命令。因为VAR是一个局部变量，所以在创建子shell进程时，不会将VAR变量复制给子shell进程，所以子shell进程执行test.sh后输出的VAR是一个空字符串。</p><p><strong>第二个例子</strong><br />  首先在终端中声明一个名称为VAR的局部变量，先将VAR用<code>export</code>导出为环境变量，然后再用bash执行test.sh脚本，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> VAR=<span class="string">'123'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> VAR</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash ./test.sh </span></span><br><span class="line">VAR=123;</span><br></pre></td></tr></table></figure><p>  与第一个例子不同的地方是VAR被导出成了环境变量，当前终端在创建子shell进程的时候会将VAR复制，成为子shell进程的环境变量，所以输出的VAR是字符串’123’。</p><hr /><p>  可以用<code>env</code>、<code>export</code>、<code>set</code>命令来查看当前shell进程的环境变量。<br />  常用的环境变量：</p><ul><li><strong>HOME</strong>：home目录路径</li><li><strong>PWD</strong>：当前目录路径</li><li><strong>LOGNAME</strong>：当前用户用户名</li><li><strong>PATH</strong>：shell命令的存放路径，每个路径用引号分隔，用于shell寻找命令。</li></ul><h2 id="特殊变量"><a class="markdownIt-Anchor" href="#特殊变量"></a> 特殊变量</h2><ul><li><strong>$0</strong>：用于保存的是当前运行的可执行文件的名字。</li><li><strong>$1~9</strong>：用于保存给shell脚本或者shell脚本里的函数传的参数，一共有9个。</li><li><strong>$#</strong>：用于保存传的参数个数，$0不在计数范围内。</li><li><strong>$*</strong>：以单个字符串的形式保存传的参数，即$1~9，不包括$0。</li><li><strong>$@</strong>：以字符串数组的形式保存传的参数，不包括$0。</li><li><strong>$?</strong>：用于保存上一条命令或者函数的返回值，值为0表示正常退出。</li><li><strong>$$</strong>：当前shell进程的PID。</li><li><strong>$!</strong>：用于保存上一个放到后台运行的进程的PID，注意，不是前台进程。</li><li><strong>$-</strong>：显示shell使用的当前选项，与set命令功能相同。(这个没弄懂)</li></ul><h1 id="后台切换"><a class="markdownIt-Anchor" href="#后台切换"></a> 后台切换</h1><p>  在命令后面加一个<code>&amp;</code>可以将该命令切换到后台工作，这样不用等待该命令结束就可以执行下一条命令了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;a.out &amp;</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>  上面这个例子，假设<code>./a.out</code>需要执行10秒，如果不加<code>&amp;</code>，则<code>ls -l</code>需要等10秒后，也就是<code>./a.out</code>执行结束后才能运行，加了<code>&amp;</code>就不需要等待<code>./a.out</code>结束就能运行<code>ls -l</code>了。<br />  使用这种切换到后台的进程，在终端退出后就会结束，如果想在退出终端后，后台进程任然继续运行，需要用到<code>nohup</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup .&#x2F;a.out &amp;</span><br></pre></td></tr></table></figure><p>  使用<code>nohup</code>命令会将切换到后台的进程的输出写入到当前目录的nohup.out文件里。</p><h1 id="特殊字符"><a class="markdownIt-Anchor" href="#特殊字符"></a> 特殊字符</h1><h2 id="双引号"><a class="markdownIt-Anchor" href="#双引号"></a> 双引号</h2><p>  双引号用来使shell将空格、制表符和其他大多数特殊字符当做普通字符来处理。举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch aaa bbb</span><br><span class="line">touch "aaa bbb"</span><br></pre></td></tr></table></figure><p>  没加双引号时，<code>aaa</code>和<code>bbb</code>之间的空格表示命令参数分隔符，<code>touch</code>命令会创建两个文件“aaa”和“bbb”。<br />  加了双引号时，<code>aaa</code>和<code>bbb</code>之间的空格表示普通字符，与a和b的意义相同，<code>touch</code>命令只会创建一个文件“aaa bbb”。</p><h2 id="单引号"><a class="markdownIt-Anchor" href="#单引号"></a> 单引号</h2><p>  作用与双引号类似，区别是双引号只能将空格、制表符等部分特殊符号当普通字符来处理，而单引号可以作用于所有字符。比如<code>$</code>符号(用于引用变量)加了双引号还是特殊字符，加单引号则表示普通字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;PATH&#125;</span><br><span class="line">echo "$&#123;PATH&#125;"</span><br><span class="line">echo '$&#123;PATH&#125;'</span><br></pre></td></tr></table></figure><p>  上面的三行命令，第一行和第二行的作用相同，都是输出PATH变量，第三行命令只会输出字符串“$PATH”。</p><h2 id="反引号"><a class="markdownIt-Anchor" href="#反引号"></a> 反引号</h2><p>  反引号用于使shell将字符串当做命令来处理。举个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo ls -l</span><br><span class="line">echo `ls -l`</span><br></pre></td></tr></table></figure><p>  第一行命令会将字符串“ls -l”输出，第二行命令则会先执行<code>ls -l</code>命令，然后用<code>echo</code>命令将<code>ls -l</code>的执行结果输出。<br />  反引号也可以用<code>$()</code>来代替，比如<code>`ls -l`</code>和<code>$(ls -l)</code>是等效的。</p><h2 id="反斜杠"><a class="markdownIt-Anchor" href="#反斜杠"></a> 反斜杠</h2><p>  转义字符，将反斜杠后面的字符当做普通字符来处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch aaa\ bbb</span><br></pre></td></tr></table></figure><p>  上面命令里的空格被转义为普通字符，执行命令后会创建一个“aaa bbb”文件。</p><h2 id="分号"><a class="markdownIt-Anchor" href="#分号"></a> 分号</h2><p>  可以在一行执行多条命令，分号表示一条命令的结束。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "hello world"; ls -la;</span><br></pre></td></tr></table></figure><h2 id="空格-制表符-换行符"><a class="markdownIt-Anchor" href="#空格-制表符-换行符"></a> 空格、制表符、换行符</h2><p>  当做空白。</p><h2 id="其他符号"><a class="markdownIt-Anchor" href="#其他符号"></a> 其他符号</h2><ol><li><strong>*?!^</strong>：用于shell的<a href="#%E6%A8%A1%E5%BC%8F">模式</a>匹配。</li><li><strong>&lt;&gt;</strong>：用于输入输出重定向，见<a href="#%E6%96%87%E4%BB%B6%E9%87%8D%E5%AE%9A%E5%90%91">文件重定向</a>。</li><li><strong>|</strong>：用于使用管道，见<a href="#%E7%AE%A1%E9%81%93">管道</a>。</li><li><strong>$</strong>：用于引用变量，见<a href="#%E5%8F%98%E9%87%8F">变量</a>。</li><li><strong>&amp;</strong>：将命令放到后台运行，见<a href="#%E5%90%8E%E5%8F%B0%E5%88%87%E6%8D%A2">后台切换</a>。</li><li><strong>#</strong>：在shell脚本里表示单行注释，见<a href="#%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A">单行注释</a>。</li><li><strong>()</strong>：<code>$()</code>用来表示括号里的是命令，和<a href="#%E5%8F%8D%E5%BC%95%E5%8F%B7">反引号</a>作用相同。<code>$(())</code>用来表示<a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%90%E7%AE%97">表达式运算</a>。</li><li><strong>[]</strong>：用于shell的<a href="#%E6%A8%A1%E5%BC%8F">模式</a>匹配，或者用来表示<a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%90%E7%AE%97">表达式运算</a>，也可以用来表示<a href="#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD">条件判断</a>。</li><li><strong>{}</strong>：用于shell的<a href="#%E6%A8%A1%E5%BC%8F">模式</a>匹配，或者用来引用<a href="#%E5%8F%98%E9%87%8F">变量</a>，也可以用来生成序列，用法见<a href="#for%E8%AF%AD%E5%8F%A5">for语句</a>。</li></ol><h1 id="模式和正则表达式"><a class="markdownIt-Anchor" href="#模式和正则表达式"></a> 模式和正则表达式</h1><p>  shell里的模式一般用来匹配文件路径，正则表达式则是用来匹配字符串的。</p><h2 id="模式"><a class="markdownIt-Anchor" href="#模式"></a> 模式</h2><p>  shell的模式包括普通字符和通配符，这里列出常用的一些通配符：</p><table><thead><tr><th style="text-align:center">通配符</th><th style="text-align:center">含义</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">匹配0个或多个字符</td><td style="text-align:left"><code>a*b</code>，a与b之间可以有任意长度的任意字符, 也可以一个也没有，比如：aabcb, axyzb, a012b, ab。</td></tr><tr><td style="text-align:center"><code>?</code></td><td style="text-align:center">匹配任意一个字符</td><td style="text-align:left"><code>a?b</code>，a与b之间必须也只能有一个字符, 可以是任意字符，比如：aab, abb, acb, a0b。</td></tr><tr><td style="text-align:center"><code>[list]</code></td><td style="text-align:center">匹配list中的任意单一字符</td><td style="text-align:left"><code>a[xyz]b</code>，a与b之间必须也只能有一个字符, 但只能是x或y或z, 比如：axb, ayb, azb。</td></tr><tr><td style="text-align:center"><code>[c1-c2]</code></td><td style="text-align:center">匹配c1到c2之间的任意一个字符</td><td style="text-align:left"><code>a[0-9]b</code>，a与b之间必须也只能有一个0到9之间的字符，比如：a0b, a1b… a9b。</td></tr><tr><td style="text-align:center"><code>[!list]</code>或<code>[^list]</code></td><td style="text-align:center">匹配除list中的任意单一字符</td><td style="text-align:left"><code>a[!xyz]b</code>，a与b之间必须也只能有一个字符, 但不能是x、y、z, 比如：a0b, apb, a-b。</td></tr><tr><td style="text-align:center"><code>[!c1-c2]</code>或<code>[^c1-c2]</code></td><td style="text-align:center">匹配不在c1-c2的任意字符</td><td style="text-align:left"><code>a[!0-9]b</code>，比如：acb adb。</td></tr><tr><td style="text-align:center"><code>{string1,string2,...}</code></td><td style="text-align:center">匹配sring1或string2(或更多)其一字符串</td><td style="text-align:left"><code>a{abc,xyz,123}b</code>，a与b之间必须是abc或xyz或123，比如：aabcb,axyzb,a123b</td></tr></tbody></table><p>  shell里的模式一般用来匹配多个文件或文件夹的路径，使用模式的常用命令有：ls、find、cp、mv、chmod…。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -1 test_[0-9].sh</span></span><br><span class="line">test_0.sh</span><br><span class="line">test_1.sh</span><br><span class="line">test_2.sh</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h2><p>  正则表达式是用来匹配字符串的。linux里的grep是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来，这里用grep来演示正则表达式。<br />  正则表达式常用元字符集：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>\</code></td><td style="text-align:left">转义字符</td></tr><tr><td style="text-align:center"><code>^</code></td><td style="text-align:left">匹配字符串的开始位置</td></tr><tr><td style="text-align:center"><code>$</code></td><td style="text-align:left">匹配字符串的结束位置</td></tr><tr><td style="text-align:center"><code>.</code></td><td style="text-align:left">匹配任意一个字符</td></tr><tr><td style="text-align:center"><code>[list]</code></td><td style="text-align:left">匹配list里的任意一个字符。例如，<code>[abc]</code>可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td style="text-align:center"><code>[^list]</code></td><td style="text-align:left">匹配除了list里的其他任意一个字符。例如，<code>[^abc]</code>可以匹配&quot;plain&quot;中的’p’、‘l’、‘i’、‘n’。</td></tr><tr><td style="text-align:center"><code>[c1-c2]</code></td><td style="text-align:left">匹配c1到c2之间的任意字符。例如，<code>[a-z]</code>可以匹配’a’到’z’范围内的任意小写字母字符。</td></tr><tr><td style="text-align:center"><code>[^c1-c2]</code></td><td style="text-align:left">匹配不在c1到c2之间的任意字符。例如，<code>[^a-z]</code>可以匹配任何不在’a’ 到’z’范围内的任意字符。</td></tr><tr><td style="text-align:center"><code>x|y</code></td><td style="text-align:left">匹配x或y。例如，<code>z|food</code>能匹配&quot;z&quot;或&quot;food&quot;，<code>(z|f)ood</code>则匹配&quot;zood&quot;或&quot;food&quot;。</td></tr><tr><td style="text-align:center"><code>()</code></td><td style="text-align:left">标记一个子表达式的开始和结束位置。</td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:left">匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配&quot;z&quot;以及&quot;zoo&quot;。<code>*</code>等价于<code>{0,}</code>。</td></tr><tr><td style="text-align:center"><code>+</code></td><td style="text-align:left">匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配&quot;zo&quot;以及&quot;zoo&quot;，但不能匹配 “z”。<code>+</code>等价于<code>{1,}</code>。</td></tr><tr><td style="text-align:center"><code>?</code></td><td style="text-align:left">匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配&quot;do&quot;或&quot;does&quot;。<code>?</code>等价于<code>{0,1}</code>。</td></tr><tr><td style="text-align:center"><code>{n}</code></td><td style="text-align:left">匹配前面的子表达式确定的n次。例如，<code>o{2}</code>不能匹配&quot;Bob&quot;中的’o’，但是能匹配&quot;food&quot;中的两个’o’。</td></tr><tr><td style="text-align:center"><code>{n,}</code></td><td style="text-align:left">至少匹配前面的子表达式n次。例如，<code>o{2,}</code>不能匹配 “Bob” 中的 ‘o’，但能匹配&quot;foooood&quot;中的所有’o’。</td></tr><tr><td style="text-align:center"><code>{n,m}</code></td><td style="text-align:left">最少匹配前面的子表达式n次且最多匹配m次。例如，<code>o{1,3}</code>将匹配&quot;fooooood&quot;中的前三个’o’。注意，在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:center"><code>\b</code></td><td style="text-align:left">匹配一个单词边界，也就是指单词和空格(shell里的grep并不限于空格，单词和’.‘、’_'之间也能匹配)间的位置。例如，<code>er\b</code>可以匹配&quot;never&quot; 中的&quot;er&quot;，但不能匹配 “verb” 中的&quot;er&quot;。</td></tr><tr><td style="text-align:center"><code>\B</code></td><td style="text-align:left">匹配非单词边界。<code>er\B</code>能匹配&quot;verb&quot;中的&quot;er&quot;，但不能匹配&quot;never&quot;中的&quot;er&quot;。</td></tr><tr><td style="text-align:center"><code>\d</code></td><td style="text-align:left">匹配一个数字字符。等价于<code>[0-9]</code>。</td></tr><tr><td style="text-align:center"><code>\D</code></td><td style="text-align:left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="text-align:center"><code>\w</code></td><td style="text-align:left">匹配字母、数字、下划线。等价于<code>[A-Za-z0-9_]</code>。</td></tr><tr><td style="text-align:center"><code>\W</code></td><td style="text-align:left">匹配非字母、数字、下划线。等价于<code>[^A-Za-z0-9_]</code>。</td></tr><tr><td style="text-align:center"><code>\xn</code></td><td style="text-align:left">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，<code>\x41</code>匹配&quot;A&quot;。<code>\x041</code>则等价于’\x04’&amp;“1”。正则表达式中可以使用ASCII编码。</td></tr><tr><td style="text-align:center"><code>\s</code></td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[\f\n\r\t\v]</code>。</td></tr><tr><td style="text-align:center"><code>\S</code></td><td style="text-align:left">匹配任何非空白字符。等价于<code>[^\f\n\r\t\v]</code>。</td></tr></tbody></table><p>  <strong>注意</strong>：shell里用grep时，<code>|</code>、<code>()</code>、<code>{}</code>、<code>+</code>、<code>?</code>需要转义。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -1 | grep <span class="string">'test_1\&#123;2\&#125;'</span></span></span><br><span class="line">test_11.sh</span><br></pre></td></tr></table></figure><p>  上面的<code>{</code>和<code>}</code>前面要加<code>\</code>转义。</p><h1 id="表达式运算"><a class="markdownIt-Anchor" href="#表达式运算"></a> 表达式运算</h1><h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2><p>  shell里的运算符基本跟c语言的一样</p><ul><li>基本运算符：+、-、*、/(加减乘除)、%(取模)</li><li>逻辑运算符：&amp;&amp;、||、!(与或非)</li><li>位运算符：&amp;(与)、|(或)、^(异或)、~(取反)、&lt;&lt;(位左移)、&gt;&gt;(位右移)</li><li>赋值运算符：=、+=、*=、/=、%=、&amp;=、|=、^|、&lt;&lt;=、…</li></ul><h2 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h2><p>  shell里用<code>$[表达式]</code>表示中括号里的是表达式，也可以用<code>$((表达式))</code>来表示，推荐使用中括号的形式。<br />  <strong>注意</strong>：shell里只能对整形变量进行表达式运算，不能对字符串类型的变量进行表达式运算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> -i VAR1=123</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> -i VAR2=111</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $[VAR1 + VAR2]</span></span><br><span class="line">234</span><br></pre></td></tr></table></figure><h2 id="expr命令"><a class="markdownIt-Anchor" href="#expr命令"></a> expr命令</h2><p>  也可以用expr命令来进行表达式运算，expr命令支持的运算符有：|、&amp;、&lt;、&lt;=、=、!=、&gt;=、+、-、*、/、%。语法：<code>expr 表达式</code>，举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> expr 123 + 111  <span class="comment"># 加法运算</span></span></span><br><span class="line">234</span><br><span class="line"><span class="meta">$</span><span class="bash"> VAR1=333</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> VAR2=234</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> expr <span class="variable">$&#123;VAR1&#125;</span> - <span class="variable">$&#123;VAR2&#125;</span>  <span class="comment"># 变量１减变量２</span></span></span><br><span class="line">99</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr <span class="variable">$&#123;VAR1&#125;</span> \* <span class="variable">$&#123;VAR2&#125;</span>  <span class="comment"># 变量１乘变量２</span></span></span><br><span class="line">77922</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr <span class="variable">$&#123;VAR1&#125;</span> / <span class="variable">$&#123;VAR2&#125;</span>  <span class="comment"># 变量１除变量２</span></span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>  <strong>注意</strong>：运算符两边都有一个空格。部分运算符前面要加个<code>\</code>来转义，比如*、&amp;、(、&gt;。<br />  还可以用小括号来组成更复杂的表达式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> expr 12 \* \( 34 - 26 \)  <span class="comment"># 乘号和小括号前都要加\</span></span></span><br><span class="line">96</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> -i VAR1=413</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> -i VAR2=34</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> expr <span class="variable">$&#123;VAR1&#125;</span> % \( <span class="variable">$&#123;VAR2&#125;</span> - 21 \) </span></span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>  expr还可以进行简单的字符串运算，支持的有：</p><ul><li><strong>字符串 : 正则表达式</strong>： 在字符串中由给定正则表达式决定的锚定模式匹配。</li><li><strong>match 字符串 正则表达式</strong>：与“字符串 : 正则表达式”相同。</li><li><strong>substr 字符串 位置 长度</strong>：从某个位置开始，截取指定长度的子串，位置由 1 开始计数。</li><li><strong>index 字符串 字符</strong>：字符串中第一次出现指定字符的位置，如果不存在该字符，则输出0。</li><li><strong>length 字符串</strong>：字符串的长度。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> expr substr <span class="string">'this is a test'</span> 2 8</span></span><br><span class="line">his is a</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr length <span class="string">'this is a test'</span></span></span><br><span class="line">14</span><br><span class="line"><span class="meta">$</span><span class="bash"> expr index <span class="string">'this is a test'</span> s</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>  expr命令会将计算结果输出到标准输出，如果想将结果保存到变量里，可以用反引号来实现。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> VAR=`expr 23 \* 42`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;VAR&#125;</span></span></span><br><span class="line">966</span><br></pre></td></tr></table></figure><h1 id="条件判断"><a class="markdownIt-Anchor" href="#条件判断"></a> 条件判断</h1><p>  shell里可以用test命令进行条件判断。语法：<code>test 表达式</code>或者<code>[ 表达式 ]</code>(注意这里中括号和表达式之间的空格不能省)。<br />  可以通过查看变量$?的值，来判断表达式是否成立，如果成立，test命令返回值为0，变量$?的值也是0，如果不成立，则值为非0。test命令可以进行的条件判断包括以下几种。</p><h2 id="字符串判断"><a class="markdownIt-Anchor" href="#字符串判断"></a> 字符串判断</h2><ul><li><strong>-z 字符串</strong>：字符串的长度为 0</li><li><strong>-n 字符串</strong>：字符串长度非零</li><li><strong>字符串</strong>：等价于<code>-n 字符串</code></li><li><strong>字符串1 = 字符串2</strong>：字符串相等</li><li><strong>字符串1 != 字符串2</strong>：字符串不相等</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> VAR=<span class="string">''</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> [ -z <span class="variable">$&#123;VAR&#125;</span> ] <span class="comment"># 判断字符串$&#123;VAR&#125;长度是否为0</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $?  <span class="comment"># 查看test命令的返回值</span></span></span><br><span class="line">0</span><br><span class="line"><span class="meta">$</span><span class="bash"> VAR=<span class="string">'abc'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> [ -z <span class="variable">$&#123;VAR&#125;</span> ]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $?</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">$</span><span class="bash"> [ <span class="variable">$&#123;VAR&#125;</span> = <span class="string">'abc'</span> ] <span class="comment"># 判断字符串$&#123;VAR&#125;是否等于'abc'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $?</span></span><br><span class="line">0</span><br><span class="line"><span class="meta">$</span><span class="bash"> [ <span class="variable">$&#123;VAR&#125;</span> = <span class="string">'123'</span> ]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $?</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="整数判断"><a class="markdownIt-Anchor" href="#整数判断"></a> 整数判断</h2><ul><li><strong>整数1 -eq 整数2</strong>：整数1与整数2相等</li><li><strong>整数1 -ge 整数2</strong>：整数1大于或等于整数2</li><li><strong>整数1 -gt 整数2</strong>：整数1大于整数2</li><li><strong>整数1 -le 整数2</strong>：整数1小于或等于整数2</li><li><strong>整数1 -lt 整数2</strong>：整数1小于整数2</li><li><strong>整数1 -ne 整数2</strong>：整数1和整数2不相等</li></ul><h2 id="文件判断"><a class="markdownIt-Anchor" href="#文件判断"></a> 文件判断</h2><ul><li><strong>-e 文件</strong>：文件存在</li><li><strong>-d 文件</strong>：文件存在且为目录</li><li><strong>-f 文件</strong>：文件存在且为普通文件</li><li><strong>-r 文件</strong>：文件存在且有可读权限</li><li><strong>-w 文件</strong>：文件存在且有可写权限</li><li><strong>-x 文件</strong>：文件存在且有可执行（或搜索）权限</li><li><strong>-b 文件</strong>：文件存在且为块特殊文件</li><li><strong>-c 文件</strong>：文件存在且为字符特殊文件</li><li><strong>-g 文件</strong>：文件存在且被设置了 set-group-ID 位</li><li><strong>-g 文件</strong>：文件存在且为有效组ID 所有</li><li><strong>-h 文件</strong>：文件存在且为一个符号链接（与 -L 相同）</li><li><strong>-L 文件</strong>：文件存在且为一个符号链接（与 -h 相同）</li><li><strong>-k 文件</strong>：文件存在且被设置粘着位</li><li><strong>-O 文件</strong>：文件存在且为有效用户ID 所有</li><li><strong>-p 文件</strong>：文件存在且为命名管道</li><li><strong>-s 文件</strong>：文件存在且其大小大于零</li><li><strong>-S 文件</strong>：文件存在且为套接字</li><li><strong>-u 文件</strong>：文件存在且被设置了 set-user-ID 位</li><li><strong>-t FD</strong>：文件描述符 FD 在某个终端打开</li><li><strong>文件1 -ef 文件2</strong>：文件1 和文件2 拥有相同的设备编号与 inode 编号</li><li><strong>文件1 -nt 文件2</strong>：文件1 在修改时间上新于文件2</li><li><strong>文件1 -ot 文件2</strong>：文件1 比文件2 更旧</li></ul><h2 id="逻辑判断"><a class="markdownIt-Anchor" href="#逻辑判断"></a> 逻辑判断</h2><ul><li><strong>! 表达式</strong>：表达式为假</li><li><strong>表达式1 -a 表达式2</strong>：表达式1 与表达式2 皆为真</li><li><strong>表达式1 -o 表达式2</strong>：表达式1 或表达式2 为真</li></ul><h1 id="分支结构"><a class="markdownIt-Anchor" href="#分支结构"></a> 分支结构</h1><h2 id="if语句"><a class="markdownIt-Anchor" href="#if语句"></a> if语句</h2><p>  直接上语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if 条件1</span><br><span class="line">then</span><br><span class="line">条件1成立时执行的命令</span><br><span class="line">elif 条件2</span><br><span class="line">then</span><br><span class="line">条件1不成立，且条件2成立时执行的命令</span><br><span class="line">else</span><br><span class="line">条件1和条件2都不成立时执行的命令</span><br><span class="line">fi # 结束if语句</span><br></pre></td></tr></table></figure><p>  这里的条件一般是一条shell命令，比如<code>test</code>、<code>gcc</code>等。如果命令的返回值为0，则条件成立。<br />  小实验：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat shell.sh </span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">if [ $&#123;1&#125; -gt $&#123;2&#125; ]  # 判断$&#123;1&#125;是否大于$&#123;2&#125;</span><br><span class="line">then</span><br><span class="line">echo 'num_1 &gt; num_2'</span><br><span class="line">elif [ $&#123;1&#125; -eq $&#123;2&#125; ]  # 判断$&#123;1&#125;是否等于$&#123;2&#125;</span><br><span class="line">then</span><br><span class="line">echo 'num_1 = num_2'</span><br><span class="line">else</span><br><span class="line">echo 'num_1 &lt; num_2'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./shell.sh 12 12</span></span><br><span class="line">num_1 = num_2</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./shell.sh 12 11</span></span><br><span class="line">num_1 &gt; num_2</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./shell.sh 12 13</span></span><br><span class="line">num_1 &lt; num_2</span><br></pre></td></tr></table></figure><h2 id="case语句"><a class="markdownIt-Anchor" href="#case语句"></a> case语句</h2><p>  语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case 字符串 in</span><br><span class="line">模式1)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 模式1能匹配字符串时执行的命令</span></span><br><span class="line">;; # 表示结束</span><br><span class="line">模式2)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 模式2能匹配字符串时执行的命令</span></span><br><span class="line">;; # 结束</span><br><span class="line">*)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以上模式都不匹配时执行的命令</span></span><br><span class="line">;; # 结束</span><br><span class="line">esac # 结束case语句</span><br></pre></td></tr></table></figure><p>  case语句只能对字符串进行判断，这里的模式是指正则表达式。</p><h1 id="循环结构"><a class="markdownIt-Anchor" href="#循环结构"></a> 循环结构</h1><h2 id="for语句"><a class="markdownIt-Anchor" href="#for语句"></a> for语句</h2><p>  语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for VAR in item1 item2 .... itemN</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash"> 循环内的命令</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>  举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat shell.sh </span></span><br><span class="line"></span><br><span class="line">for VAR in aaa bbb ccc</span><br><span class="line">do</span><br><span class="line">echo $&#123;VAR&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash shell.sh </span></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure><p>  然后再介绍几种shell里与for语句搭配使用的形式。</p><ol><li><code>{s..e}</code>：用来生成从s到e的序列，s和e可以是整数，也可以是大小写字母。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> &#123;-3..12&#125;</span></span><br><span class="line">-3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> &#123;a..z&#125;</span></span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure><p>  这里要注意的是，s和e中间有<strong>两个</strong>点，多一个或少一个都不行。<br />  如果s和e是整数的话，可以在s和e前面加0，达到自动用0补全的效果，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> &#123;001..012&#125;</span></span><br><span class="line">001 002 003 004 005 006 007 008 009 010 011 012</span><br></pre></td></tr></table></figure><p>  这个和for循环搭配使用，就可以从s循环到e了，举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat shell.sh </span></span><br><span class="line"></span><br><span class="line">for i in &#123;01..04&#125;</span><br><span class="line">do</span><br><span class="line">echo "str_$&#123;i&#125;"</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash shell.sh </span></span><br><span class="line">str_01</span><br><span class="line">str_02</span><br><span class="line">str_03</span><br><span class="line">str_04</span><br></pre></td></tr></table></figure><ol start="2"><li><code>`命令`</code>或者<code>$(命令)</code>：用for语句来循环shell命令的输出，下面的例子用for语句输出当前目录的所有文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for FILE_NAME in `ls`</span><br><span class="line">do</span><br><span class="line">echo $&#123;FILE_NAME&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>  这里再重点介绍一下seq命令，seq命令也是用来生成序列的，与<code>{s..e}</code>不同的是，seq可以生成浮点数序列，但是不能生成大小写字母序列，用法有三种，如下：</p><ul><li>seq [选项]… 尾数</li><li>seq [选项]… 首数 尾数</li><li>seq [选项]… 首数 增量 尾数</li></ul><p>  首数默认是1，增量默认也是1，可用的选项有三个：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-f</td><td>指定生成的序列中每个数字的格式，指定方式和c语言的printf函数方式相同，<br>比如<code>%2.1f</code>，要注意的是只能用<code>%f</code>，<code>%d</code>和<code>%lf</code>都不行。</td></tr><tr><td>-s</td><td>指定分隔数字的字符串，默认是换行<code>\n</code>。</td></tr><tr><td>-w</td><td>通过填充前导零来均衡宽度，这个不能和<code>-f</code>同时使用。</td></tr></tbody></table><p>  一些例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> seq 3 <span class="comment"># 只有一个数字的，生成从1到该数字的序列，默认增量是1</span></span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"><span class="meta">$</span><span class="bash"> seq -s <span class="string">' '</span> 12  <span class="comment"># 用空格来分隔数字</span></span></span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11 12</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> seq -s <span class="string">' '</span> -3 12  <span class="comment"># 有两个数字的，生成两个数字之间增量为1的序列</span></span></span><br><span class="line">-3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> seq -s <span class="string">' '</span> -3 0.8 12 <span class="comment"># 三个数字的</span></span></span><br><span class="line">-3.0 -2.2 -1.4 -0.6 0.2 1.0 1.8 2.6 3.4 4.2 5.0 5.8 6.6 7.4 8.2 9.0 9.8 10.6 11.4</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> seq -s <span class="string">'__'</span> -3 12  <span class="comment"># 用'__'来分隔数字</span></span></span><br><span class="line">-3__-2__-1__0__1__2__3__4__5__6__7__8__9__10__11__12</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> seq -s <span class="string">' '</span> -w -3 12  <span class="comment"># 通过填充前导零来均衡宽度</span></span></span><br><span class="line">-3 -2 -1 00 01 02 03 04 05 06 07 08 09 10 11 12</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> seq -s <span class="string">' '</span> -f %05.2f 12  <span class="comment"># 指定数字的格式</span></span></span><br><span class="line">01.00 02.00 03.00 04.00 05.00 06.00 07.00 08.00 09.00 10.00 11.00 12.00</span><br></pre></td></tr></table></figure><p>  seq与for语句搭配使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat shell.sh </span></span><br><span class="line"></span><br><span class="line">for i in `seq -3 12`</span><br><span class="line">do</span><br><span class="line">echo -n "$&#123;i&#125; "</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash shell.sh </span></span><br><span class="line">-3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12</span><br></pre></td></tr></table></figure><ol start="3"><li>最后一种是for语句和路径通配符，举个栗子：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat shell.sh </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用<span class="keyword">for</span>语句输出当前目录下的所有文件</span></span><br><span class="line">for FILE_NAME in ./*</span><br><span class="line">do</span><br><span class="line">echo -n "$&#123;FILE_NAME&#125; "</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash shell.sh </span></span><br><span class="line">./a.out ./in.txt ./out.txt ./shell.sh ./test.cpp</span><br></pre></td></tr></table></figure><h2 id="while语句"><a class="markdownIt-Anchor" href="#while语句"></a> while语句</h2><p>  语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件测试</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash"> 循环内的命令</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>  while语句首先进行条件测试，如果条件为真，则进入循环，直到条件为假时退出循环，跟C语言的一样。while语句的一个经典的用法是搭配输入重定向，读取文件的内容，下面是一个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read VAR # 读取标准输入的一行</span><br><span class="line">do</span><br><span class="line">echo $&#123;VAR&#125;</span><br><span class="line">done &lt; in.txt # 将in.txt文件重定向到标准输入</span><br></pre></td></tr></table></figure><h2 id="until语句"><a class="markdownIt-Anchor" href="#until语句"></a> until语句</h2><p>  语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until 条件测试</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span><span class="bash"> 循环内的命令</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>  until语句在条件为假时进入循环，条件为真时退出循环，其他和while语句相同。</p><h1 id="其他命令"><a class="markdownIt-Anchor" href="#其他命令"></a> 其他命令</h1><h2 id="find"><a class="markdownIt-Anchor" href="#find"></a> find</h2><p>  find命令用于查找文件，这里简单的列出一些常用的用法，更详细的用法可以查manpages。</p><h3 id="根据文件名查找"><a class="markdownIt-Anchor" href="#根据文件名查找"></a> 根据文件名查找</h3><p>  语法<code>find 查找的路径 -name pattern</code>，查找文件名与<a href="#%E6%A8%A1%E5%BC%8F">模式</a>pattern相匹配的文件。比如查找当前目录下所有以’.sh’结尾的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name "*.sh"</span><br></pre></td></tr></table></figure><h3 id="根据正则表达式查找"><a class="markdownIt-Anchor" href="#根据正则表达式查找"></a> 根据正则表达式查找</h3><p>  语法<code>find 查找的路径 -regex pattern</code>，查找文件名与<a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a>pattern相匹配的文件。比如查找当前目录下所有以’test’开头的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -regex '^\./test.*'</span><br></pre></td></tr></table></figure><h3 id="根据路径查找"><a class="markdownIt-Anchor" href="#根据路径查找"></a> 根据路径查找</h3><p>  语法<code>find 查找的路径 -path pattern</code>，查找文件的完整路径与<a href="#%E6%A8%A1%E5%BC%8F">模式</a>pattern相匹配的文件。与<code>-name</code>的区别是<code>-name</code>不匹配文件所在的目录，举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find ./shell -name <span class="string">"*sh*"</span></span></span><br><span class="line">./shell</span><br><span class="line">./shell/test_1.sh</span><br><span class="line"><span class="meta">$</span><span class="bash"> find ./shell -path <span class="string">"*sh*"</span></span></span><br><span class="line">./shell</span><br><span class="line">./shell/ganyuo.txt</span><br><span class="line">./shell/test_1.sh</span><br></pre></td></tr></table></figure><p>  使用<code>-name</code>匹配文件’./shell/ganyuo.txt’时，只匹配文件名’ganyuo.txt’，因为’ganyuo.txt’和模式&quot;*sh*“不匹配，所以不输出。使用<code>-path</code>匹配文件’./shell/ganyuo.txt’时，会匹配文件的完整路径’./shell/ganyuo.txt’，而’./shell/ganyuo.txt’和模式”*sh*&quot;匹配成功。</p><h3 id="根据文件类型查找"><a class="markdownIt-Anchor" href="#根据文件类型查找"></a> 根据文件类型查找</h3><p>  语法<code>find 查找的路径 -type c</code>，查找文件文件类型是c的文件，类型包括：</p><ul><li>b ：特殊块文件(缓冲的)</li><li>c ：特殊字符文件(不缓冲)</li><li>d ：目录</li><li>p ：命名管道(FIFO)</li><li>f ：普通文件</li><li>l ：符号链接</li><li>s ：套接字</li></ul><p>  查找当前目录下的普通文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -type f</span><br></pre></td></tr></table></figure><h3 id="根据文件大小查找"><a class="markdownIt-Anchor" href="#根据文件大小查找"></a> 根据文件大小查找</h3><p>  语法<code>find 查找的路径 -size n[单位]</code>，查找文件大小是n的文件，默认的单位是512字节的块，也可以使用其他单位，支持的单位有：</p><ul><li>b ：块(512字节)</li><li>c ：字节</li><li>w ：字(2字节)</li><li>k ：千字节</li><li>M ：兆字节</li><li>G ：千兆字节</li></ul><p>  还可以在n前面加个加号和减号，加个加号表示查找文件大小大于n的文件，减号表示小于，如果不加的话则查找文件大小刚好等于n的文件。举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下文件大小等于8个块的文件</span></span><br><span class="line">find ./ -size 8b</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下文件大小大于100千字节的文件（不包括等于100千字节的文件）</span></span><br><span class="line">find ./ -size +100k</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下文件大小小于10兆的文件（不包括等于10M的文件）</span></span><br><span class="line">find ./ -size -10M</span><br></pre></td></tr></table></figure><p>  这里还有一个要注意的细节是，n必须是整数，所以低阶单位换算成高阶单位要向上取整，比如某个大小为70字节的文件，换算成块是70÷512=0.13671875块，但是用块来查找的时候，find命令将这个文件大小当做等于1个块来处理。</p><h3 id="根据时间查找"><a class="markdownIt-Anchor" href="#根据时间查找"></a> 根据时间查找</h3><p>  语法：<code>find 查找的路径 -[时间类型][时间单位] n</code>，参数的关键字由时间类型和时间单位组成，时间类型包括三种：</p><ul><li>访问时间 ：对文件的最后一次的访问时间，用a表示。</li><li>修改时间 ：文件数据最后一次的修改时间，用m表示。</li><li>变化时间 ：文件状态(例如权限、所有者等)最后一次修改时间，用c表示。</li></ul><p>时间单位支持两种：</p><ul><li>min ：分钟</li><li>time ：24个小时</li></ul><p>将三种时间类型和两种时间单位组合，可以产生6种参数：</p><ul><li>-amin n ：对文件的最后一次的访问时间是在n分钟之前。</li><li>-atime n ：对文件的最后一次的访问时间是在n×24小时之前。</li><li>-mmin n ：文件数据最后一次的修改时间是在n分钟之前。</li><li>-mtime n ：文件数据最后一次的修改时间是在n×24小时之前。</li><li>-cmin n ：文件状态最后一次修改时间是在n分钟之前。</li><li>-ctime n ：文件状态最后一次修改时间是在n×24小时之前。</li></ul><p>  举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，最后一次的访问是在5分钟之前的文件。</span></span><br><span class="line">find ./ -amin 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，文件数据最后一次的修改时间是在2×24小时之前的文件。</span></span><br><span class="line">find ./ -mtime 2</span><br></pre></td></tr></table></figure><p>  如果n前面加个负号，则查找的是对应时间离现在不超过n的文件，举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，最后一次的访问时间离现在不超过5分钟的文件。</span></span><br><span class="line">find ./ -amin -5</span><br></pre></td></tr></table></figure><p>  还可以以某个文件的最后一次修改时间作为参照，来查找文件。</p><ul><li>-anewer file ：对文件的最后一次访问时间在file的最后一次修改时间之后。</li><li>-newer file ：文件数据最后一次的修改时间在file的最后一次修改时间之后。(注意这里前面不要加m)</li><li>-cnewer file ：文件状态最后一次修改时间在file的最后一次修改时间之后。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，最后一次的访问时间在./test.sh文件的最后一次修改时间之后的文件。</span></span><br><span class="line">find ./ -anewer ./test.sh</span><br></pre></td></tr></table></figure><h3 id="根据文件所有者查找"><a class="markdownIt-Anchor" href="#根据文件所有者查找"></a> 根据文件所有者查找</h3><p>参数：</p><ul><li>-user uname ：文件的所有者是uname(也可以使用数字形式的用户ID)。</li><li>-group gname ：文件属于gname(也允许使用数字形式的组ID)群组。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，文件所有者是root的文件。</span></span><br><span class="line">find ./ -user root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，文件所在群组为root的文件。</span></span><br><span class="line">find ./ -group root</span><br></pre></td></tr></table></figure><h3 id="根据权限查找"><a class="markdownIt-Anchor" href="#根据权限查找"></a> 根据权限查找</h3><ul><li>-perm mode ：文件的权限位恰好是mode(八进制或符号)。</li><li>-perm -mode ：mode中的所有的权限位都被设置了的文件。</li><li>-perm +mode ：mode中的任意一个的权限位被设置了的文件。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，权限是0777的文件。</span></span><br><span class="line">find ./ -perm 0777</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，文件所有者既有可写，又有可执行权限的文件。</span></span><br><span class="line">find ./ -perm -0300</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，文件所有者有可写，或者有可执行权限的文件。</span></span><br><span class="line">find ./ -perm +0300 # 这条命令会报错“find: 非法权限 ‘+0300’”，不知道为什么</span><br></pre></td></tr></table></figure><h3 id="多条件查找"><a class="markdownIt-Anchor" href="#多条件查找"></a> 多条件查找</h3><p>  可以用与或非逻辑，查找满足多种条件的命令。</p><ul><li>!或-not ：查找不满足条件的文件。</li><li>-a或-and ：查找两个条件都满足的文件。(默认的条件连接逻辑)</li><li>-o或-or ：查找满足任意一个条件的文件。</li></ul><p>  举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，除文件目录外的所有文件</span></span><br><span class="line">find ./ ! -type d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，文件大小在2M到100M之间的文件</span></span><br><span class="line">find ./ -size +2M -and -size -100M</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，以.png或.jpg结尾的文件</span></span><br><span class="line">find ./ -name "*.png" -or -name "*.jpg"</span><br></pre></td></tr></table></figure><p>  逻辑运算的优先级是“! &gt; -not &gt; 缺省与 &gt; -a &gt; -and &gt; -o &gt; -or”。如果要提高运算的优先级，可以用小括号括起来。举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下，以.png或.jpg结尾，且大小大于1M的文件</span></span><br><span class="line">find ./ \( -name "*.png" -or -name "*.jpg" \) -and -size +1M</span><br></pre></td></tr></table></figure><p>  上面的命令中，如果不加扩号，会先进行与运算，再进行或运算。加了括号以后，则优先进行括号里的或运算，再进行与运算。<br />  要注意的是两个括号前面要加<code>\</code>转义，而且前后都要用空格和其他参数分开。</p><h3 id="找到文件后执行命令"><a class="markdownIt-Anchor" href="#找到文件后执行命令"></a> 找到文件后执行命令</h3><p>  find命令可以用<code>-exec</code>和<code>-ok</code>参数，在找到的文件后执行特定的命令。举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找当前目录下以.sh结尾的文件，并将找到的文件移动到./shell/目录下</span></span><br><span class="line">find ./ -name "*.sh" -exec mv &#123;&#125; ./shell/ \;</span><br></pre></td></tr></table></figure><p>  上述命令中，<code>{}</code>表示找到的文件，<code>\;</code>表示命令的结束。<br />  find命令中，<code>-exec</code>和<code>-ok</code>的区别是，使用<code>-ok</code>在每次执行命令前会进行确认是否执行，<code>-exec</code>则直接执行，不确认。<br />  如果在对找到的文件要执行多条命令，可以使用多次<code>-exec</code>或<code>-ok</code>，举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将当前目录下的文件输出两遍</span></span><br><span class="line">find ./ -exec echo &#123;&#125; \; -exec echo &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="sed"><a class="markdownIt-Anchor" href="#sed"></a> sed</h2><p>还没学会</p><h2 id="awk"><a class="markdownIt-Anchor" href="#awk"></a> awk</h2><p>  awk是一个文本分析工具，用于分割处理文本内容。其主要工作流程是：将输入内容以记录为单位，逐个记录读入，用域分割字符串将每个记录分割成多个子字符串，分割后的这些子字符串叫作域，然后用处理指令对分割后的域进行处理。</p><p>  awk有三种方式调用方式：</p><ol><li>命令行方式。语法：<code>awk [-F 域分割字符串] 处理指令 输入文件</code>。</li><li>shell脚本方式。将所有的处理指令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，通过键入脚本名称来调用。相当于把shell脚本首行的：<code>#!/bin/sh</code>，换成：<code>#!/bin/awk</code>。</li><li>将所有的awk命令插入一个单独文件，然后调用：<code>awk -f awk-script-file 输入文件</code>，其中，-f选项加载awk-script-file中的awk脚本。</li></ol><p>  实际上awk算是一种编程语言，深入研究的话，涉及的内容比较多，这里只简单介绍一下常用的用法，想深入研究的小伙伴可以去看<a href="https://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="noopener">GNU的官方文档</a>。</p><h3 id="记录"><a class="markdownIt-Anchor" href="#记录"></a> 记录</h3><p>  在awk里，记录的分割用RS变量指定的字符分隔开来，RS默认是换行符，所以一般情况下，一条记录就是一行。可以通过在BEGIN里修改RS的值，来修改记录分隔字符，关于BEGIN，后面再说。</p><h3 id="域"><a class="markdownIt-Anchor" href="#域"></a> 域</h3><p>  awk对记录进行处理时，会将其分割成多个域，将分割后的域按顺序存到$1、$2、…$n变量里，$0存的是整条记录。</p><p>  域分割字符串用<code>-F</code>加一个<a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a>来指定，不指定时，默认用空格、制表符等空白字符组成的字符串（相当于<code>-F &quot;[\f\n\r\t\v ]*&quot;</code>）作为域分割字符串。下面是一个awk中分割域的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ./awk_input.txt </span></span><br><span class="line">12 | 24 | 48</span><br><span class="line">4  | 8  | 6</span><br><span class="line">5  | 11 | 17</span><br><span class="line">10 | 20 | 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用正则表达式<span class="string">"[ |]*"</span>作为域分割字符串</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk -F <span class="string">"[ |]*"</span> <span class="string">'&#123; printf("%2s %2s %2s\n", $1, $2, $3); &#125;'</span> ./awk_input.txt </span></span><br><span class="line">12 24 48</span><br><span class="line"> 4  8  6</span><br><span class="line"> 5 11 17</span><br><span class="line">10 20 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用默认的空白字符作为域分割字符串</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'&#123; printf("%2s %2s %2s\n", $1, $2, $3); &#125;'</span> ./awk_input.txt </span></span><br><span class="line">12  | 24</span><br><span class="line"> 4  |  8</span><br><span class="line"> 5  | 11</span><br><span class="line">10  | 20</span><br></pre></td></tr></table></figure><p>  上面的例子中，printf是awk的一种输出语句，用法和C语言几乎一样。<code>printf(&quot;%2s %2s %2s\n&quot;, $1, $2, $3);</code>语句用于输出当前记录的第1、2、3个域。</p><p>  第一条awk命令使用正则表达式&quot;[ |]*“匹配每条记录，每条记录共匹配到了两个域分割字符串，所以被分割成了3个域。第二条awk命令使用默认的域分割字符串（空格、制表符等空白字符组成），共匹配到了4个域分割字符串，所以每条记录被分割成了5个域（3个整数、两个”|&quot;）。</p><h3 id="变量-2"><a class="markdownIt-Anchor" href="#变量-2"></a> 变量</h3><p>  包括内置变量和自定义的变量。</p><p>常用的内置变量：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">$n</td><td style="text-align:left">第n个域</td></tr><tr><td style="text-align:left">$0</td><td style="text-align:left">所有域</td></tr><tr><td style="text-align:left">ARGC</td><td style="text-align:left">命令行参数个数</td></tr><tr><td style="text-align:left">ARGV</td><td style="text-align:left">命令行参数排列</td></tr><tr><td style="text-align:left">ENVIRON</td><td style="text-align:left">支持队列中系统环境变量的使用</td></tr><tr><td style="text-align:left">FILENAME</td><td style="text-align:left">awk浏览的文件名</td></tr><tr><td style="text-align:left">FNR</td><td style="text-align:left">浏览文件的记录数</td></tr><tr><td style="text-align:left">FS</td><td style="text-align:left">设置输入域分隔符，等价于命令行-F选项</td></tr><tr><td style="text-align:left">NF</td><td style="text-align:left">当前记录的域的个数</td></tr><tr><td style="text-align:left">NR</td><td style="text-align:left">已读的记录数</td></tr><tr><td style="text-align:left">OFS</td><td style="text-align:left">输出域分隔符</td></tr><tr><td style="text-align:left">ORS</td><td style="text-align:left">输出记录分隔符</td></tr><tr><td style="text-align:left">RS</td><td style="text-align:left">控制记录分隔符</td></tr></tbody></table><p>  自定义的变量和<a href="#%E5%8F%98%E9%87%8F">shell的变量</a>很相似。举个简单的例子，将每个记录第2个域的值+1，存到变量<code>num</code>中，然后输出<code>num</code>的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ./awk_input.txt </span></span><br><span class="line">12  24  48</span><br><span class="line">4   8   6</span><br><span class="line">5   11  17</span><br><span class="line">10  20  30</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'&#123; num = $2 + 1; printf("第%d行第2个域+1后的值：%d\n", NR, num); &#125;'</span> ./awk_input.txt </span></span><br><span class="line">第1行第2个域+1后的值：25</span><br><span class="line">第2行第2个域+1后的值：9</span><br><span class="line">第3行第2个域+1后的值：12</span><br><span class="line">第4行第2个域+1后的值：21</span><br></pre></td></tr></table></figure><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><p>  awk可以使用关联数组这种数据结构，索引可以是数字或字符串。awk关联数组不需要提前声明其大小，因为它在运行时可以自动的增大或减小。用起来和C++的map很像。</p><p>数组使用的语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name[index] &#x3D; value</span><br></pre></td></tr></table></figure><h4 id="创建数组"><a class="markdownIt-Anchor" href="#创建数组"></a> 创建数组</h4><p>  直接对数组赋值就可以创建数组了，举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span> | awk <span class="string">'&#123; arr[2] = "111"; arr["aaa"] = "222"; printf("%s %s\n", arr[2], arr["aaa"]); &#125;'</span></span></span><br><span class="line">111 222</span><br></pre></td></tr></table></figure><p>  上面的例子中，数组arr分别用了数字2和字符串&quot;aaa&quot;作为索引，数组里存的数据都是字符串。</p><h4 id="删除数组元素"><a class="markdownIt-Anchor" href="#删除数组元素"></a> 删除数组元素</h4><p>  可以使用<code>delete</code>语句来删除数组元素，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete array_name[index]</span><br></pre></td></tr></table></figure><p>删除数组元素例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span> | awk <span class="string">'&#123; arr[2] = "111"; printf("%s\n", arr[2]); delete arr[2]; printf("%s\n", arr[2]); &#125;'</span></span></span><br><span class="line">111</span><br></pre></td></tr></table></figure><p>  上面的例子中，删除arr[2]后，数组对应的值变成了空。</p><h3 id="模式-2"><a class="markdownIt-Anchor" href="#模式-2"></a> 模式</h3><p>  awk的每条处理指令包括两部分，模式和动作，模式是用来控制动作的执行的。如果没有模式的话，默认对每一条记录都执行动作，比如前面举的awk的例子，都没有指定模式<br />这里简单介绍一下三种类型的模式：1、条件模式，2、正则表达式，3、BEGIN和END。</p><ol><li>条件模式：顾名思义，就是对符合条件的记录才进行处理，举个例子：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ./awk_input.txt </span></span><br><span class="line">12 | 24 | 48</span><br><span class="line">4  | 8  | 6</span><br><span class="line">5  | 11 | 17</span><br><span class="line">10 | 20 | 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这条awk指令的条件模式是<span class="string">"<span class="variable">$2</span> &gt; 15"</span>，作用是只对第2个域大于15的记录执行后面的动作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第2行和第3行的第2个域都小于15，不符合条件，所以没有执行动作里的<span class="built_in">printf</span>语句</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk -F <span class="string">"[ |]*"</span> <span class="string">'$2 &gt; 15 &#123; printf("第%d行第2个域大于15\n", NR); &#125;'</span> ./awk_input.txt </span></span><br><span class="line">第1行第2个域大于15</span><br><span class="line">第4行第2个域大于15</span><br></pre></td></tr></table></figure><ol start="2"><li>正则表达式：只对能用正则表达式匹配上的行进行处理，使用正则表达式作为模式的话，正则表达式要放在两个<code>/</code>中间，举个例子：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ./awk_input.txt </span></span><br><span class="line">12 | 24 | 48</span><br><span class="line">4  | 8  | 6</span><br><span class="line">5  | 11 | 17</span><br><span class="line">10 | 20 | 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这条awk指令使用正则表达式<span class="string">".*2.*"</span>，意思是只对包含2的记录执行后面的动作</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'/.*2.*/ &#123; printf("第%d行包含2\n", NR); &#125;'</span> ./awk_input.txt </span></span><br><span class="line">第1行包含2</span><br><span class="line">第4行包含2</span><br></pre></td></tr></table></figure><ol start="3"><li>BEGIN和END是两个特殊的模式，BEGIN的作用是使后面的动作在处理所有记录前执行一次，END则是在处理完所有记录后执行一次，举个例子：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ./awk_input.txt </span></span><br><span class="line">12 | 24 | 48</span><br><span class="line">4  | 8  | 6</span><br><span class="line">5  | 11 | 17</span><br><span class="line">10 | 20 | 30</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'BEGIN &#123; printf("这是BEGIN打印的\n"); &#125; &#123; printf("这是第%d行\n", NR); &#125; END &#123; printf("这是END打印的\n"); &#125;'</span> ./awk_input.txt </span></span><br><span class="line">这是BEGIN打印的</span><br><span class="line">这是第1行</span><br><span class="line">这是第2行</span><br><span class="line">这是第3行</span><br><span class="line">这是第4行</span><br><span class="line">这是END打印的</span><br></pre></td></tr></table></figure><h3 id="动作"><a class="markdownIt-Anchor" href="#动作"></a> 动作</h3><p>  动作是由一些处理的指令，每个动作需要用大括号{}括起来，动作里也有选择和循环控制流，支持的控制流语句包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">if (condition) statement [ else statement ]</span><br><span class="line"></span><br><span class="line">while (condition) statement</span><br><span class="line">do statement while (condition)</span><br><span class="line"></span><br><span class="line">for (expr1; expr2; expr3) statement</span><br><span class="line">for (var in array) statement</span><br><span class="line"></span><br><span class="line">break</span><br><span class="line">continue</span><br><span class="line"></span><br><span class="line">delete array[index]</span><br><span class="line">delete array</span><br><span class="line"></span><br><span class="line">exit [ expression ]</span><br><span class="line"></span><br><span class="line">&#123; statements &#125;</span><br><span class="line"></span><br><span class="line">switch (expression) &#123;</span><br><span class="line">case value|regex : statement</span><br><span class="line">...</span><br><span class="line">[ default: statement ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  语法和C语言很相似，这里只介绍一下<code>if、else</code>和<code>for</code>语句，其他语句类比C语言，照着用就好了。</p><h4 id="if语句-2"><a class="markdownIt-Anchor" href="#if语句-2"></a> if语句</h4><p><code>if、else</code>语句语法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)</span><br><span class="line">&#123;</span><br><span class="line">动作</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">动作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if、else</code>语句例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ./awk_input.txt </span></span><br><span class="line">12  24  48</span><br><span class="line">4   8   6</span><br><span class="line">5   11  17</span><br><span class="line">10  20  30</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'&#123; if($2 &gt; 15) &#123; printf("第%d行第2个域大于15\n", NR); &#125; else &#123; printf("第%d行第2个域小于等于15\n", NR); &#125; &#125;'</span> ./awk_input.txt</span></span><br><span class="line">第1行第2个域大于15</span><br><span class="line">第2行第2个域小于等于15</span><br><span class="line">第3行第2个域小于等于15</span><br><span class="line">第4行第2个域大于15</span><br></pre></td></tr></table></figure><h4 id="for语句-2"><a class="markdownIt-Anchor" href="#for语句-2"></a> for语句</h4><p>  <code>for</code>语句有两种用法，一种用法和C语言相似，一种和shell里的for很相似。</p><p><code>for</code>语句语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for(表达式1; 条件; 表达式2)</span><br><span class="line">&#123;</span><br><span class="line">动作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(索引 in 数组)</span><br><span class="line">&#123;</span><br><span class="line">动作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code>语句例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ./awk_input.txt </span></span><br><span class="line">12  24  48</span><br><span class="line">4   8   6</span><br><span class="line">5   11  17</span><br><span class="line">10  20  30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一种<span class="keyword">for</span>语句</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'&#123; arr[NR] = $2; &#125; END&#123; for(i = 1; i &lt;= NR; i++) &#123; printf("%s ", arr[i]); &#125; &#125;'</span> ./awk_input.txt</span></span><br><span class="line">24 8 11 20 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种<span class="keyword">for</span>语句</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'&#123; arr[NR] = $2; &#125; END&#123; for(i in arr) &#123; printf("%s ", arr[i]); &#125; &#125;'</span> ./awk_input.txt</span></span><br><span class="line">24 8 11 20</span><br></pre></td></tr></table></figure><p>  上面的两个例子都是利用<code>for</code>语句打印所有记录第2个域的内容，需要注意的是，第二种<code>for</code>语句循环的是数组的索引，而不是值。</p><h3 id="输出-2"><a class="markdownIt-Anchor" href="#输出-2"></a> 输出</h3><p>  awk可以用<code>printf</code>和<code>print</code>来输出，<code>printf</code>用法和C语言很像，<code>print</code>的用法和python2的很像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span> | awk <span class="string">'&#123; printf("printf: %s\n", NR); print "print:", NR; &#125;'</span></span></span><br><span class="line">printf: 1  # printf的输出</span><br><span class="line">print: 1   # print的输出</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h1&gt;
&lt;h2 id=&quot;shell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#shell&quot;&gt;&lt;/a&gt; shell&lt;/h2&gt;
&lt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://ganyuo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="linux" scheme="http://ganyuo.github.io/tags/linux/"/>
    
    <category term="shell" scheme="http://ganyuo.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>HDU-1754 I Hate It</title>
    <link href="http://ganyuo.github.io/acm/hdu-1754/"/>
    <id>http://ganyuo.github.io/acm/hdu-1754/</id>
    <published>2020-04-13T07:56:34.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<p>线段树模板题，求区间最大值</p><a id="more"></a><h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1754</a></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  中文题，不解释</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  跟上一题一样，还是线段树的模板题，只不过把求区间和改成了求区间最大值。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=1754 */</span></span><br><span class="line"><span class="comment">/* AC 702MS 4060K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[MAX_N];</span><br><span class="line"><span class="keyword">int</span> seg_tree[<span class="number">4</span> * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] = num[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = build(root * <span class="number">2</span>, left, mid);</span><br><span class="line">b = build(root * <span class="number">2</span> + <span class="number">1</span>, mid, right);</span><br><span class="line">seg_tree[root] = (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(index &lt; mid)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span>] = update(root * <span class="number">2</span>, left, mid, index, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span> + <span class="number">1</span>] = update(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, index, val);</span><br><span class="line">&#125;</span><br><span class="line">a = seg_tree[root * <span class="number">2</span>];</span><br><span class="line">b = seg_tree[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">seg_tree[root] = (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(qr &lt;= left || right &lt;= ql)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ql &lt;= left &amp;&amp; right &lt;= qr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = query(root * <span class="number">2</span>, left, mid, ql, qr);</span><br><span class="line">b = query(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, ql, qr);</span><br><span class="line"><span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="keyword">int</span> i, ans;</span><br><span class="line"><span class="keyword">char</span> req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">getchar();</span><br><span class="line">req = getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">x -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(req == <span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = query(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req == <span class="string">'U'</span>)</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线段树模板题，求区间最大值&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="hdu" scheme="http://ganyuo.github.io/tags/hdu/"/>
    
    <category term="线段树" scheme="http://ganyuo.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU-1166 敌兵布阵</title>
    <link href="http://ganyuo.github.io/acm/hdu-1166/"/>
    <id>http://ganyuo.github.io/acm/hdu-1166/</id>
    <published>2020-04-13T04:02:13.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<p>线段树模板题，求区间和</p><a id="more"></a><h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1166</a></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  又是一道可以偷懒的中文题，开心！</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  这是一道线段树的模板题，而且不加延迟标记也能AC。这题也可以用树状数组来做。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=1166 */</span></span><br><span class="line"><span class="comment">/* AC 249MS 1928K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[MAX_N];</span><br><span class="line"><span class="keyword">int</span> seg_tree[<span class="number">4</span> * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] = num[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = build(root * <span class="number">2</span>, left, mid);</span><br><span class="line">b = build(root * <span class="number">2</span> + <span class="number">1</span>, mid, right);</span><br><span class="line">seg_tree[root] = a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> index, <span class="keyword">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] += add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(index &lt; mid)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span>] = update(root * <span class="number">2</span>, left, mid, index, add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span> + <span class="number">1</span>] = update(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, index, add);</span><br><span class="line">&#125;</span><br><span class="line">seg_tree[root] = seg_tree[root * <span class="number">2</span>] + seg_tree[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(qr &lt;= left || right &lt;= ql)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ql &lt;= left &amp;&amp; right &lt;= qr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = query(root * <span class="number">2</span>, left, mid, ql, qr);</span><br><span class="line">b = query(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, ql, qr);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cas, t, n, x, y;</span><br><span class="line"><span class="keyword">int</span> i, ans;</span><br><span class="line"><span class="keyword">char</span> req[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">for</span>(cas = <span class="number">1</span>; cas &lt;= t; cas++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, cas);</span><br><span class="line"><span class="keyword">while</span>(getchar(), <span class="built_in">scanf</span>(<span class="string">"%s"</span>, req) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'E'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">x -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = query(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'S'</span>)</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>, <span class="number">0</span>, n, x, -y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线段树模板题，求区间和&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="hdu" scheme="http://ganyuo.github.io/tags/hdu/"/>
    
    <category term="线段树" scheme="http://ganyuo.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1287 Networking</title>
    <link href="http://ganyuo.github.io/acm/poj-1287/"/>
    <id>http://ganyuo.github.io/acm/poj-1287/</id>
    <published>2020-04-10T00:57:52.000Z</published>
    <updated>2025-03-06T06:48:01.564Z</updated>
    
    <content type="html"><![CDATA[<p>最小生成树问题</p><a id="more"></a><h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><p>  <a href="http://poj.org/problem?id=1287" target="_blank" rel="noopener">http://poj.org/problem?id=1287</a></p><h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>  给出P个节点和R条边的无向图，求最小生成树。</p><h1 id="题目解析"><a class="markdownIt-Anchor" href="#题目解析"></a> 题目解析</h1><p>  最小生成树的模板题，可以用Prim算法或者Kruskal算法求解，Prim算法适合稠密图（点少边多），Kruskal算法适合稀疏图（点多边少）。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><p>Prim算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1287 */</span></span><br><span class="line"><span class="comment">/* AC 16MS 380K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> mp[][MAX_N], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, min, ans;</span><br><span class="line"><span class="keyword">int</span> book[MAX_N];</span><br><span class="line"><span class="keyword">int</span> tree[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">tree[i] = <span class="number">0</span>;</span><br><span class="line">dist[i] = mp[<span class="number">0</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">book[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">tree[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = <span class="number">0x1f1f1f1f</span>;</span><br><span class="line">k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span> &amp;&amp; min &gt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">k = j;</span><br><span class="line">min = dist[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">book[k] = <span class="number">1</span>;</span><br><span class="line">ans += mp[tree[k]][k];</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span> &amp;&amp; mp[k][j] &lt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = mp[k][j];</span><br><span class="line">tree[j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> i, a, b, w, ans;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0x1f</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">a -= <span class="number">1</span>;</span><br><span class="line">b -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(w &lt; mp[a][b])</span><br><span class="line">&#123;</span><br><span class="line">mp[a][b] = w;</span><br><span class="line">mp[b][a] = w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = prim(mp, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kruskal算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1287 */</span></span><br><span class="line"><span class="comment">/* AC 16MS 400K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b, w;</span><br><span class="line">&#125; edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">set</span>[i] != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = find_root(<span class="built_in">set</span>, <span class="built_in">set</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">set</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(edge e[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k, ar, br;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[MAX_N];</span><br><span class="line"></span><br><span class="line">sort(e, e + m, cmp);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m &amp;&amp; k &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ar = find_root(<span class="built_in">set</span>, e[i].a);</span><br><span class="line">br = find_root(<span class="built_in">set</span>, e[i].b);</span><br><span class="line"><span class="keyword">if</span>(ar != br)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[ar] = br;</span><br><span class="line">ans += e[i].w;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">edge e[MAX_N * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a, b, w, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">e[i] = (edge)&#123;a, b, w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = kruskal(e, n, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最小生成树问题&lt;/p&gt;</summary>
    
    
    
    <category term="acm" scheme="http://ganyuo.github.io/categories/acm/"/>
    
    
    <category term="acm" scheme="http://ganyuo.github.io/tags/acm/"/>
    
    <category term="poj" scheme="http://ganyuo.github.io/tags/poj/"/>
    
    <category term="最小生成树" scheme="http://ganyuo.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
</feed>
